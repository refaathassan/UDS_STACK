
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003738  08003738  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08003738  08003738  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003738  08003738  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08003740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000009c  080037dc  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  080037dc  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002bb9  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e78  00000000  00000000  00022cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000498  00000000  00000000  00023b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000355  00000000  00000000  00023fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001c2e  00000000  00000000  0002432d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000034e5  00000000  00000000  00025f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a5e6  00000000  00000000  00029440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001bcc  00000000  00000000  00033a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000355f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	080033f0 	.word	0x080033f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	080033f0 	.word	0x080033f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Std_id_High>:
 * 					 CAN_800KBPS,
 * 					 CAN_1MBPS
 	 	 	 	 	 	 	 	 	 	 	 	 *************************/
#define BOUDRATE		CAN_100KBPS
u16 Std_id_High(u16 local_u16Std_Id)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
	return (local_u16Std_Id << 5);
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	015b      	lsls	r3, r3, #5
 800016a:	b29b      	uxth	r3, r3
}
 800016c:	4618      	mov	r0, r3
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr

08000176 <CAN_FilterConfig>:
void CAN_FilterConfig(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b08a      	sub	sp, #40	; 0x28
 800017a:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_FilterInit;
	CAN_FilterInit.FilterActivation = ENABLE;
 800017c:	2301      	movs	r3, #1
 800017e:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterInit.FilterBank = 0;
 8000180:	2300      	movs	r3, #0
 8000182:	61bb      	str	r3, [r7, #24]
	CAN_FilterInit.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000184:	2300      	movs	r3, #0
 8000186:	617b      	str	r3, [r7, #20]
	CAN_FilterInit.FilterIdHigh = Std_id_High(0x100);
 8000188:	f44f 7080 	mov.w	r0, #256	; 0x100
 800018c:	f7ff ffe6 	bl	800015c <Std_id_High>
 8000190:	4603      	mov	r3, r0
 8000192:	607b      	str	r3, [r7, #4]
	CAN_FilterInit.FilterIdLow = 0x0000;
 8000194:	2300      	movs	r3, #0
 8000196:	60bb      	str	r3, [r7, #8]
	CAN_FilterInit.FilterMaskIdHigh = 0x0000;
 8000198:	2300      	movs	r3, #0
 800019a:	60fb      	str	r3, [r7, #12]
	CAN_FilterInit.FilterMaskIdLow = 0x0000;
 800019c:	2300      	movs	r3, #0
 800019e:	613b      	str	r3, [r7, #16]
	CAN_FilterInit.FilterMode = CAN_FILTERMODE_IDLIST;
 80001a0:	2301      	movs	r3, #1
 80001a2:	61fb      	str	r3, [r7, #28]
	CAN_FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 80001a4:	2301      	movs	r3, #1
 80001a6:	623b      	str	r3, [r7, #32]

	CAN_voidConfigFilter(&CAN_FilterInit);
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 f9f0 	bl	8000590 <CAN_voidConfigFilter>
}
 80001b0:	bf00      	nop
 80001b2:	3728      	adds	r7, #40	; 0x28
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}

080001b8 <CAN_voidInit>:
														&CAN_TxMailbox2AbortCallback};



void CAN_voidInit(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	encryption_rc4_key_generation(key,key_gen);
 80001bc:	4931      	ldr	r1, [pc, #196]	; (8000284 <CAN_voidInit+0xcc>)
 80001be:	4832      	ldr	r0, [pc, #200]	; (8000288 <CAN_voidInit+0xd0>)
 80001c0:	f001 fa52 	bl	8001668 <encryption_rc4_key_generation>
    /**  Enable the CAN interface clock **/
	RCC_voidEnableClock(RCC_APB1, 25);
 80001c4:	2119      	movs	r1, #25
 80001c6:	2001      	movs	r0, #1
 80001c8:	f001 f8c4 	bl	8001354 <RCC_voidEnableClock>
    /** Configure CAN pins **/
    /* Remapping PINS   CAN_RX mapped to PB8,
                        CAN_TX mapped to PB9    */
    RCC_voidEnableClock(RCC_APB2, 0);
 80001cc:	2100      	movs	r1, #0
 80001ce:	2002      	movs	r0, #2
 80001d0:	f001 f8c0 	bl	8001354 <RCC_voidEnableClock>
    MGPIO_voidSetPinDirection(  GPIO_PORTA , PIN11 ,INPUT_FLOATING);    //can rx
 80001d4:	2204      	movs	r2, #4
 80001d6:	210b      	movs	r1, #11
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 ffd1 	bl	8001180 <MGPIO_voidSetPinDirection>
    MGPIO_voidSetPinDirection(  GPIO_PORTA , PIN12 ,OUTPUT_SPEED_10MHZ_AF_PP);   //can tx
 80001de:	2209      	movs	r2, #9
 80001e0:	210c      	movs	r1, #12
 80001e2:	2000      	movs	r0, #0
 80001e4:	f000 ffcc 	bl	8001180 <MGPIO_voidSetPinDirection>
    //RCC_voidEnableClock(RCC_APB2, APB2_GPIOB_EN);
    //GPIO_voidSetPinDirection(GPIOB, PIN8, INPUT_FLOATING); //RX
   // GPIO_voidSetPinDirection(GPIOB, PIN9, OUTPUT_SPEED_2MHZ_AFPP); //TX
    /**  exit CAN sleep mode **/
    /* CLEAR SLEEP bit (SLEEP) */
    CLR_BIT(CAN->MCR,1);
 80001e8:	4b28      	ldr	r3, [pc, #160]	; (800028c <CAN_voidInit+0xd4>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <CAN_voidInit+0xd4>)
 80001ee:	f023 0302 	bic.w	r3, r3, #2
 80001f2:	6013      	str	r3, [r2, #0]
    /* wait to exit sleep mode */
    while (!(GET_BIT(CAN->MSR,1) == 0));
 80001f4:	bf00      	nop
 80001f6:	4b25      	ldr	r3, [pc, #148]	; (800028c <CAN_voidInit+0xd4>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	f003 0302 	and.w	r3, r3, #2
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d1f9      	bne.n	80001f6 <CAN_voidInit+0x3e>
     /**  Set CAN Initialization mode **/
    /* SET Initialization request BIT (INRQ) */
    SET_BIT(CAN->MCR,0);
 8000202:	4b22      	ldr	r3, [pc, #136]	; (800028c <CAN_voidInit+0xd4>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a21      	ldr	r2, [pc, #132]	; (800028c <CAN_voidInit+0xd4>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6013      	str	r3, [r2, #0]
    /* wait to enter in Initialization mode */
    while(!(GET_BIT(CAN->MSR,0) == 1));
 800020e:	bf00      	nop
 8000210:	4b1e      	ldr	r3, [pc, #120]	; (800028c <CAN_voidInit+0xd4>)
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	2b01      	cmp	r3, #1
 800021a:	d1f9      	bne.n	8000210 <CAN_voidInit+0x58>
#if TransmitFifoPriority == ENABLE
     /* by the request order */
        SET_BIT(CAN->MCR,2); //TXFP
#else
     /* by the identifier of the message */
        CLR_BIT(CAN->MCR,2); //TXFP
 800021c:	4b1b      	ldr	r3, [pc, #108]	; (800028c <CAN_voidInit+0xd4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a1a      	ldr	r2, [pc, #104]	; (800028c <CAN_voidInit+0xd4>)
 8000222:	f023 0304 	bic.w	r3, r3, #4
 8000226:	6013      	str	r3, [r2, #0]
         Once a receive FIFO is full the next incoming message will be discarded. */
        SET_BIT(CAN->MCR,3); //RFLM
#else
     /* Receive FIFO not locked on overrun.
         Once a receive FIFO is full the next incoming message will overwrite the previous one. */
        CLR_BIT(CAN->MCR,3); //RFLM
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <CAN_voidInit+0xd4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a17      	ldr	r2, [pc, #92]	; (800028c <CAN_voidInit+0xd4>)
 800022e:	f023 0308 	bic.w	r3, r3, #8
 8000232:	6013      	str	r3, [r2, #0]
#endif
    /** CHECK automatic retransmission **/
#if AutoRetransmission == ENABLE
        CLR_BIT(CAN->MCR,4); //NART
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <CAN_voidInit+0xd4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a14      	ldr	r2, [pc, #80]	; (800028c <CAN_voidInit+0xd4>)
 800023a:	f023 0310 	bic.w	r3, r3, #16
 800023e:	6013      	str	r3, [r2, #0]
        SET_BIT(CAN->MCR,4); //NART
#endif

    /** CHECK automatic wakeup mode **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,5); //AWUM
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <CAN_voidInit+0xd4>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a11      	ldr	r2, [pc, #68]	; (800028c <CAN_voidInit+0xd4>)
 8000246:	f043 0320 	orr.w	r3, r3, #32
 800024a:	6013      	str	r3, [r2, #0]
       CLR_BIT(CAN->MCR,5); //AWUM
#endif

    /** CHECK automatic bus-off management **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,6); //ABOM
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <CAN_voidInit+0xd4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <CAN_voidInit+0xd4>)
 8000252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000256:	6013      	str	r3, [r2, #0]

    /** CHECK Time triggered communication mode **/
#if TimeTriggeredMode == ENABLE
        SET_BIT(CAN->MCR,7); //TTCM
#else
        CLR_BIT(CAN->MCR,7); //TTCM
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <CAN_voidInit+0xd4>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0b      	ldr	r2, [pc, #44]	; (800028c <CAN_voidInit+0xd4>)
 800025e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000262:	6013      	str	r3, [r2, #0]
#endif


     /** Set the bit timing register **/
  CAN->BTR= (u32)(MODE |
		  ((CAN_bitRateConfig[BOUDRATE].TS2-1) << 20) |
 8000264:	2302      	movs	r3, #2
 8000266:	3b01      	subs	r3, #1
 8000268:	051b      	lsls	r3, r3, #20
  CAN->BTR= (u32)(MODE |
 800026a:	461a      	mov	r2, r3
		  ((CAN_bitRateConfig[BOUDRATE].TS1-1) << 16) |
 800026c:	2305      	movs	r3, #5
 800026e:	3b01      	subs	r3, #1
 8000270:	041b      	lsls	r3, r3, #16
		  ((CAN_bitRateConfig[BOUDRATE].TS2-1) << 20) |
 8000272:	4313      	orrs	r3, r2
		  (CAN_bitRateConfig[BOUDRATE].BRP-1));
 8000274:	220a      	movs	r2, #10
 8000276:	3a01      	subs	r2, #1
 8000278:	4611      	mov	r1, r2
  CAN->BTR= (u32)(MODE |
 800027a:	4a04      	ldr	r2, [pc, #16]	; (800028c <CAN_voidInit+0xd4>)
 800027c:	430b      	orrs	r3, r1
 800027e:	61d3      	str	r3, [r2, #28]
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	200000b8 	.word	0x200000b8
 8000288:	20000000 	.word	0x20000000
 800028c:	40006400 	.word	0x40006400

08000290 <CAN_voidAddTxMsg>:


void CAN_voidAddTxMsg( CAN_TxHeaderTypeDef *pTxHeader, u8 Local_u8Data[])
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
	u32 local_u8TransmitMailbox; // which mailbox is empty to set Local_u8Data in it (read CODE bit in TSR register)
	u32 local_u32TSR; //transmit status register
	local_u32TSR = CAN->TSR;
 800029a:	4b4e      	ldr	r3, [pc, #312]	; (80003d4 <CAN_voidAddTxMsg+0x144>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	60fb      	str	r3, [r7, #12]
	 /* Check that all the Tx mailboxes are not full */
//	while(1)
//	{
		if ( (GET_BIT(local_u32TSR, 26) != 0x0) || /* TME0 */
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d10a      	bne.n	80002c0 <CAN_voidAddTxMsg+0x30>
			 (GET_BIT (local_u32TSR,27) != 0x0) || /* TME1 */
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
		if ( (GET_BIT(local_u32TSR, 26) != 0x0) || /* TME0 */
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d105      	bne.n	80002c0 <CAN_voidAddTxMsg+0x30>
			 (GET_BIT(local_u32TSR,28) != 0x0) )  /* TME2 */
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
			 (GET_BIT (local_u32TSR,27) != 0x0) || /* TME1 */
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f000 8084 	beq.w	80003c8 <CAN_voidAddTxMsg+0x138>
		{
			/* Select an empty transmit mailbox */
			local_u8TransmitMailbox = ((local_u32TSR >> 24) & 0x3); //(read CODE[1:0] bit in TSR register)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0e1b      	lsrs	r3, r3, #24
 80002c4:	f003 0303 	and.w	r3, r3, #3
 80002c8:	60bb      	str	r3, [r7, #8]
			 /* Check transmit mailbox value */
			if (local_u8TransmitMailbox <=2)
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d87b      	bhi.n	80003c8 <CAN_voidAddTxMsg+0x138>
			{
				/* Set up the Id */
				  if (pTxHeader->IDE == CAN_ID_STD)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d10c      	bne.n	80002f2 <CAN_voidAddTxMsg+0x62>
				  {
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->StdId << 21) |
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	055a      	lsls	r2, r3, #21
															pTxHeader->RTR);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68db      	ldr	r3, [r3, #12]
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->StdId << 21) |
 80002e2:	493c      	ldr	r1, [pc, #240]	; (80003d4 <CAN_voidAddTxMsg+0x144>)
 80002e4:	431a      	orrs	r2, r3
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	3318      	adds	r3, #24
 80002ea:	011b      	lsls	r3, r3, #4
 80002ec:	440b      	add	r3, r1
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	e00e      	b.n	8000310 <CAN_voidAddTxMsg+0x80>
				  }
				  else
				  {
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	00da      	lsls	r2, r3, #3
																		pTxHeader->IDE | pTxHeader->RTR);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	689b      	ldr	r3, [r3, #8]
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 80002fc:	431a      	orrs	r2, r3
																		pTxHeader->IDE | pTxHeader->RTR);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 8000302:	4934      	ldr	r1, [pc, #208]	; (80003d4 <CAN_voidAddTxMsg+0x144>)
																		pTxHeader->IDE | pTxHeader->RTR);
 8000304:	431a      	orrs	r2, r3
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	3318      	adds	r3, #24
 800030a:	011b      	lsls	r3, r3, #4
 800030c:	440b      	add	r3, r1
 800030e:	601a      	str	r2, [r3, #0]
				  }

				  /* Set up the DLC */
				  CAN->TxMailBox[local_u8TransmitMailbox].TDTR = (pTxHeader->DLC);
 8000310:	4930      	ldr	r1, [pc, #192]	; (80003d4 <CAN_voidAddTxMsg+0x144>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	691a      	ldr	r2, [r3, #16]
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	3318      	adds	r3, #24
 800031a:	011b      	lsls	r3, r3, #4
 800031c:	440b      	add	r3, r1
 800031e:	3304      	adds	r3, #4
 8000320:	601a      	str	r2, [r3, #0]
				  /* Set up the Transmit Global Time mode */
				  if (pTxHeader->TransmitGlobalTime == ENABLE)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	7d1b      	ldrb	r3, [r3, #20]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d10f      	bne.n	800034a <CAN_voidAddTxMsg+0xba>
				  {
					  SET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TDTR, 8);
 800032a:	4a2a      	ldr	r2, [pc, #168]	; (80003d4 <CAN_voidAddTxMsg+0x144>)
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	3318      	adds	r3, #24
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	4413      	add	r3, r2
 8000334:	3304      	adds	r3, #4
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4926      	ldr	r1, [pc, #152]	; (80003d4 <CAN_voidAddTxMsg+0x144>)
 800033a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	3318      	adds	r3, #24
 8000342:	011b      	lsls	r3, r3, #4
 8000344:	440b      	add	r3, r1
 8000346:	3304      	adds	r3, #4
 8000348:	601a      	str	r2, [r3, #0]
				  }
				  /* Set up the Local_u8Data field */
				 CAN->TxMailBox[local_u8TransmitMailbox].TDHR=
							  ((u32)Local_u8Data[7] << 24) |
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	3307      	adds	r3, #7
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	061a      	lsls	r2, r3, #24
							  ((u32)Local_u8Data[6] << 16) |
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	3306      	adds	r3, #6
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	041b      	lsls	r3, r3, #16
							  ((u32)Local_u8Data[7] << 24) |
 800035a:	431a      	orrs	r2, r3
							  ((u32)Local_u8Data[5] << 8 ) |
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	3305      	adds	r3, #5
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	021b      	lsls	r3, r3, #8
							  ((u32)Local_u8Data[6] << 16) |
 8000364:	4313      	orrs	r3, r2
							  ((u32)Local_u8Data[4]);
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	3204      	adds	r2, #4
 800036a:	7812      	ldrb	r2, [r2, #0]
				 CAN->TxMailBox[local_u8TransmitMailbox].TDHR=
 800036c:	4919      	ldr	r1, [pc, #100]	; (80003d4 <CAN_voidAddTxMsg+0x144>)
							  ((u32)Local_u8Data[5] << 8 ) |
 800036e:	431a      	orrs	r2, r3
				 CAN->TxMailBox[local_u8TransmitMailbox].TDHR=
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	011b      	lsls	r3, r3, #4
 8000374:	440b      	add	r3, r1
 8000376:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800037a:	601a      	str	r2, [r3, #0]
				CAN->TxMailBox[local_u8TransmitMailbox].TDLR=
							  ((u32)Local_u8Data[3] << 24) |
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	3303      	adds	r3, #3
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	061a      	lsls	r2, r3, #24
							  ((u32)Local_u8Data[2] << 16) |
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	3302      	adds	r3, #2
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	041b      	lsls	r3, r3, #16
							  ((u32)Local_u8Data[3] << 24) |
 800038c:	431a      	orrs	r2, r3
							  ((u32)Local_u8Data[1] << 8 ) |
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	3301      	adds	r3, #1
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	021b      	lsls	r3, r3, #8
							  ((u32)Local_u8Data[2] << 16) |
 8000396:	4313      	orrs	r3, r2
							  ((u32)Local_u8Data[0]);
 8000398:	683a      	ldr	r2, [r7, #0]
 800039a:	7812      	ldrb	r2, [r2, #0]
				CAN->TxMailBox[local_u8TransmitMailbox].TDLR=
 800039c:	490d      	ldr	r1, [pc, #52]	; (80003d4 <CAN_voidAddTxMsg+0x144>)
							  ((u32)Local_u8Data[1] << 8 ) |
 800039e:	431a      	orrs	r2, r3
				CAN->TxMailBox[local_u8TransmitMailbox].TDLR=
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	011b      	lsls	r3, r3, #4
 80003a4:	440b      	add	r3, r1
 80003a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80003aa:	601a      	str	r2, [r3, #0]
				/* Request transmission */
				SET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TIR, 0);
 80003ac:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <CAN_voidAddTxMsg+0x144>)
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	3318      	adds	r3, #24
 80003b2:	011b      	lsls	r3, r3, #4
 80003b4:	4413      	add	r3, r2
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4906      	ldr	r1, [pc, #24]	; (80003d4 <CAN_voidAddTxMsg+0x144>)
 80003ba:	f043 0201 	orr.w	r2, r3, #1
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	3318      	adds	r3, #24
 80003c2:	011b      	lsls	r3, r3, #4
 80003c4:	440b      	add	r3, r1
 80003c6:	601a      	str	r2, [r3, #0]
			}
//			break;
//		}
	}

}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40006400 	.word	0x40006400

080003d8 <CAN_voidStart>:


void CAN_voidStart(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	/* CLEAR Initialization request BIT (INRQ) */
	CLR_BIT(CAN->MCR,0);
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <CAN_voidStart+0x28>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <CAN_voidStart+0x28>)
 80003e2:	f023 0301 	bic.w	r3, r3, #1
 80003e6:	6013      	str	r3, [r2, #0]
	/* wait to enter in Initialization mode */
	while(!(GET_BIT(CAN->MSR,0) == 0));
 80003e8:	bf00      	nop
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <CAN_voidStart+0x28>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1f9      	bne.n	80003ea <CAN_voidStart+0x12>
}
 80003f6:	bf00      	nop
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40006400 	.word	0x40006400

08000404 <CAN_voidGetRxMsg>:


void CAN_voidGetRxMsg(u32 local_u8RxFifo, CAN_RxHeaderTypeDef *pRxHeader, u8 Local_u8Data[])
{
 8000404:	b480      	push	{r7}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
    /* Get Identifier extension */
	pRxHeader->IDE =  GET_BIT(CAN->FIFOMailBox[local_u8RxFifo].RIR,2);
 8000410:	4a50      	ldr	r2, [pc, #320]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	331b      	adds	r3, #27
 8000416:	011b      	lsls	r3, r3, #4
 8000418:	4413      	add	r3, r2
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	089b      	lsrs	r3, r3, #2
 800041e:	f003 0201 	and.w	r2, r3, #1
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	609a      	str	r2, [r3, #8]
    if (pRxHeader->IDE == CAN_ID_STD)
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d109      	bne.n	8000442 <CAN_voidGetRxMsg+0x3e>
    {/* GET the Id */
      pRxHeader->StdId = CAN->FIFOMailBox[local_u8RxFifo].RIR >> 21;
 800042e:	4a49      	ldr	r2, [pc, #292]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	331b      	adds	r3, #27
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	4413      	add	r3, r2
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	0d5a      	lsrs	r2, r3, #21
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	e008      	b.n	8000454 <CAN_voidGetRxMsg+0x50>
    }
    else
    {
      pRxHeader->ExtId = CAN->FIFOMailBox[local_u8RxFifo].RIR >> 3;
 8000442:	4a44      	ldr	r2, [pc, #272]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	331b      	adds	r3, #27
 8000448:	011b      	lsls	r3, r3, #4
 800044a:	4413      	add	r3, r2
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	08da      	lsrs	r2, r3, #3
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	605a      	str	r2, [r3, #4]
    }
    /* GET the RTR */
    pRxHeader->RTR = GET_BIT(CAN->FIFOMailBox[local_u8RxFifo].RIR,1);
 8000454:	4a3f      	ldr	r2, [pc, #252]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	331b      	adds	r3, #27
 800045a:	011b      	lsls	r3, r3, #4
 800045c:	4413      	add	r3, r2
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	085b      	lsrs	r3, r3, #1
 8000462:	f003 0201 	and.w	r2, r3, #1
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	60da      	str	r2, [r3, #12]
    /* GET the DLC */
    pRxHeader->DLC = (CAN->FIFOMailBox[local_u8RxFifo].RDTR & 0xF);
 800046a:	4a3a      	ldr	r2, [pc, #232]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	331b      	adds	r3, #27
 8000470:	011b      	lsls	r3, r3, #4
 8000472:	4413      	add	r3, r2
 8000474:	3304      	adds	r3, #4
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f003 020f 	and.w	r2, r3, #15
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	611a      	str	r2, [r3, #16]
    /* GET the (FMI) Filter Match Index */
    pRxHeader->FilterMatchIndex = (CAN->FIFOMailBox[local_u8RxFifo].RDTR >> 8) & 0xFF;
 8000480:	4a34      	ldr	r2, [pc, #208]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	331b      	adds	r3, #27
 8000486:	011b      	lsls	r3, r3, #4
 8000488:	4413      	add	r3, r2
 800048a:	3304      	adds	r3, #4
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	b2da      	uxtb	r2, r3
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	619a      	str	r2, [r3, #24]
    /* GET the Time stamp */
    pRxHeader->TimeStamp = (CAN->FIFOMailBox[local_u8RxFifo].RDTR >> 16) & 0XFFFF;
 8000496:	4a2f      	ldr	r2, [pc, #188]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	331b      	adds	r3, #27
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	4413      	add	r3, r2
 80004a0:	3304      	adds	r3, #4
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	0c1b      	lsrs	r3, r3, #16
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	615a      	str	r2, [r3, #20]
    Local_u8Data[4] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR 	  ) & 0XFF);
    Local_u8Data[5] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 8 ) & 0XFF);
    Local_u8Data[6] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 16) & 0XFF);
    Local_u8Data[7] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 24) & 0XFF);
		#else
		for(u8 i=0 ; i < 8 ; i++)
 80004ac:	2300      	movs	r3, #0
 80004ae:	75fb      	strb	r3, [r7, #23]
 80004b0:	e007      	b.n	80004c2 <CAN_voidGetRxMsg+0xbe>
		{/*clear buff*/
			Local_u8Data[i] = 0;
 80004b2:	7dfb      	ldrb	r3, [r7, #23]
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	4413      	add	r3, r2
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
		for(u8 i=0 ; i < 8 ; i++)
 80004bc:	7dfb      	ldrb	r3, [r7, #23]
 80004be:	3301      	adds	r3, #1
 80004c0:	75fb      	strb	r3, [r7, #23]
 80004c2:	7dfb      	ldrb	r3, [r7, #23]
 80004c4:	2b07      	cmp	r3, #7
 80004c6:	d9f4      	bls.n	80004b2 <CAN_voidGetRxMsg+0xae>
		}
		for(u8 i=0 ; i < pRxHeader->DLC ; i++)
 80004c8:	2300      	movs	r3, #0
 80004ca:	75bb      	strb	r3, [r7, #22]
 80004cc:	e027      	b.n	800051e <CAN_voidGetRxMsg+0x11a>
		{
			if (i<4)
 80004ce:	7dbb      	ldrb	r3, [r7, #22]
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d810      	bhi.n	80004f6 <CAN_voidGetRxMsg+0xf2>
				Local_u8Data[i] = (u8)((CAN->FIFOMailBox[local_u8RxFifo].RDLR >>(i*8) ) & 0XFF);
 80004d4:	4a1f      	ldr	r2, [pc, #124]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	011b      	lsls	r3, r3, #4
 80004da:	4413      	add	r3, r2
 80004dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	7dbb      	ldrb	r3, [r7, #22]
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	fa22 f103 	lsr.w	r1, r2, r3
 80004ea:	7dbb      	ldrb	r3, [r7, #22]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4413      	add	r3, r2
 80004f0:	b2ca      	uxtb	r2, r1
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	e010      	b.n	8000518 <CAN_voidGetRxMsg+0x114>
			else
				Local_u8Data[i] = (u8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR 	>>((i-4)*8)  ) & 0XFF);
 80004f6:	4a17      	ldr	r2, [pc, #92]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	4413      	add	r3, r2
 80004fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	7dbb      	ldrb	r3, [r7, #22]
 8000506:	3b04      	subs	r3, #4
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	fa22 f103 	lsr.w	r1, r2, r3
 800050e:	7dbb      	ldrb	r3, [r7, #22]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	4413      	add	r3, r2
 8000514:	b2ca      	uxtb	r2, r1
 8000516:	701a      	strb	r2, [r3, #0]
		for(u8 i=0 ; i < pRxHeader->DLC ; i++)
 8000518:	7dbb      	ldrb	r3, [r7, #22]
 800051a:	3301      	adds	r3, #1
 800051c:	75bb      	strb	r3, [r7, #22]
 800051e:	7dba      	ldrb	r2, [r7, #22]
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	691b      	ldr	r3, [r3, #16]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3d2      	bcc.n	80004ce <CAN_voidGetRxMsg+0xca>
		}
		
		#endif
    /* Release the FIFO */
    if (local_u8RxFifo == CAN_RX_FIFO0)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d106      	bne.n	800053c <CAN_voidGetRxMsg+0x138>
    {
      /* Release RX FIFO 0 */
      SET_BIT(CAN->RF0R, 5);
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 8000534:	f043 0320 	orr.w	r3, r3, #32
 8000538:	60d3      	str	r3, [r2, #12]
    else
    {
      /* Release RX FIFO 1 */
      SET_BIT(CAN->RF1R, 5);
    }
}
 800053a:	e005      	b.n	8000548 <CAN_voidGetRxMsg+0x144>
      SET_BIT(CAN->RF1R, 5);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 800053e:	691b      	ldr	r3, [r3, #16]
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <CAN_voidGetRxMsg+0x150>)
 8000542:	f043 0320 	orr.w	r3, r3, #32
 8000546:	6113      	str	r3, [r2, #16]
}
 8000548:	bf00      	nop
 800054a:	371c      	adds	r7, #28
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40006400 	.word	0x40006400

08000558 <CAN_voidRXPending>:
/** CAN RX Pending **/
u8 CAN_voidRXPending(u8 local_u8RxFifo)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	/* return the Rx FIFO  message pending */
	if (local_u8RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d106      	bne.n	8000576 <CAN_voidRXPending+0x1e>
	{
		/* return value of the Rx FIFO 0  */
	 return (CAN->RF0R & 0X3);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <CAN_voidRXPending+0x34>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	f003 0303 	and.w	r3, r3, #3
 8000572:	b2db      	uxtb	r3, r3
 8000574:	e005      	b.n	8000582 <CAN_voidRXPending+0x2a>

	}
	else /* Rx element is assigned to Rx FIFO 1 */
	{
		/* return value of the Rx FIFO 1  */
		return (CAN->RF1R & 0X3);
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <CAN_voidRXPending+0x34>)
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	f003 0303 	and.w	r3, r3, #3
 8000580:	b2db      	uxtb	r3, r3
	}
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	40006400 	.word	0x40006400

08000590 <CAN_voidConfigFilter>:
/** CAN CONFIG filter **/
void CAN_voidConfigFilter( CAN_FilterTypeDef *pFilterConfig)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	/* Initialization mode for the filter */
	SET_BIT(CAN->FMR, 0);
 8000598:	4b64      	ldr	r3, [pc, #400]	; (800072c <CAN_voidConfigFilter+0x19c>)
 800059a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800059e:	4a63      	ldr	r2, [pc, #396]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	/* Convert filter number into bit position */
	u32 local_u32FilterBitPos = pFilterConfig->FilterBank ;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	60fb      	str	r3, [r7, #12]

	/* Filter Deactivation */
	CLR_BIT(CAN->FA1R, pFilterConfig->FilterBank);
 80005ae:	4b5f      	ldr	r3, [pc, #380]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80005b0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	6952      	ldr	r2, [r2, #20]
 80005b8:	2101      	movs	r1, #1
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	43d2      	mvns	r2, r2
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a5a      	ldr	r2, [pc, #360]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80005c4:	400b      	ands	r3, r1
 80005c6:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/* Filter Scale */
	if (pFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d128      	bne.n	8000624 <CAN_voidConfigFilter+0x94>
	{
	  /* 16-bit scale for the filter */
	  CLR_BIT(CAN->FS1R, local_u32FilterBitPos);
 80005d2:	4b56      	ldr	r3, [pc, #344]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80005d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80005d8:	2101      	movs	r1, #1
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	43d2      	mvns	r2, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a51      	ldr	r2, [pc, #324]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80005e6:	400b      	ands	r3, r1
 80005e8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	     * */

	  /* First 16-bit identifier and First 16-bit mask */
	  /* Or First 16-bit identifier and Second 16-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
			  	  	  	  	  	  	  ((pFilterConfig->FilterMaskIdLow & 0x0000FFFF) << 16) |
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	0419      	lsls	r1, r3, #16
									  (pFilterConfig->FilterIdLow	   & 0x0000FFFF) );
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 80005f8:	484c      	ldr	r0, [pc, #304]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	695b      	ldr	r3, [r3, #20]
			  	  	  	  	  	  	  ((pFilterConfig->FilterMaskIdLow & 0x0000FFFF) << 16) |
 80005fe:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8000600:	3348      	adds	r3, #72	; 0x48
 8000602:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

	  /* Second 16-bit identifier and Second 16-bit mask */
	  /* Or Third 16-bit identifier and Fourth 16-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
			  	  	  	  	  	  	  	  	  	 ((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	0419      	lsls	r1, r3, #16
			  									  (pFilterConfig->FilterIdHigh 	   & 0x0000FFFF) );
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8000612:	4846      	ldr	r0, [pc, #280]	; (800072c <CAN_voidConfigFilter+0x19c>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	695b      	ldr	r3, [r3, #20]
			  	  	  	  	  	  	  	  	  	 ((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000618:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 800061a:	3348      	adds	r3, #72	; 0x48
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	4403      	add	r3, r0
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	e02a      	b.n	800067a <CAN_voidConfigFilter+0xea>
	}

	else if (pFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d126      	bne.n	800067a <CAN_voidConfigFilter+0xea>
	{
	  /* 32-bit scale for the filter */
	  SET_BIT(CAN->FS1R, local_u32FilterBitPos);
 800062c:	4b3f      	ldr	r3, [pc, #252]	; (800072c <CAN_voidConfigFilter+0x19c>)
 800062e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000632:	2101      	movs	r1, #1
 8000634:	68fa      	ldr	r2, [r7, #12]
 8000636:	fa01 f202 	lsl.w	r2, r1, r2
 800063a:	4611      	mov	r1, r2
 800063c:	4a3b      	ldr	r2, [pc, #236]	; (800072c <CAN_voidConfigFilter+0x19c>)
 800063e:	430b      	orrs	r3, r1
 8000640:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		 * STID[10:3] STID[2:0] EXID[17:13] EXID[12:5] EXID[4:0] IDE RTR 0
		 * */

	  /* 32-bit identifier or First 32-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
											((pFilterConfig->FilterIdHigh & 0x0000FFFF) << 16) |
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	0419      	lsls	r1, r3, #16
											 (pFilterConfig->FilterIdLow  & 0x0000FFFF));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8000650:	4836      	ldr	r0, [pc, #216]	; (800072c <CAN_voidConfigFilter+0x19c>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	695b      	ldr	r3, [r3, #20]
											((pFilterConfig->FilterIdHigh & 0x0000FFFF) << 16) |
 8000656:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8000658:	3348      	adds	r3, #72	; 0x48
 800065a:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

	  /* 32-bit mask or Second 32-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
												((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	0419      	lsls	r1, r3, #16
												 (pFilterConfig->FilterMaskIdLow & 0x0000FFFF));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 800066a:	4830      	ldr	r0, [pc, #192]	; (800072c <CAN_voidConfigFilter+0x19c>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	695b      	ldr	r3, [r3, #20]
												((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000670:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8000672:	3348      	adds	r3, #72	; 0x48
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4403      	add	r3, r0
 8000678:	605a      	str	r2, [r3, #4]
	}

	/* Filter Mode */
	if (pFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10d      	bne.n	800069e <CAN_voidConfigFilter+0x10e>
	{
	  /* Id/Mask mode for the filter*/
	  CLR_BIT(CAN->FM1R, local_u32FilterBitPos);
 8000682:	4b2a      	ldr	r3, [pc, #168]	; (800072c <CAN_voidConfigFilter+0x19c>)
 8000684:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000688:	2101      	movs	r1, #1
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	43d2      	mvns	r2, r2
 8000692:	4611      	mov	r1, r2
 8000694:	4a25      	ldr	r2, [pc, #148]	; (800072c <CAN_voidConfigFilter+0x19c>)
 8000696:	400b      	ands	r3, r1
 8000698:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 800069c:	e00b      	b.n	80006b6 <CAN_voidConfigFilter+0x126>
	}
	else
	{
	  /* Identifier list mode for the filter*/
	  SET_BIT(CAN->FM1R, local_u32FilterBitPos);
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80006a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006a4:	2101      	movs	r1, #1
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ac:	4611      	mov	r1, r2
 80006ae:	4a1f      	ldr	r2, [pc, #124]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80006b0:	430b      	orrs	r3, r1
 80006b2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	/* Filter FIFO assignment */
	if (pFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10d      	bne.n	80006da <CAN_voidConfigFilter+0x14a>
	{
	  /* FIFO 0 assignation for the filter */
	  CLR_BIT(CAN->FFA1R, local_u32FilterBitPos);
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80006c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80006c4:	2101      	movs	r1, #1
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	fa01 f202 	lsl.w	r2, r1, r2
 80006cc:	43d2      	mvns	r2, r2
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80006d2:	400b      	ands	r3, r1
 80006d4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80006d8:	e00b      	b.n	80006f2 <CAN_voidConfigFilter+0x162>
	}
	else
	{
	  /* FIFO 1 assignation for the filter */
	  SET_BIT(CAN->FFA1R, local_u32FilterBitPos);
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80006dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80006e0:	2101      	movs	r1, #1
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	}

	/* Filter activation */
	if (pFilterConfig->FilterActivation == ENABLE)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6a1b      	ldr	r3, [r3, #32]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d10b      	bne.n	8000712 <CAN_voidConfigFilter+0x182>
	{
	  SET_BIT(CAN->FA1R, local_u32FilterBitPos);
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <CAN_voidConfigFilter+0x19c>)
 80006fc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000700:	2101      	movs	r1, #1
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	fa01 f202 	lsl.w	r2, r1, r2
 8000708:	4611      	mov	r1, r2
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <CAN_voidConfigFilter+0x19c>)
 800070c:	430b      	orrs	r3, r1
 800070e:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}

	/* Leave the initialisation mode for the filter */
	CLR_BIT(CAN->FMR, 0);
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <CAN_voidConfigFilter+0x19c>)
 8000714:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <CAN_voidConfigFilter+0x19c>)
 800071a:	f023 0301 	bic.w	r3, r3, #1
 800071e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40006400 	.word	0x40006400

08000730 <CAN_voidGetErrorCode>:

u32 CAN_voidGetErrorCode(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
	u8 ERROR=(u8)((CAN->ESR&0x70)>>4);
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <CAN_voidGetErrorCode+0x20>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	091b      	lsrs	r3, r3, #4
 800073c:	b2db      	uxtb	r3, r3
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	71fb      	strb	r3, [r7, #7]
	return ERROR;
 8000744:	79fb      	ldrb	r3, [r7, #7]
}
 8000746:	4618      	mov	r0, r3
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40006400 	.word	0x40006400

08000754 <CAN_voidEnableInterrupt>:
//	NVIC_voidDisableInterrupt(IRQn);
//	NVIC_voidClearPendingFlag(IRQn);
//}

void CAN_voidEnableInterrupt(u32 local_u32ActiveITs)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	CAN->IER |= local_u32ActiveITs;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <CAN_voidEnableInterrupt+0x20>)
 800075e:	695a      	ldr	r2, [r3, #20]
 8000760:	4904      	ldr	r1, [pc, #16]	; (8000774 <CAN_voidEnableInterrupt+0x20>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4313      	orrs	r3, r2
 8000766:	614b      	str	r3, [r1, #20]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40006400 	.word	0x40006400

08000778 <CAN_voidTX_Interrupt_Handler>:
==============================================================================
*/

/*************************** 	CAN TX Interrupt Handler	 *********************/
void CAN_voidTX_Interrupt_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	 CAN_ErrorCode  = CAN_ERROR_NONE;
 800077e:	4b50      	ldr	r3, [pc, #320]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
	u32 tsrflags  = CAN->TSR;
 8000784:	4b4f      	ldr	r3, [pc, #316]	; (80008c4 <CAN_voidTX_Interrupt_Handler+0x14c>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	603b      	str	r3, [r7, #0]

	/* Transmit Mailbox [0:2] management *****************************************/
	for (u8 local_u8TxBitPos = 0 ; local_u8TxBitPos <= 16 ; local_u8TxBitPos += 8 ) // local_u8TxBitPos refer to Position of RQCPx bit in TSR Register
 800078a:	2300      	movs	r3, #0
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	e088      	b.n	80008a2 <CAN_voidTX_Interrupt_Handler+0x12a>
	{
		if (GET_BIT(tsrflags, (local_u8TxBitPos)) != 0) /* RQCP: Request completed mailbox [0:2] */
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	fa22 f303 	lsr.w	r3, r2, r3
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b00      	cmp	r3, #0
 800079e:	d07d      	beq.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
		{
		  /* Clear the Transmission Complete flag (and TXOK,ALST,TERR0 bits) */
		  SET_BIT(CAN->TSR, local_u8TxBitPos);     /* RQCP: Request completed mailbox [0:2] */
 80007a0:	4b48      	ldr	r3, [pc, #288]	; (80008c4 <CAN_voidTX_Interrupt_Handler+0x14c>)
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	79fa      	ldrb	r2, [r7, #7]
 80007a6:	2101      	movs	r1, #1
 80007a8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ac:	4611      	mov	r1, r2
 80007ae:	4a45      	ldr	r2, [pc, #276]	; (80008c4 <CAN_voidTX_Interrupt_Handler+0x14c>)
 80007b0:	430b      	orrs	r3, r1
 80007b2:	6093      	str	r3, [r2, #8]

		  if (GET_BIT(tsrflags, (local_u8TxBitPos + 1)) != 0) /* TXOK: Transmission OK of mailbox [0:2] */
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	3301      	adds	r3, #1
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	fa22 f303 	lsr.w	r3, r2, r3
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d008      	beq.n	80007d8 <CAN_voidTX_Interrupt_Handler+0x60>
		  {
			/* Transmission Mailbox complete callback */

			/* Call weak (surcharged) callback */
			CAN_TxMailboxCompleteCallback[local_u8TxBitPos/8]();
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	08db      	lsrs	r3, r3, #3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <CAN_voidTX_Interrupt_Handler+0x150>)
 80007d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d4:	4798      	blx	r3
 80007d6:	e061      	b.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
		  }
		  else
		  {
			if (GET_BIT(tsrflags, (local_u8TxBitPos + 2)) != 0) /* ALST: Arbitration lost for mailbox [0:2] */
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	3302      	adds	r3, #2
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	fa22 f303 	lsr.w	r3, r2, r3
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d020      	beq.n	800082c <CAN_voidTX_Interrupt_Handler+0xb4>
			{
			  /* Update error code */
				switch (local_u8TxBitPos/8)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d014      	beq.n	800081e <CAN_voidTX_Interrupt_Handler+0xa6>
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	dc51      	bgt.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <CAN_voidTX_Interrupt_Handler+0x8a>
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d007      	beq.n	8000810 <CAN_voidTX_Interrupt_Handler+0x98>
 8000800:	e04c      	b.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
				{
				case 0 :
					CAN_ErrorCode |= CAN_ERROR_TX_ALST0; break;
 8000802:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800080a:	4a2d      	ldr	r2, [pc, #180]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	e045      	b.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
				case 1 :
					CAN_ErrorCode |= CAN_ERROR_TX_ALST1; break;
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	e03e      	b.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
				case 2 :
					CAN_ErrorCode |= CAN_ERROR_TX_ALST2; break;
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000826:	4a26      	ldr	r2, [pc, #152]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 8000828:	6013      	str	r3, [r2, #0]
 800082a:	e037      	b.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
				}
			}
			else if (GET_BIT(tsrflags, (local_u8TxBitPos + 3)) != 0) /* TERR: Transmission error of mailbox [0:2] */
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	3303      	adds	r3, #3
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	fa22 f303 	lsr.w	r3, r2, r3
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	2b00      	cmp	r3, #0
 800083c:	d026      	beq.n	800088c <CAN_voidTX_Interrupt_Handler+0x114>
			{
			  /* Update error code */
			  CAN_ErrorCode |= CAN_ERROR_TX_TERR0;
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 8000848:	6013      	str	r3, [r2, #0]
			  switch (local_u8TxBitPos/8)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	08db      	lsrs	r3, r3, #3
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b02      	cmp	r3, #2
 8000852:	d014      	beq.n	800087e <CAN_voidTX_Interrupt_Handler+0x106>
 8000854:	2b02      	cmp	r3, #2
 8000856:	dc21      	bgt.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <CAN_voidTX_Interrupt_Handler+0xea>
 800085c:	2b01      	cmp	r3, #1
 800085e:	d007      	beq.n	8000870 <CAN_voidTX_Interrupt_Handler+0xf8>
 8000860:	e01c      	b.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
			{
			case 0 :
				CAN_ErrorCode |= CAN_ERROR_TX_TERR0; break;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800086a:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	e015      	b.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
			case 1 :
				CAN_ErrorCode |= CAN_ERROR_TX_TERR1; break;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	e00e      	b.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
			case 2 :
				CAN_ErrorCode |= CAN_ERROR_TX_TERR2; break;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e007      	b.n	800089c <CAN_voidTX_Interrupt_Handler+0x124>
			else /* ABRQ: Abort request for mailbox [0:2] */
			{
			  /* Transmission Mailbox  abort callback */

			  /* Call weak (surcharged) callback */
			  CAN_TxMailboxAbortCallback[local_u8TxBitPos/8]();
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <CAN_voidTX_Interrupt_Handler+0x154>)
 8000896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089a:	4798      	blx	r3
	for (u8 local_u8TxBitPos = 0 ; local_u8TxBitPos <= 16 ; local_u8TxBitPos += 8 ) // local_u8TxBitPos refer to Position of RQCPx bit in TSR Register
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	3308      	adds	r3, #8
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b10      	cmp	r3, #16
 80008a6:	f67f af73 	bls.w	8000790 <CAN_voidTX_Interrupt_Handler+0x18>
			}
		  }
		}
	}
	/* Call the Error call Back in case of Errors */
	if (CAN_ErrorCode != CAN_ERROR_NONE)
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <CAN_voidTX_Interrupt_Handler+0x148>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <CAN_voidTX_Interrupt_Handler+0x13e>
	{
		/* Call Error callback function */
		CAN_ErrorCallback();
 80008b2:	f000 fa43 	bl	8000d3c <CAN_ErrorCallback>
	}
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200001c8 	.word	0x200001c8
 80008c4:	40006400 	.word	0x40006400
 80008c8:	2000000c 	.word	0x2000000c
 80008cc:	20000018 	.word	0x20000018

080008d0 <CAN_voidRX_FIFO0_Interrupt_Handler>:

/*************************  CAN RX FIFO 0 Interrupt Handler *****************************/
void CAN_voidRX_FIFO0_Interrupt_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
	u32 CAN_ErrorCode  = CAN_ERROR_NONE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
	u32 interrupts = CAN->IER;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <CAN_voidRX_FIFO0_Interrupt_Handler+0x90>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	60bb      	str	r3, [r7, #8]
	u32 rf0rflags = CAN->RF0R;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <CAN_voidRX_FIFO0_Interrupt_Handler+0x90>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	607b      	str	r3, [r7, #4]
	/* Receive FIFO 0 overrun interrupt management *****************************/
	if (GET_BIT(interrupts,3) != 0) /* FOVIE0: FIFO overrun interrupt enable */
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <CAN_voidRX_FIFO0_Interrupt_Handler+0x3e>
	{
		if (GET_BIT(rf0rflags,4) != 0) /* FOVR0: FIFO 0 overrun */
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d009      	beq.n	800090e <CAN_voidRX_FIFO0_Interrupt_Handler+0x3e>
		{
		  /* Set CAN error code to Rx Fifo 0 overrun error */
		  CAN_ErrorCode |= CAN_ERROR_RX_FOV0;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000900:	60fb      	str	r3, [r7, #12]

		  /* Clear FIFO0 Overrun Flag */
		  SET_BIT(CAN->RF0R, 4);
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <CAN_voidRX_FIFO0_Interrupt_Handler+0x90>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <CAN_voidRX_FIFO0_Interrupt_Handler+0x90>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	60d3      	str	r3, [r2, #12]
		}
	}

	/* Receive FIFO 0 full interrupt management ********************************/
	if (GET_BIT(interrupts,2) != 0) /* FFIE0: FIFO full interrupt enable */
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00c      	beq.n	8000932 <CAN_voidRX_FIFO0_Interrupt_Handler+0x62>
	{
		if (GET_BIT(rf0rflags,3) != 0) /* FULL0: FIFO 0 full */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	2b00      	cmp	r3, #0
 8000920:	d007      	beq.n	8000932 <CAN_voidRX_FIFO0_Interrupt_Handler+0x62>
		{
		  /* Clear FIFO 0 full Flag */
			SET_BIT(CAN->RF0R, 3);
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <CAN_voidRX_FIFO0_Interrupt_Handler+0x90>)
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <CAN_voidRX_FIFO0_Interrupt_Handler+0x90>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	60d3      	str	r3, [r2, #12]

		  /* Receive FIFO 0 full Callback */
		  /* Call weak (surcharged) callback */
		  CAN_RxFifo0FullCallback();
 800092e:	f000 f957 	bl	8000be0 <CAN_RxFifo0FullCallback>
		}
	}

	/* Receive FIFO 0 message pending interrupt management *********************/
	if (GET_BIT(interrupts,1) != 0) /* FMPIE0: FIFO message pending interrupt enable */
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	2b00      	cmp	r3, #0
 800093a:	d007      	beq.n	800094c <CAN_voidRX_FIFO0_Interrupt_Handler+0x7c>
	{
		/* Check if message is still pending */
		if ((CAN->RF0R & 0x3) != 0) /* FMP0[1:0]: FIFO 0 message pending */
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <CAN_voidRX_FIFO0_Interrupt_Handler+0x90>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	f003 0303 	and.w	r3, r3, #3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <CAN_voidRX_FIFO0_Interrupt_Handler+0x7c>
		{
		  /* Receive FIFO 0 mesage pending Callback */
		  /* Call weak (surcharged) callback */
		  CAN_RxFifo0MsgPendingCallback();
 8000948:	f000 f9ec 	bl	8000d24 <CAN_RxFifo0MsgPendingCallback>
		}
	}
	/* Call the Error call Back in case of Errors */
	if (CAN_ErrorCode != CAN_ERROR_NONE)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <CAN_voidRX_FIFO0_Interrupt_Handler+0x86>
	{
		/* Call Error callback function */
		CAN_ErrorCallback();
 8000952:	f000 f9f3 	bl	8000d3c <CAN_ErrorCallback>
	}
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40006400 	.word	0x40006400

08000964 <CAN_voidRX_FIFO1_Interrupt_Handler>:

/*************************  CAN RX FIFO 1 Interrupt Handler *****************************/
void CAN_voidRX_FIFO1_Interrupt_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
	  u32 CAN_ErrorCode  = CAN_ERROR_NONE;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
	  u32 interrupts = CAN->IER;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <CAN_voidRX_FIFO1_Interrupt_Handler+0x90>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	60bb      	str	r3, [r7, #8]
	  u32 rf1rflags = CAN->RF1R;
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <CAN_voidRX_FIFO1_Interrupt_Handler+0x90>)
 8000976:	691b      	ldr	r3, [r3, #16]
 8000978:	607b      	str	r3, [r7, #4]
	  /* Receive FIFO 1 overrun interrupt management *****************************/
	  if (GET_BIT(interrupts,6) != 0) /* FOVIE1: FIFO overrun interrupt enable */
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00e      	beq.n	80009a2 <CAN_voidRX_FIFO1_Interrupt_Handler+0x3e>
	  {
		if (GET_BIT(rf1rflags,4) != 0) /* FOVR1: FIFO 1 overrun */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	2b00      	cmp	r3, #0
 800098c:	d009      	beq.n	80009a2 <CAN_voidRX_FIFO1_Interrupt_Handler+0x3e>
		{
		  /* Set CAN error code to Rx Fifo 1 overrun error */
		  CAN_ErrorCode |= CAN_ERROR_RX_FOV1;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000994:	60fb      	str	r3, [r7, #12]

		  /* Clear FIFO1 Overrun Flag */
		  SET_BIT(CAN->RF1R, 4);
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <CAN_voidRX_FIFO1_Interrupt_Handler+0x90>)
 8000998:	691b      	ldr	r3, [r3, #16]
 800099a:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <CAN_voidRX_FIFO1_Interrupt_Handler+0x90>)
 800099c:	f043 0310 	orr.w	r3, r3, #16
 80009a0:	6113      	str	r3, [r2, #16]
		}
	  }

	  /* Receive FIFO 1 full interrupt management ********************************/
	  if (GET_BIT(interrupts,5) != 0) /* FFIE1: FIFO full interrupt enable */
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	f003 0320 	and.w	r3, r3, #32
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d00c      	beq.n	80009c6 <CAN_voidRX_FIFO1_Interrupt_Handler+0x62>
	  {
		if (GET_BIT(rf1rflags,3) != 0) /* FULL1: FIFO 1 full */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d007      	beq.n	80009c6 <CAN_voidRX_FIFO1_Interrupt_Handler+0x62>
		{
		  /* Clear FIFO 1 full Flag */
			SET_BIT(CAN->RF1R, 3);
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <CAN_voidRX_FIFO1_Interrupt_Handler+0x90>)
 80009b8:	691b      	ldr	r3, [r3, #16]
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <CAN_voidRX_FIFO1_Interrupt_Handler+0x90>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6113      	str	r3, [r2, #16]

		  /* Receive FIFO 1 full Callback */
		  /* Call weak (surcharged) callback */
		  CAN_RxFifo1FullCallback();
 80009c2:	f000 f919 	bl	8000bf8 <CAN_RxFifo1FullCallback>
		}
	  }

	  /* Receive FIFO 1 message pending interrupt management *********************/
	if (GET_BIT(interrupts,4) != 0) /* FMPIE1: FIFO message pending interrupt enable */
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d007      	beq.n	80009e0 <CAN_voidRX_FIFO1_Interrupt_Handler+0x7c>
	{
		/* Check if message is still pending */
		if ((CAN->RF1R & 0x3) != 0) /* FMP1[1:0]: FIFO 0 message pending */
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <CAN_voidRX_FIFO1_Interrupt_Handler+0x90>)
 80009d2:	691b      	ldr	r3, [r3, #16]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <CAN_voidRX_FIFO1_Interrupt_Handler+0x7c>
		{
		  /* Receive FIFO 1 mesage pending Callback */
		  /* Call weak (surcharged) callback */
		  CAN_RxFifo1MsgPendingCallback();
 80009dc:	f000 f906 	bl	8000bec <CAN_RxFifo1MsgPendingCallback>
		}
	}
	  /* Call the Error call Back in case of Errors */
	if (CAN_ErrorCode != CAN_ERROR_NONE)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <CAN_voidRX_FIFO1_Interrupt_Handler+0x86>
	{
		/* Call Error callback function */
		CAN_ErrorCallback();
 80009e6:	f000 f9a9 	bl	8000d3c <CAN_ErrorCallback>
	}
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40006400 	.word	0x40006400

080009f8 <CAN_voidSCE_Interrupt_Handler>:


/*************************** CAN SCE (Status Change Error) Interrupt Handler *********************/
void CAN_voidSCE_Interrupt_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
	  CAN_ErrorCode  = CAN_ERROR_NONE;
 80009fe:	4b67      	ldr	r3, [pc, #412]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
	  u32 interrupts = CAN->IER;
 8000a04:	4b66      	ldr	r3, [pc, #408]	; (8000ba0 <CAN_voidSCE_Interrupt_Handler+0x1a8>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	60fb      	str	r3, [r7, #12]
	  u32 msrflags  = CAN->MSR;
 8000a0a:	4b65      	ldr	r3, [pc, #404]	; (8000ba0 <CAN_voidSCE_Interrupt_Handler+0x1a8>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	60bb      	str	r3, [r7, #8]
	  u32 esrflags = CAN->ESR;
 8000a10:	4b63      	ldr	r3, [pc, #396]	; (8000ba0 <CAN_voidSCE_Interrupt_Handler+0x1a8>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	607b      	str	r3, [r7, #4]


	  /* Sleep interrupt management *********************************************/
	  if (GET_BIT(interrupts,17) != 0) /* SLKIE: Sleep interrupt enable */
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00c      	beq.n	8000a3a <CAN_voidSCE_Interrupt_Handler+0x42>
	  {
	    if (GET_BIT(msrflags,4) != 0) /* SLAKI: Sleep acknowledge interrupt */
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d007      	beq.n	8000a3a <CAN_voidSCE_Interrupt_Handler+0x42>
	    {
	      /* Clear Sleep interrupt Flag */
	      SET_BIT(CAN->MSR, 4); /* SLAKI: Sleep acknowledge interrupt */
 8000a2a:	4b5d      	ldr	r3, [pc, #372]	; (8000ba0 <CAN_voidSCE_Interrupt_Handler+0x1a8>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	4a5c      	ldr	r2, [pc, #368]	; (8000ba0 <CAN_voidSCE_Interrupt_Handler+0x1a8>)
 8000a30:	f043 0310 	orr.w	r3, r3, #16
 8000a34:	6053      	str	r3, [r2, #4]

	      /* Sleep Callback */
	      CAN_SleepCallback();
 8000a36:	f000 f8e5 	bl	8000c04 <CAN_SleepCallback>
	    }
	  }

	  /* WakeUp interrupt management *********************************************/
	  if (GET_BIT(interrupts,16) != 0) /* WKUIE: Wakeup interrupt enable */
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00c      	beq.n	8000a5e <CAN_voidSCE_Interrupt_Handler+0x66>
	  {
	    if (GET_BIT(msrflags,3) != 0) /* WKUI: Wakeup interrupt */
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d007      	beq.n	8000a5e <CAN_voidSCE_Interrupt_Handler+0x66>
	    {
	      /* Clear WakeUp Flag */
	    	SET_BIT(CAN->MSR, 3); /* WKUI: Wakeup interrupt */
 8000a4e:	4b54      	ldr	r3, [pc, #336]	; (8000ba0 <CAN_voidSCE_Interrupt_Handler+0x1a8>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	4a53      	ldr	r2, [pc, #332]	; (8000ba0 <CAN_voidSCE_Interrupt_Handler+0x1a8>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6053      	str	r3, [r2, #4]

	      /* WakeUp Callback */
	      CAN_WakeUpFromRxMsgCallback();
 8000a5a:	f000 f8d9 	bl	8000c10 <CAN_WakeUpFromRxMsgCallback>
	    }
	  }

	  /* Error interrupts management *********************************************/
	  if (GET_BIT(interrupts,15) != 0) /* ERRIE: Error interrupt enable */
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f000 808e 	beq.w	8000b86 <CAN_voidSCE_Interrupt_Handler+0x18e>
	  {
	    if (GET_BIT(msrflags,2) != 0) /* ERRI: Error interrupt */
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f000 8082 	beq.w	8000b7a <CAN_voidSCE_Interrupt_Handler+0x182>
	    {
	      /* Check Error Warning Flag */
	      if ((GET_BIT(interrupts,8) != 0) && /* EWGIE: Error warning interrupt enable*/
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00a      	beq.n	8000a96 <CAN_voidSCE_Interrupt_Handler+0x9e>
	          (GET_BIT(esrflags,0) != 0)) /* EWGF: Error warning flag */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0301 	and.w	r3, r3, #1
	      if ((GET_BIT(interrupts,8) != 0) && /* EWGIE: Error warning interrupt enable*/
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d005      	beq.n	8000a96 <CAN_voidSCE_Interrupt_Handler+0x9e>
	      {
	        /* Set CAN error code to Error Warning */
	        CAN_ErrorCode |= CAN_ERROR_EWG;
 8000a8a:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	4a42      	ldr	r2, [pc, #264]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000a94:	6013      	str	r3, [r2, #0]

	        /* No need for clear of Error Warning Flag as read-only */
	      }

	      /* Check Error Passive Flag */
	      if ((GET_BIT(interrupts,9) != 0) && /* EPVIE: Error passive interrupt enable*/
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d00a      	beq.n	8000ab6 <CAN_voidSCE_Interrupt_Handler+0xbe>
	          (GET_BIT(esrflags,1) != 0)) /* EPVF: Error passive flag */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0302 	and.w	r3, r3, #2
	      if ((GET_BIT(interrupts,9) != 0) && /* EPVIE: Error passive interrupt enable*/
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d005      	beq.n	8000ab6 <CAN_voidSCE_Interrupt_Handler+0xbe>
	      {
	        /* Set CAN error code to Error Passive */
	        CAN_ErrorCode |= CAN_ERROR_EPV;
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	4a3a      	ldr	r2, [pc, #232]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000ab4:	6013      	str	r3, [r2, #0]

	        /* No need for clear of Error Passive Flag as read-only */
	      }

	      /* Check Bus-off Flag */
	      if ((GET_BIT(interrupts,10) != 0) && /* BOFIE: Bus-off interrupt enable */
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00a      	beq.n	8000ad6 <CAN_voidSCE_Interrupt_Handler+0xde>
	          (GET_BIT(esrflags,2) != 0)) /* BOFF: Bus-off flag */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0304 	and.w	r3, r3, #4
	      if ((GET_BIT(interrupts,10) != 0) && /* BOFIE: Bus-off interrupt enable */
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d005      	beq.n	8000ad6 <CAN_voidSCE_Interrupt_Handler+0xde>
	      {
	        /* Set CAN error code to Bus-Off */
	        CAN_ErrorCode |= CAN_ERROR_BOF;
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	4a32      	ldr	r2, [pc, #200]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000ad4:	6013      	str	r3, [r2, #0]

	        /* No need for clear of Error Bus-Off as read-only */
	      }

	      /* Check Last Error Code Flag */
	      if ((GET_BIT(interrupts,11) != 0) && /* LECIE: Last error code interrupt enable */
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d04c      	beq.n	8000b7a <CAN_voidSCE_Interrupt_Handler+0x182>
	          (((esrflags >> 4) & 0x7) != 0)) /* LEC[2:0]: Last error code */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	091b      	lsrs	r3, r3, #4
 8000ae4:	f003 0307 	and.w	r3, r3, #7
	      if ((GET_BIT(interrupts,11) != 0) && /* LECIE: Last error code interrupt enable */
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d046      	beq.n	8000b7a <CAN_voidSCE_Interrupt_Handler+0x182>
	      {
	        switch ((esrflags >> 4) & 0x7)  // 7=0b111 /* LEC[2:0]: Last error code */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	091b      	lsrs	r3, r3, #4
 8000af0:	f003 0307 	and.w	r3, r3, #7
 8000af4:	3b01      	subs	r3, #1
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	d838      	bhi.n	8000b6c <CAN_voidSCE_Interrupt_Handler+0x174>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <CAN_voidSCE_Interrupt_Handler+0x108>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b19 	.word	0x08000b19
 8000b04:	08000b27 	.word	0x08000b27
 8000b08:	08000b35 	.word	0x08000b35
 8000b0c:	08000b43 	.word	0x08000b43
 8000b10:	08000b51 	.word	0x08000b51
 8000b14:	08000b5f 	.word	0x08000b5f
	        {
	          case (0x1):
	            /* Set CAN error code to Stuff error */
	            CAN_ErrorCode |= CAN_ERROR_STF;
 8000b18:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b22:	6013      	str	r3, [r2, #0]
	            break;
 8000b24:	e023      	b.n	8000b6e <CAN_voidSCE_Interrupt_Handler+0x176>
	          case (0x2):
	            /* Set CAN error code to Form error */
	            CAN_ErrorCode |= CAN_ERROR_FOR;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f043 0310 	orr.w	r3, r3, #16
 8000b2e:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b30:	6013      	str	r3, [r2, #0]
	            break;
 8000b32:	e01c      	b.n	8000b6e <CAN_voidSCE_Interrupt_Handler+0x176>
	          case (0x3):
	            /* Set CAN error code to Acknowledgement error */
	            CAN_ErrorCode |= CAN_ERROR_ACK;
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f043 0320 	orr.w	r3, r3, #32
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b3e:	6013      	str	r3, [r2, #0]
	            break;
 8000b40:	e015      	b.n	8000b6e <CAN_voidSCE_Interrupt_Handler+0x176>
	          case (0x4):
	            /* Set CAN error code to Bit recessive error */
	            CAN_ErrorCode |= CAN_ERROR_BR;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b4c:	6013      	str	r3, [r2, #0]
	            break;
 8000b4e:	e00e      	b.n	8000b6e <CAN_voidSCE_Interrupt_Handler+0x176>
	          case (0x5):
	            /* Set CAN error code to Bit Dominant error */
	            CAN_ErrorCode |= CAN_ERROR_BD;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b58:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b5a:	6013      	str	r3, [r2, #0]
	            break;
 8000b5c:	e007      	b.n	8000b6e <CAN_voidSCE_Interrupt_Handler+0x176>
	          case (0x6):
	            /* Set CAN error code to CRC error */
	            CAN_ErrorCode |= CAN_ERROR_CRC;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b66:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b68:	6013      	str	r3, [r2, #0]
	            break;
 8000b6a:	e000      	b.n	8000b6e <CAN_voidSCE_Interrupt_Handler+0x176>
	          default:
	            break;
 8000b6c:	bf00      	nop
	        }

	        /* Clear Last error code Flag */
	        CAN->ESR &= ~0x70; /* ERRI: Error interrupt */
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <CAN_voidSCE_Interrupt_Handler+0x1a8>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <CAN_voidSCE_Interrupt_Handler+0x1a8>)
 8000b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b78:	6193      	str	r3, [r2, #24]
	      }
	    }

	    /* Clear ERRI Flag */
	    SET_BIT(CAN->MSR, 2); /* ERRI: Error interrupt */
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <CAN_voidSCE_Interrupt_Handler+0x1a8>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <CAN_voidSCE_Interrupt_Handler+0x1a8>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6053      	str	r3, [r2, #4]
	  }

	  /* Call the Error call Back in case of Errors */
	  if (CAN_ErrorCode != CAN_ERROR_NONE)
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <CAN_voidSCE_Interrupt_Handler+0x1a4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <CAN_voidSCE_Interrupt_Handler+0x19a>
	  {
	    /* Call Error callback function */
	    CAN_ErrorCallback();
 8000b8e:	f000 f8d5 	bl	8000d3c <CAN_ErrorCallback>
	  }
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200001c8 	.word	0x200001c8
 8000ba0:	40006400 	.word	0x40006400

08000ba4 <CAN_TxMailbox1CompleteCallback>:
//{
//
//}

__attribute__((weak)) void CAN_TxMailbox1CompleteCallback()
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <CAN_TxMailbox2CompleteCallback>:
__attribute__((weak)) void CAN_TxMailbox2CompleteCallback()
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <CAN_TxMailbox0AbortCallback>:
__attribute__((weak)) void CAN_TxMailbox0AbortCallback()
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <CAN_TxMailbox1AbortCallback>:
__attribute__((weak)) void CAN_TxMailbox1AbortCallback()
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <CAN_TxMailbox2AbortCallback>:
__attribute__((weak)) void CAN_TxMailbox2AbortCallback()
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <CAN_RxFifo0FullCallback>:
//__attribute__((weak)) void CAN_RxFifo0MsgPendingCallback()
//{
//
//}
__attribute__((weak)) void CAN_RxFifo0FullCallback()
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0


}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <CAN_RxFifo1MsgPendingCallback>:
__attribute__((weak)) void CAN_RxFifo1MsgPendingCallback()
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <CAN_RxFifo1FullCallback>:
__attribute__((weak)) void CAN_RxFifo1FullCallback()
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <CAN_SleepCallback>:
__attribute__((weak)) void CAN_SleepCallback()
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <CAN_WakeUpFromRxMsgCallback>:
__attribute__((weak)) void CAN_WakeUpFromRxMsgCallback()
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <USB_HP_CAN1_TX_IRQHandler>:
 * #######################################################################
 * 						CAN_Interrupt_IRQHandler
 * #######################################################################
 */
void USB_HP_CAN1_TX_IRQHandler(void) /* USB High Priority or CAN1 TX */
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	CAN_voidTX_Interrupt_Handler();
 8000c20:	f7ff fdaa 	bl	8000778 <CAN_voidTX_Interrupt_Handler>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void) /* USB Low  Priority or CAN1 RX0 */
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	CAN_voidRX_FIFO0_Interrupt_Handler();
 8000c2c:	f7ff fe50 	bl	80008d0 <CAN_voidRX_FIFO0_Interrupt_Handler>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void) /* CAN1 RX1 */
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	CAN_voidRX_FIFO1_Interrupt_Handler();
 8000c38:	f7ff fe94 	bl	8000964 <CAN_voidRX_FIFO1_Interrupt_Handler>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void) /* CAN1 SCE */
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	CAN_voidSCE_Interrupt_Handler();
 8000c44:	f7ff fed8 	bl	80009f8 <CAN_voidSCE_Interrupt_Handler>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <CAN_TX>:

void CAN_TX(u8* ARG_pu8BaseAddress, u8 ARG_u8DLCValue,u16 Id )

{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	70fb      	strb	r3, [r7, #3]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	803b      	strh	r3, [r7, #0]
	   //u8* ARG_pu8BaseAddress_encry[ARG_u8DLCValue]={0};
		CAN_TxHeaderTypeDef tx_header;
		tx_header.StdId = Id;
 8000c5c:	883b      	ldrh	r3, [r7, #0]
 8000c5e:	60bb      	str	r3, [r7, #8]
		tx_header.IDE = CAN_ID_STD;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
		tx_header.RTR = CAN_RTR_DATA;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
		/* assign the DLC value */
		tx_header.DLC = ARG_u8DLCValue;
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	61bb      	str	r3, [r7, #24]
		tx_header.TransmitGlobalTime=DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	773b      	strb	r3, [r7, #28]
		//encryption_rc4_encry(ARG_pu8BaseAddress,ARG_u8DLCValue ,key_gen,ARG_pu8BaseAddress);
		CAN_voidAddTxMsg(&tx_header, ARG_pu8BaseAddress);
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fb0a 	bl	8000290 <CAN_voidAddTxMsg>

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <CAN_RX>:
void CAN_RX()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef Rx_header;
    //u8 i=0;

			while((CAN_voidRXPending(CAN_RX_FIFO0) == 0));
 8000c8a:	bf00      	nop
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fc63 	bl	8000558 <CAN_voidRXPending>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f9      	beq.n	8000c8c <CAN_RX+0x8>
//				i++;
//				if(i>10)
//					break;
//				}
			//if(i==0)
			CAN_voidGetRxMsg(CAN_RX_FIFO0,&Rx_header,gDATA);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <CAN_RX+0x30>)
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff fbb0 	bl	8000404 <CAN_voidGetRxMsg>
			//encryption_rc4_decry(gDATA,Rx_header.DLC ,key_gen,gDATA);
			gDATA_Len=Rx_header.DLC;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <CAN_RX+0x34>)
 8000caa:	701a      	strb	r2, [r3, #0]
			//else;
}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200001b8 	.word	0x200001b8
 8000cb8:	200001c0 	.word	0x200001c0

08000cbc <CAN_Interrupt>:

void CAN_Interrupt(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
//	CAN_voidInitInterput(CAN_TX_IRQn);
//	CAN_voidInitInterput(CAN_RX0_IRQn);
//	CAN_voidInitInterput(CAN_RX1_IRQn);
//	CAN_voidInitInterput(CAN_SCE_IRQn);
	MNVIC_voidEnableInterrupt(19);   // can tx enable
 8000cc0:	2013      	movs	r0, #19
 8000cc2:	f000 fb89 	bl	80013d8 <MNVIC_voidEnableInterrupt>
    MNVIC_voidEnableInterrupt(20);   // can rx enable
 8000cc6:	2014      	movs	r0, #20
 8000cc8:	f000 fb86 	bl	80013d8 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(22);   // can error enable
 8000ccc:	2016      	movs	r0, #22
 8000cce:	f000 fb83 	bl	80013d8 <MNVIC_voidEnableInterrupt>
  CAN_voidEnableInterrupt(CAN_IER_TX_MAILBOX_EMPTY | CAN_IER_RX_FIFO0_MSG_PENDING | CAN_IER_ERROR | CAN_IER_LAST_ERROR_CODE | CAN_IER_BUSOFF);
 8000cd2:	f648 4003 	movw	r0, #35843	; 0x8c03
 8000cd6:	f7ff fd3d 	bl	8000754 <CAN_voidEnableInterrupt>
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <CAN_TxMailbox0CompleteCallback>:
void CAN_TxMailbox0CompleteCallback()
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
	//MGPIO_voidTogPinValue(GPIO_PORTA, PIN0);
	//MUSRT1_voidTransimtString(MSG);

	//USART_voidTransmit(UART1,MSG,STRING);
	//NVIC_voidSetPendingFlag(CAN_TX_IRQn);
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
	...

08000cec <CAN_RxAsy>:
        pt[i]=gDATA[i];
	}
	*len=gDATA_Len;
}
void CAN_RxAsy(volatile u8 **ptr )
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	//ptr_1=ptr;
	*ptr=gDATA;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <CAN_RxAsy+0x18>)
 8000cf8:	601a      	str	r2, [r3, #0]

}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	200001b8 	.word	0x200001b8

08000d08 <CAN_voidCallBack>:
void CAN_voidCallBack(void (*fun)(void))
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	fun_1=fun;
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <CAN_voidCallBack+0x18>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	200001c4 	.word	0x200001c4

08000d24 <CAN_RxFifo0MsgPendingCallback>:
void CAN_RxFifo0MsgPendingCallback()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	//*flage_1=1;
	CAN_RX();
 8000d28:	f7ff ffac 	bl	8000c84 <CAN_RX>
	fun_1();
 8000d2c:	4b02      	ldr	r3, [pc, #8]	; (8000d38 <CAN_RxFifo0MsgPendingCallback+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4798      	blx	r3
	//fun_1();
	//NVIC_voidSetPendingFlag(CAN_RX0_IRQn);
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001c4 	.word	0x200001c4

08000d3c <CAN_ErrorCallback>:
//	//NVIC_voidSetPendingFlag(CAN_RX0_IRQn);
//}


void CAN_ErrorCallback()
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
	/* print MSG on UART1 */
	//u8 MSG[50] = "Error Code \n";

	u32 x= CAN_voidGetErrorCode();
 8000d42:	f7ff fcf5 	bl	8000730 <CAN_voidGetErrorCode>
 8000d46:	6078      	str	r0, [r7, #4]
//	MUSRT1_voidTransimtString(MSG);
	//USART_voidTransmit(UART1,&x,INT);
	//USART_voidTransmit(UART1,"\n",STRING);
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <CANTP_voidCallBack>:
  * @brief  This function to be called when received interrupt flag from CAN
  * @param  (fun) pointer to Function
  * @retval NULL
  */
void CANTP_voidCallBack(Statue_2_t(*fun)(void))
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	/* set local pointer to function to global pointer to function in TP */
	fun_1=fun;
 8000d58:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <CANTP_voidCallBack+0x18>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]

}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	200001e8 	.word	0x200001e8

08000d6c <CANTP_RxAsy>:
	/* set local pointer flag to global pointer flag in TP */
	ptr_2=cpy_ptr;
}

void CANTP_RxAsy(volatile u8 **DATA,volatile u8 *ptr )
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	/* make Global pointer reference to data received from CAN*/
	gdata_2=*DATA;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <CANTP_RxAsy+0x24>)
 8000d7c:	6013      	str	r3, [r2, #0]
	/*  */
	ptr_1=ptr;
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <CANTP_RxAsy+0x28>)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	6013      	str	r3, [r2, #0]

}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200001f0 	.word	0x200001f0
 8000d94:	200001e0 	.word	0x200001e0

08000d98 <CANTP_voidInit>:
/**
  * @brief  This function Init CAN , filter configuration , interrupt Activation , start communication
  * @retval NULL
  */
void CANTP_voidInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	/* CAN init */
	CAN_voidInit();
 8000d9c:	f7ff fa0c 	bl	80001b8 <CAN_voidInit>
	/* CAN Filter set */
	CAN_FilterConfig();
 8000da0:	f7ff f9e9 	bl	8000176 <CAN_FilterConfig>
	/* callback function to be done when CAN raise interrupt flag */
	CAN_voidCallBack(CANTP_RecievAsy);
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <CANTP_voidInit+0x20>)
 8000da6:	f7ff ffaf 	bl	8000d08 <CAN_voidCallBack>
	/* interrupt Activation */
	CAN_Interrupt();
 8000daa:	f7ff ff87 	bl	8000cbc <CAN_Interrupt>
	/* CAN Start */
	CAN_voidStart();
 8000dae:	f7ff fb13 	bl	80003d8 <CAN_voidStart>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	08000f29 	.word	0x08000f29

08000dbc <CANTP_SendPacket>:
  * @param  (packet) pointer to Data to be sent
  * @param  (len) Length of Data to be sent
  * @retval NULL
  */
void CANTP_SendPacket(volatile u8* packet,volatile s8 len)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
	flag_ack=0;
 8000dc8:	4b54      	ldr	r3, [pc, #336]	; (8000f1c <CANTP_SendPacket+0x160>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	801a      	strh	r2, [r3, #0]
	u16 PCI=0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	817b      	strh	r3, [r7, #10]
	s8 len_copy=len;
 8000dd2:	78fb      	ldrb	r3, [r7, #3]
 8000dd4:	73fb      	strb	r3, [r7, #15]
	if(len_copy<=7)
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	2b07      	cmp	r3, #7
 8000ddc:	dc20      	bgt.n	8000e20 <CANTP_SendPacket+0x64>
	{
		buffer[0]=len_copy;
 8000dde:	7bfa      	ldrb	r2, [r7, #15]
 8000de0:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <CANTP_SendPacket+0x164>)
 8000de2:	701a      	strb	r2, [r3, #0]
		for(u8 i=0;i<len_copy;i++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	73bb      	strb	r3, [r7, #14]
 8000de8:	e00b      	b.n	8000e02 <CANTP_SendPacket+0x46>
		{
			buffer[i+1]=packet[i];
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	441a      	add	r2, r3
 8000df0:	7bbb      	ldrb	r3, [r7, #14]
 8000df2:	3301      	adds	r3, #1
 8000df4:	7812      	ldrb	r2, [r2, #0]
 8000df6:	b2d1      	uxtb	r1, r2
 8000df8:	4a49      	ldr	r2, [pc, #292]	; (8000f20 <CANTP_SendPacket+0x164>)
 8000dfa:	54d1      	strb	r1, [r2, r3]
		for(u8 i=0;i<len_copy;i++)
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	73bb      	strb	r3, [r7, #14]
 8000e02:	7bba      	ldrb	r2, [r7, #14]
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbee      	blt.n	8000dea <CANTP_SendPacket+0x2e>
		}
		CAN_TX(buffer,len_copy+1,0x200);
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e16:	4619      	mov	r1, r3
 8000e18:	4841      	ldr	r0, [pc, #260]	; (8000f20 <CANTP_SendPacket+0x164>)
 8000e1a:	f7ff ff17 	bl	8000c4c <CAN_TX>


	}


}
 8000e1e:	e079      	b.n	8000f14 <CANTP_SendPacket+0x158>
	else if(len_copy>7)
 8000e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e24:	2b07      	cmp	r3, #7
 8000e26:	dd75      	ble.n	8000f14 <CANTP_SendPacket+0x158>
		tp_cons_ind_1=0;
 8000e28:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <CANTP_SendPacket+0x168>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
		PCI=1<<12;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e32:	817b      	strh	r3, [r7, #10]
		PCI|=len_copy;
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	817b      	strh	r3, [r7, #10]
		buffer[0]=(u8)(PCI>>8);
 8000e44:	897b      	ldrh	r3, [r7, #10]
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <CANTP_SendPacket+0x164>)
 8000e4e:	701a      	strb	r2, [r3, #0]
		buffer[1]=(u8)PCI;
 8000e50:	897b      	ldrh	r3, [r7, #10]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <CANTP_SendPacket+0x164>)
 8000e56:	705a      	strb	r2, [r3, #1]
		for(u8 i=0;i<6;i++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	737b      	strb	r3, [r7, #13]
 8000e5c:	e00b      	b.n	8000e76 <CANTP_SendPacket+0xba>
			buffer[i+2]=packet[i];
 8000e5e:	7b7b      	ldrb	r3, [r7, #13]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	441a      	add	r2, r3
 8000e64:	7b7b      	ldrb	r3, [r7, #13]
 8000e66:	3302      	adds	r3, #2
 8000e68:	7812      	ldrb	r2, [r2, #0]
 8000e6a:	b2d1      	uxtb	r1, r2
 8000e6c:	4a2c      	ldr	r2, [pc, #176]	; (8000f20 <CANTP_SendPacket+0x164>)
 8000e6e:	54d1      	strb	r1, [r2, r3]
		for(u8 i=0;i<6;i++)
 8000e70:	7b7b      	ldrb	r3, [r7, #13]
 8000e72:	3301      	adds	r3, #1
 8000e74:	737b      	strb	r3, [r7, #13]
 8000e76:	7b7b      	ldrb	r3, [r7, #13]
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	d9f0      	bls.n	8000e5e <CANTP_SendPacket+0xa2>
		CAN_TX(buffer,8,0x200);
 8000e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e80:	2108      	movs	r1, #8
 8000e82:	4827      	ldr	r0, [pc, #156]	; (8000f20 <CANTP_SendPacket+0x164>)
 8000e84:	f7ff fee2 	bl	8000c4c <CAN_TX>
		len_copy-=6;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	3b06      	subs	r3, #6
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
		tp_cons_ind_1=6;
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <CANTP_SendPacket+0x168>)
 8000e92:	2206      	movs	r2, #6
 8000e94:	701a      	strb	r2, [r3, #0]
		while(len_copy>0)
 8000e96:	e039      	b.n	8000f0c <CANTP_SendPacket+0x150>
			buffer[0]=0x21;
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <CANTP_SendPacket+0x164>)
 8000e9a:	2221      	movs	r2, #33	; 0x21
 8000e9c:	701a      	strb	r2, [r3, #0]
			for(u8 i=0;(i<len_copy)&&(i<7);i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	733b      	strb	r3, [r7, #12]
 8000ea2:	e013      	b.n	8000ecc <CANTP_SendPacket+0x110>
				buffer[i+1]=packet[tp_cons_ind_1];
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <CANTP_SendPacket+0x168>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	441a      	add	r2, r3
 8000eae:	7b3b      	ldrb	r3, [r7, #12]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	b2d1      	uxtb	r1, r2
 8000eb6:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <CANTP_SendPacket+0x164>)
 8000eb8:	54d1      	strb	r1, [r2, r3]
				tp_cons_ind_1++;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <CANTP_SendPacket+0x168>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <CANTP_SendPacket+0x168>)
 8000ec4:	701a      	strb	r2, [r3, #0]
			for(u8 i=0;(i<len_copy)&&(i<7);i++)
 8000ec6:	7b3b      	ldrb	r3, [r7, #12]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	733b      	strb	r3, [r7, #12]
 8000ecc:	7b3a      	ldrb	r2, [r7, #12]
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	da02      	bge.n	8000edc <CANTP_SendPacket+0x120>
 8000ed6:	7b3b      	ldrb	r3, [r7, #12]
 8000ed8:	2b06      	cmp	r3, #6
 8000eda:	d9e3      	bls.n	8000ea4 <CANTP_SendPacket+0xe8>
			if(len_copy>7)
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	dd06      	ble.n	8000ef2 <CANTP_SendPacket+0x136>
				CAN_TX(buffer,8,0x200);
 8000ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee8:	2108      	movs	r1, #8
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <CANTP_SendPacket+0x164>)
 8000eec:	f7ff feae 	bl	8000c4c <CAN_TX>
 8000ef0:	e008      	b.n	8000f04 <CANTP_SendPacket+0x148>
				CAN_TX(buffer,len_copy+1,0x200);
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efc:	4619      	mov	r1, r3
 8000efe:	4808      	ldr	r0, [pc, #32]	; (8000f20 <CANTP_SendPacket+0x164>)
 8000f00:	f7ff fea4 	bl	8000c4c <CAN_TX>
			len_copy-=7;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	3b07      	subs	r3, #7
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	73fb      	strb	r3, [r7, #15]
		while(len_copy>0)
 8000f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dcc1      	bgt.n	8000e98 <CANTP_SendPacket+0xdc>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200001cc 	.word	0x200001cc
 8000f20:	200001d8 	.word	0x200001d8
 8000f24:	200001d0 	.word	0x200001d0

08000f28 <CANTP_RecievAsy>:
/**
  * @brief  This function to be done when CAN raise interrupt flag
  * @retval NULL
  */
void CANTP_RecievAsy(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	Statue_2_t   check_buff=NO;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	70bb      	strb	r3, [r7, #2]

	 CAN_RxAsy(&gdata_1);
 8000f32:	4888      	ldr	r0, [pc, #544]	; (8001154 <CANTP_RecievAsy+0x22c>)
 8000f34:	f7ff feda 	bl	8000cec <CAN_RxAsy>
	 check_buff=fun_1();
 8000f38:	4b87      	ldr	r3, [pc, #540]	; (8001158 <CANTP_RecievAsy+0x230>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4798      	blx	r3
 8000f3e:	4603      	mov	r3, r0
 8000f40:	70bb      	strb	r3, [r7, #2]

	 if(check_buff==OK)
 8000f42:	78bb      	ldrb	r3, [r7, #2]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	f040 8100 	bne.w	800114a <CANTP_RecievAsy+0x222>
	 {
		 /* get frame type PCI first byte from data received from CAN */
		ID_frame=(gdata_1[0]>>4);
 8000f4a:	4b82      	ldr	r3, [pc, #520]	; (8001154 <CANTP_RecievAsy+0x22c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	091b      	lsrs	r3, r3, #4
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b81      	ldr	r3, [pc, #516]	; (800115c <CANTP_RecievAsy+0x234>)
 8000f58:	701a      	strb	r2, [r3, #0]

		/* Check if you still receiving data or not*/
		if(flag_ack==0)
 8000f5a:	4b81      	ldr	r3, [pc, #516]	; (8001160 <CANTP_RecievAsy+0x238>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f040 80f2 	bne.w	800114a <CANTP_RecievAsy+0x222>
		{

		/* Check for frame type*/
		 switch(ID_frame)
 8000f66:	4b7d      	ldr	r3, [pc, #500]	; (800115c <CANTP_RecievAsy+0x234>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	f200 80d0 	bhi.w	8001110 <CANTP_RecievAsy+0x1e8>
 8000f70:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <CANTP_RecievAsy+0x50>)
 8000f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f76:	bf00      	nop
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000ff7 	.word	0x08000ff7
 8000f80:	080010a7 	.word	0x080010a7
 8000f84:	08001111 	.word	0x08001111
		 {
		 case 0: // Single Frame
			 /* Get data length */
			 length=0x0F&gdata_1[0];
 8000f88:	4b72      	ldr	r3, [pc, #456]	; (8001154 <CANTP_RecievAsy+0x22c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b72      	ldr	r3, [pc, #456]	; (8001164 <CANTP_RecievAsy+0x23c>)
 8000f9a:	801a      	strh	r2, [r3, #0]
			 /*  set Global pointer to data length from data received from CAN */
			 *ptr_1=length;
 8000f9c:	4b71      	ldr	r3, [pc, #452]	; (8001164 <CANTP_RecievAsy+0x23c>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b71      	ldr	r3, [pc, #452]	; (8001168 <CANTP_RecievAsy+0x240>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	701a      	strb	r2, [r3, #0]
			 /* check if data length is less than or equal 8*/
			  if(length<=8)
 8000faa:	4b6e      	ldr	r3, [pc, #440]	; (8001164 <CANTP_RecievAsy+0x23c>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	f200 80af 	bhi.w	8001114 <CANTP_RecievAsy+0x1ec>
			  {
				  for(u8 i=0;i<length;i++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	e014      	b.n	8000fe6 <CANTP_RecievAsy+0xbe>
				  {
					  gdata_2[i]=gdata_1[i+1];
 8000fbc:	4b65      	ldr	r3, [pc, #404]	; (8001154 <CANTP_RecievAsy+0x22c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	441a      	add	r2, r3
 8000fc6:	4b69      	ldr	r3, [pc, #420]	; (800116c <CANTP_RecievAsy+0x244>)
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	440b      	add	r3, r1
 8000fce:	7812      	ldrb	r2, [r2, #0]
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	701a      	strb	r2, [r3, #0]
					  tp_global_counter++;
 8000fd4:	4b66      	ldr	r3, [pc, #408]	; (8001170 <CANTP_RecievAsy+0x248>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b64      	ldr	r3, [pc, #400]	; (8001170 <CANTP_RecievAsy+0x248>)
 8000fde:	701a      	strb	r2, [r3, #0]
				  for(u8 i=0;i<length;i++)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b5e      	ldr	r3, [pc, #376]	; (8001164 <CANTP_RecievAsy+0x23c>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d3e3      	bcc.n	8000fbc <CANTP_RecievAsy+0x94>
				  }
			  }

			 break;
 8000ff4:	e08e      	b.n	8001114 <CANTP_RecievAsy+0x1ec>
		 case 1: // First Frame
			 length=0;
 8000ff6:	4b5b      	ldr	r3, [pc, #364]	; (8001164 <CANTP_RecievAsy+0x23c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	801a      	strh	r2, [r3, #0]
			 length = ((u16)(0x0F&gdata_1[0]))<<8;
 8000ffc:	4b55      	ldr	r3, [pc, #340]	; (8001154 <CANTP_RecievAsy+0x22c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b29b      	uxth	r3, r3
 8001008:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b55      	ldr	r3, [pc, #340]	; (8001164 <CANTP_RecievAsy+0x23c>)
 8001010:	801a      	strh	r2, [r3, #0]
			 length |= gdata_1[1];
 8001012:	4b50      	ldr	r3, [pc, #320]	; (8001154 <CANTP_RecievAsy+0x22c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b51      	ldr	r3, [pc, #324]	; (8001164 <CANTP_RecievAsy+0x23c>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b4e      	ldr	r3, [pc, #312]	; (8001164 <CANTP_RecievAsy+0x23c>)
 800102a:	801a      	strh	r2, [r3, #0]
			 *ptr_1=length;
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <CANTP_RecievAsy+0x23c>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	b29a      	uxth	r2, r3
 8001032:	4b4d      	ldr	r3, [pc, #308]	; (8001168 <CANTP_RecievAsy+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	701a      	strb	r2, [r3, #0]
			 len_temp=length;
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <CANTP_RecievAsy+0x23c>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b4c      	ldr	r3, [pc, #304]	; (8001174 <CANTP_RecievAsy+0x24c>)
 8001044:	801a      	strh	r2, [r3, #0]
			 for(u8 j=2,i=tp_current_ind;j<8;i++,j++)
 8001046:	2302      	movs	r3, #2
 8001048:	71bb      	strb	r3, [r7, #6]
 800104a:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <CANTP_RecievAsy+0x250>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	717b      	strb	r3, [r7, #5]
 8001050:	e025      	b.n	800109e <CANTP_RecievAsy+0x176>
			 {
				 gdata_2[i]=gdata_1[j];
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <CANTP_RecievAsy+0x22c>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	441a      	add	r2, r3
 800105a:	4b44      	ldr	r3, [pc, #272]	; (800116c <CANTP_RecievAsy+0x244>)
 800105c:	6819      	ldr	r1, [r3, #0]
 800105e:	797b      	ldrb	r3, [r7, #5]
 8001060:	440b      	add	r3, r1
 8001062:	7812      	ldrb	r2, [r2, #0]
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	701a      	strb	r2, [r3, #0]
				 tp_global_counter++;
 8001068:	4b41      	ldr	r3, [pc, #260]	; (8001170 <CANTP_RecievAsy+0x248>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <CANTP_RecievAsy+0x248>)
 8001072:	701a      	strb	r2, [r3, #0]
				 tp_current_ind++;
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <CANTP_RecievAsy+0x250>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <CANTP_RecievAsy+0x250>)
 800107e:	701a      	strb	r2, [r3, #0]
				 len_temp--;
 8001080:	4b3c      	ldr	r3, [pc, #240]	; (8001174 <CANTP_RecievAsy+0x24c>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b21b      	sxth	r3, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	3b01      	subs	r3, #1
 800108a:	b29b      	uxth	r3, r3
 800108c:	b21a      	sxth	r2, r3
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <CANTP_RecievAsy+0x24c>)
 8001090:	801a      	strh	r2, [r3, #0]
			 for(u8 j=2,i=tp_current_ind;j<8;i++,j++)
 8001092:	797b      	ldrb	r3, [r7, #5]
 8001094:	3301      	adds	r3, #1
 8001096:	717b      	strb	r3, [r7, #5]
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	3301      	adds	r3, #1
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d9d6      	bls.n	8001052 <CANTP_RecievAsy+0x12a>
			 }

		 	 break;
 80010a4:	e039      	b.n	800111a <CANTP_RecievAsy+0x1f2>
		 case 2:
			 for(u8 j=1,i=tp_current_ind;(j<8)&&(len_temp>0);i++,j++)
 80010a6:	2301      	movs	r3, #1
 80010a8:	713b      	strb	r3, [r7, #4]
 80010aa:	4b33      	ldr	r3, [pc, #204]	; (8001178 <CANTP_RecievAsy+0x250>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	70fb      	strb	r3, [r7, #3]
 80010b0:	e025      	b.n	80010fe <CANTP_RecievAsy+0x1d6>
			 {
				 gdata_2[i]=gdata_1[j];
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <CANTP_RecievAsy+0x22c>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	793b      	ldrb	r3, [r7, #4]
 80010b8:	441a      	add	r2, r3
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <CANTP_RecievAsy+0x244>)
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	440b      	add	r3, r1
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]
				 tp_global_counter++;
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <CANTP_RecievAsy+0x248>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <CANTP_RecievAsy+0x248>)
 80010d2:	701a      	strb	r2, [r3, #0]
				 tp_current_ind++;
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <CANTP_RecievAsy+0x250>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <CANTP_RecievAsy+0x250>)
 80010de:	701a      	strb	r2, [r3, #0]
				 len_temp--;
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <CANTP_RecievAsy+0x24c>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	3b01      	subs	r3, #1
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <CANTP_RecievAsy+0x24c>)
 80010f0:	801a      	strh	r2, [r3, #0]
			 for(u8 j=1,i=tp_current_ind;(j<8)&&(len_temp>0);i++,j++)
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	3301      	adds	r3, #1
 80010f6:	70fb      	strb	r3, [r7, #3]
 80010f8:	793b      	ldrb	r3, [r7, #4]
 80010fa:	3301      	adds	r3, #1
 80010fc:	713b      	strb	r3, [r7, #4]
 80010fe:	793b      	ldrb	r3, [r7, #4]
 8001100:	2b07      	cmp	r3, #7
 8001102:	d809      	bhi.n	8001118 <CANTP_RecievAsy+0x1f0>
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <CANTP_RecievAsy+0x24c>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	b21b      	sxth	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	dcd1      	bgt.n	80010b2 <CANTP_RecievAsy+0x18a>
			 }
		 	     	 break;
 800110e:	e003      	b.n	8001118 <CANTP_RecievAsy+0x1f0>
		 case 3:
		 			 break;
		 default:
			         break;
 8001110:	bf00      	nop
 8001112:	e002      	b.n	800111a <CANTP_RecievAsy+0x1f2>
			 break;
 8001114:	bf00      	nop
 8001116:	e000      	b.n	800111a <CANTP_RecievAsy+0x1f2>
		 	     	 break;
 8001118:	bf00      	nop

		 }
		 if(length==tp_global_counter)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <CANTP_RecievAsy+0x248>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b29a      	uxth	r2, r3
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <CANTP_RecievAsy+0x23c>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	429a      	cmp	r2, r3
 8001128:	d10f      	bne.n	800114a <CANTP_RecievAsy+0x222>
		 {
			 *ptr_2=1;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <CANTP_RecievAsy+0x254>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
			 tp_global_counter=0;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <CANTP_RecievAsy+0x248>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
			 tp_current_ind=0;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <CANTP_RecievAsy+0x250>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
			 ID_frame=10;
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <CANTP_RecievAsy+0x234>)
 8001140:	220a      	movs	r2, #10
 8001142:	701a      	strb	r2, [r3, #0]
			 flag_ack=1;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <CANTP_RecievAsy+0x238>)
 8001146:	2201      	movs	r2, #1
 8001148:	801a      	strh	r2, [r3, #0]
		 }
		}

	}

}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200001ec 	.word	0x200001ec
 8001158:	200001e8 	.word	0x200001e8
 800115c:	20000024 	.word	0x20000024
 8001160:	200001cc 	.word	0x200001cc
 8001164:	200001d2 	.word	0x200001d2
 8001168:	200001e0 	.word	0x200001e0
 800116c:	200001f0 	.word	0x200001f0
 8001170:	200001ce 	.word	0x200001ce
 8001174:	200001d4 	.word	0x200001d4
 8001178:	200001cf 	.word	0x200001cf
 800117c:	200001e4 	.word	0x200001e4

08001180 <MGPIO_voidSetPinDirection>:
//#include"RCC_interface.h"
#include"GPIO_private.h"
#include"GPIO_config.h"
/*   TO SET MODE OF PINS IN PORTS */
void  MGPIO_voidSetPinDirection(u8 COPY_u8Port,u8 COPY_u8Pin,u8 COPY_u8Mode)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	460b      	mov	r3, r1
 800118c:	71bb      	strb	r3, [r7, #6]
 800118e:	4613      	mov	r3, r2
 8001190:	717b      	strb	r3, [r7, #5]
	switch(COPY_u8Port)
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d07d      	beq.n	8001294 <MGPIO_voidSetPinDirection+0x114>
 8001198:	2b02      	cmp	r3, #2
 800119a:	f300 80b9 	bgt.w	8001310 <MGPIO_voidSetPinDirection+0x190>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <MGPIO_voidSetPinDirection+0x28>
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d03a      	beq.n	800121c <MGPIO_voidSetPinDirection+0x9c>
							 GPIO_PORTC_CRH &= (~((0b1111)<<(COPY_u8Pin*4)));
							 GPIO_PORTC_CRH |= ((COPY_u8Mode)<<(COPY_u8Pin*4));
						 }
						 break;
	}
}
 80011a6:	e0b3      	b.n	8001310 <MGPIO_voidSetPinDirection+0x190>
		                 if(COPY_u8Pin<=7)  //TO CHECK IF I USED HIGHT OR LOW  CR REGISTER
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	2b07      	cmp	r3, #7
 80011ac:	d817      	bhi.n	80011de <MGPIO_voidSetPinDirection+0x5e>
							 GPIO_PORTA_CRL &= (~((0b1111)<<(COPY_u8Pin*4)));    // TO REST BITS I WILL USED 
 80011ae:	4b5b      	ldr	r3, [pc, #364]	; (800131c <MGPIO_voidSetPinDirection+0x19c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	210f      	movs	r1, #15
 80011b8:	fa01 f202 	lsl.w	r2, r1, r2
 80011bc:	43d2      	mvns	r2, r2
 80011be:	4611      	mov	r1, r2
 80011c0:	4a56      	ldr	r2, [pc, #344]	; (800131c <MGPIO_voidSetPinDirection+0x19c>)
 80011c2:	400b      	ands	r3, r1
 80011c4:	6013      	str	r3, [r2, #0]
							 GPIO_PORTA_CRL |= ((COPY_u8Mode)<<(COPY_u8Pin*4));  // TO SET MODE IN THE BITS 
 80011c6:	4b55      	ldr	r3, [pc, #340]	; (800131c <MGPIO_voidSetPinDirection+0x19c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	7979      	ldrb	r1, [r7, #5]
 80011cc:	79ba      	ldrb	r2, [r7, #6]
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	fa01 f202 	lsl.w	r2, r1, r2
 80011d4:	4611      	mov	r1, r2
 80011d6:	4a51      	ldr	r2, [pc, #324]	; (800131c <MGPIO_voidSetPinDirection+0x19c>)
 80011d8:	430b      	orrs	r3, r1
 80011da:	6013      	str	r3, [r2, #0]
						 break;
 80011dc:	e093      	b.n	8001306 <MGPIO_voidSetPinDirection+0x186>
		                 else if(COPY_u8Pin<=15)
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	f200 8090 	bhi.w	8001306 <MGPIO_voidSetPinDirection+0x186>
						 {   COPY_u8Pin=COPY_u8Pin-8;
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	3b08      	subs	r3, #8
 80011ea:	71bb      	strb	r3, [r7, #6]
							 GPIO_PORTA_CRH &= (~((0b1111)<<(COPY_u8Pin*4)));
 80011ec:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <MGPIO_voidSetPinDirection+0x1a0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	79ba      	ldrb	r2, [r7, #6]
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	210f      	movs	r1, #15
 80011f6:	fa01 f202 	lsl.w	r2, r1, r2
 80011fa:	43d2      	mvns	r2, r2
 80011fc:	4611      	mov	r1, r2
 80011fe:	4a48      	ldr	r2, [pc, #288]	; (8001320 <MGPIO_voidSetPinDirection+0x1a0>)
 8001200:	400b      	ands	r3, r1
 8001202:	6013      	str	r3, [r2, #0]
							 GPIO_PORTA_CRH |= ((COPY_u8Mode)<<(COPY_u8Pin*4));
 8001204:	4b46      	ldr	r3, [pc, #280]	; (8001320 <MGPIO_voidSetPinDirection+0x1a0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	7979      	ldrb	r1, [r7, #5]
 800120a:	79ba      	ldrb	r2, [r7, #6]
 800120c:	0092      	lsls	r2, r2, #2
 800120e:	fa01 f202 	lsl.w	r2, r1, r2
 8001212:	4611      	mov	r1, r2
 8001214:	4a42      	ldr	r2, [pc, #264]	; (8001320 <MGPIO_voidSetPinDirection+0x1a0>)
 8001216:	430b      	orrs	r3, r1
 8001218:	6013      	str	r3, [r2, #0]
						 break;
 800121a:	e074      	b.n	8001306 <MGPIO_voidSetPinDirection+0x186>
		                 if(COPY_u8Pin<=7)
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	2b07      	cmp	r3, #7
 8001220:	d817      	bhi.n	8001252 <MGPIO_voidSetPinDirection+0xd2>
							 GPIO_PORTB_CRL &= (~((0b1111)<<(COPY_u8Pin*4)));
 8001222:	4b40      	ldr	r3, [pc, #256]	; (8001324 <MGPIO_voidSetPinDirection+0x1a4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	79ba      	ldrb	r2, [r7, #6]
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	210f      	movs	r1, #15
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	43d2      	mvns	r2, r2
 8001232:	4611      	mov	r1, r2
 8001234:	4a3b      	ldr	r2, [pc, #236]	; (8001324 <MGPIO_voidSetPinDirection+0x1a4>)
 8001236:	400b      	ands	r3, r1
 8001238:	6013      	str	r3, [r2, #0]
							 GPIO_PORTB_CRL |= ((COPY_u8Mode)<<(COPY_u8Pin*4));
 800123a:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <MGPIO_voidSetPinDirection+0x1a4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	7979      	ldrb	r1, [r7, #5]
 8001240:	79ba      	ldrb	r2, [r7, #6]
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	4611      	mov	r1, r2
 800124a:	4a36      	ldr	r2, [pc, #216]	; (8001324 <MGPIO_voidSetPinDirection+0x1a4>)
 800124c:	430b      	orrs	r3, r1
 800124e:	6013      	str	r3, [r2, #0]
						 break;
 8001250:	e05b      	b.n	800130a <MGPIO_voidSetPinDirection+0x18a>
		                 else if((COPY_u8Pin>=7)&&(COPY_u8Pin<=15))
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	2b06      	cmp	r3, #6
 8001256:	d958      	bls.n	800130a <MGPIO_voidSetPinDirection+0x18a>
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	d855      	bhi.n	800130a <MGPIO_voidSetPinDirection+0x18a>
						 {   COPY_u8Pin=COPY_u8Pin-8;
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	3b08      	subs	r3, #8
 8001262:	71bb      	strb	r3, [r7, #6]
							 GPIO_PORTB_CRH &= (~((0b1111)<<(COPY_u8Pin*4)));
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <MGPIO_voidSetPinDirection+0x1a8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	79ba      	ldrb	r2, [r7, #6]
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	210f      	movs	r1, #15
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	43d2      	mvns	r2, r2
 8001274:	4611      	mov	r1, r2
 8001276:	4a2c      	ldr	r2, [pc, #176]	; (8001328 <MGPIO_voidSetPinDirection+0x1a8>)
 8001278:	400b      	ands	r3, r1
 800127a:	6013      	str	r3, [r2, #0]
							 GPIO_PORTB_CRH |= ((COPY_u8Mode)<<(COPY_u8Pin*4));
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <MGPIO_voidSetPinDirection+0x1a8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	7979      	ldrb	r1, [r7, #5]
 8001282:	79ba      	ldrb	r2, [r7, #6]
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	fa01 f202 	lsl.w	r2, r1, r2
 800128a:	4611      	mov	r1, r2
 800128c:	4a26      	ldr	r2, [pc, #152]	; (8001328 <MGPIO_voidSetPinDirection+0x1a8>)
 800128e:	430b      	orrs	r3, r1
 8001290:	6013      	str	r3, [r2, #0]
						 break;
 8001292:	e03a      	b.n	800130a <MGPIO_voidSetPinDirection+0x18a>
		                 if(COPY_u8Pin<=7)
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	2b07      	cmp	r3, #7
 8001298:	d817      	bhi.n	80012ca <MGPIO_voidSetPinDirection+0x14a>
							 GPIO_PORTC_CRL &= (~((0b1111)<<(COPY_u8Pin*4)));
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <MGPIO_voidSetPinDirection+0x1ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	79ba      	ldrb	r2, [r7, #6]
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	210f      	movs	r1, #15
 80012a4:	fa01 f202 	lsl.w	r2, r1, r2
 80012a8:	43d2      	mvns	r2, r2
 80012aa:	4611      	mov	r1, r2
 80012ac:	4a1f      	ldr	r2, [pc, #124]	; (800132c <MGPIO_voidSetPinDirection+0x1ac>)
 80012ae:	400b      	ands	r3, r1
 80012b0:	6013      	str	r3, [r2, #0]
							 GPIO_PORTC_CRL |= ((COPY_u8Mode)<<(COPY_u8Pin*4));
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <MGPIO_voidSetPinDirection+0x1ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	7979      	ldrb	r1, [r7, #5]
 80012b8:	79ba      	ldrb	r2, [r7, #6]
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	4611      	mov	r1, r2
 80012c2:	4a1a      	ldr	r2, [pc, #104]	; (800132c <MGPIO_voidSetPinDirection+0x1ac>)
 80012c4:	430b      	orrs	r3, r1
 80012c6:	6013      	str	r3, [r2, #0]
						 break;
 80012c8:	e021      	b.n	800130e <MGPIO_voidSetPinDirection+0x18e>
		                 else if(COPY_u8Pin<=15)
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d81e      	bhi.n	800130e <MGPIO_voidSetPinDirection+0x18e>
						 {    COPY_u8Pin=COPY_u8Pin-8;
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	3b08      	subs	r3, #8
 80012d4:	71bb      	strb	r3, [r7, #6]
							 GPIO_PORTC_CRH &= (~((0b1111)<<(COPY_u8Pin*4)));
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MGPIO_voidSetPinDirection+0x1b0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	79ba      	ldrb	r2, [r7, #6]
 80012dc:	0092      	lsls	r2, r2, #2
 80012de:	210f      	movs	r1, #15
 80012e0:	fa01 f202 	lsl.w	r2, r1, r2
 80012e4:	43d2      	mvns	r2, r2
 80012e6:	4611      	mov	r1, r2
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <MGPIO_voidSetPinDirection+0x1b0>)
 80012ea:	400b      	ands	r3, r1
 80012ec:	6013      	str	r3, [r2, #0]
							 GPIO_PORTC_CRH |= ((COPY_u8Mode)<<(COPY_u8Pin*4));
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MGPIO_voidSetPinDirection+0x1b0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	7979      	ldrb	r1, [r7, #5]
 80012f4:	79ba      	ldrb	r2, [r7, #6]
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	fa01 f202 	lsl.w	r2, r1, r2
 80012fc:	4611      	mov	r1, r2
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <MGPIO_voidSetPinDirection+0x1b0>)
 8001300:	430b      	orrs	r3, r1
 8001302:	6013      	str	r3, [r2, #0]
						 break;
 8001304:	e003      	b.n	800130e <MGPIO_voidSetPinDirection+0x18e>
						 break;
 8001306:	bf00      	nop
 8001308:	e002      	b.n	8001310 <MGPIO_voidSetPinDirection+0x190>
						 break;
 800130a:	bf00      	nop
 800130c:	e000      	b.n	8001310 <MGPIO_voidSetPinDirection+0x190>
						 break;
 800130e:	bf00      	nop
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40010800 	.word	0x40010800
 8001320:	40010804 	.word	0x40010804
 8001324:	40010c00 	.word	0x40010c00
 8001328:	40010c04 	.word	0x40010c04
 800132c:	40011000 	.word	0x40011000
 8001330:	40011004 	.word	0x40011004

08001334 <RCC_voidIintSysClock>:
#include"RCC_config.h"


/* TO INTIATE THE CLOCK OF SYSTEM */
void RCC_voidIintSysClock(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	#elif     RCC_CLOCK_TYPE    ==  RCC_HSE_RC
	                  RCC_CR    =0X00050000;       //ENABLE HSE WITH RC CLOCK SOURCE
					  RCC_CFGR	=0X00000001;
					  
	#elif     RCC_CLOCK_TYPE    ==  RCC_HSI
	                  RCC_CR    =0X00000081;      //ENABLE HSI CLOCK SOURCE with triming zero(triming by defualt 0x10)
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <RCC_voidIintSysClock+0x18>)
 800133a:	2281      	movs	r2, #129	; 0x81
 800133c:	601a      	str	r2, [r3, #0]
					  RCC_CFGR	=0X00000000;
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <RCC_voidIintSysClock+0x1c>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
			         #else
			         #endif 
	#else
                      #error("please enter the correct type of clock ")		
	#endif
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000
 8001350:	40021004 	.word	0x40021004

08001354 <RCC_voidEnableClock>:


/*  TO ENABLE CLOCK TO SPECFICE PERIPHERAL */
void RCC_voidEnableClock(u8 Copy_u8BusId , u8 Copy_u8PerId){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	460a      	mov	r2, r1
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	4613      	mov	r3, r2
 8001362:	71bb      	strb	r3, [r7, #6]
	
	if(Copy_u8PerId<=31)
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	2b1f      	cmp	r3, #31
 8001368:	d82a      	bhi.n	80013c0 <RCC_voidEnableClock+0x6c>
	{
		switch(Copy_u8BusId) 
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d01c      	beq.n	80013aa <RCC_voidEnableClock+0x56>
 8001370:	2b02      	cmp	r3, #2
 8001372:	dc25      	bgt.n	80013c0 <RCC_voidEnableClock+0x6c>
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <RCC_voidEnableClock+0x2a>
 8001378:	2b01      	cmp	r3, #1
 800137a:	d00b      	beq.n	8001394 <RCC_voidEnableClock+0x40>
		//Retrun Error
	}
	
	
/*  TO DISABLE CLOCK TO SPECFICE PERIPHERAL */	
}
 800137c:	e020      	b.n	80013c0 <RCC_voidEnableClock+0x6c>
			case RCC_AHP  :    SET_BIT(RCC_AHBENR    ,Copy_u8PerId);      break;  // TO ENABLE PERIPHERAL IN AHP BUS
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <RCC_voidEnableClock+0x78>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	79ba      	ldrb	r2, [r7, #6]
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f202 	lsl.w	r2, r1, r2
 800138a:	4611      	mov	r1, r2
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <RCC_voidEnableClock+0x78>)
 800138e:	430b      	orrs	r3, r1
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e015      	b.n	80013c0 <RCC_voidEnableClock+0x6c>
			case RCC_APB1 :    SET_BIT(RCC_APB1ENR   ,Copy_u8PerId);      break;  // TO ENABLE PERIPHERAL IN APB1 BUS
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <RCC_voidEnableClock+0x7c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	79ba      	ldrb	r2, [r7, #6]
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	4611      	mov	r1, r2
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <RCC_voidEnableClock+0x7c>)
 80013a4:	430b      	orrs	r3, r1
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e00a      	b.n	80013c0 <RCC_voidEnableClock+0x6c>
			case RCC_APB2 :    SET_BIT(RCC_APB2ENR   ,Copy_u8PerId);      break;  // TO ENABLE PERIPHERAL IN APB2 BUS
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <RCC_voidEnableClock+0x80>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	79ba      	ldrb	r2, [r7, #6]
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	4611      	mov	r1, r2
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <RCC_voidEnableClock+0x80>)
 80013ba:	430b      	orrs	r3, r1
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	bf00      	nop
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021014 	.word	0x40021014
 80013d0:	4002101c 	.word	0x4002101c
 80013d4:	40021018 	.word	0x40021018

080013d8 <MNVIC_voidEnableInterrupt>:
#include"NVIC_config.h"

/*function to enable interrupt pin 
note pin number not include internal interrupts  */
void MNVIC_voidEnableInterrupt(u8 COPY_u8PinNumber)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	if(COPY_u8PinNumber<=31)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b1f      	cmp	r3, #31
 80013e6:	d805      	bhi.n	80013f4 <MNVIC_voidEnableInterrupt+0x1c>
	{
		NVIC_ISER0=(1<<COPY_u8PinNumber);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2201      	movs	r2, #1
 80013ec:	409a      	lsls	r2, r3
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MNVIC_voidEnableInterrupt+0x3c>)
 80013f0:	601a      	str	r2, [r3, #0]
	else if(COPY_u8PinNumber<=59)
	{
		COPY_u8PinNumber-=32;
		NVIC_ISER1=(1<<COPY_u8PinNumber);
	}
}
 80013f2:	e00a      	b.n	800140a <MNVIC_voidEnableInterrupt+0x32>
	else if(COPY_u8PinNumber<=59)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b3b      	cmp	r3, #59	; 0x3b
 80013f8:	d807      	bhi.n	800140a <MNVIC_voidEnableInterrupt+0x32>
		COPY_u8PinNumber-=32;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	3b20      	subs	r3, #32
 80013fe:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1=(1<<COPY_u8PinNumber);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2201      	movs	r2, #1
 8001404:	409a      	lsls	r2, r3
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <MNVIC_voidEnableInterrupt+0x40>)
 8001408:	601a      	str	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000e104 	.word	0xe000e104

0800141c <MSYSTICK_voidInit>:
#include"SYSTICK_config.h"

static void(*CallBack)(void);
/* TO INTIATE CLOCK SOURCE OF SYSTICK IF AHB or AHB/8 */
void MSYSTICK_voidInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	#if  SYSTICK_CLOCK==AHB
	      SET_BIT(SYSTICK->CTRL,2);  //TO ENABLE SYSTICK
	#elif  SYSTICK_CLOCK==AHB_8
	     CLR_BIT(SYSTICK->CTRL,2);
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <MSYSTICK_voidInit+0x30>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a09      	ldr	r2, [pc, #36]	; (800144c <MSYSTICK_voidInit+0x30>)
 8001426:	f023 0304 	bic.w	r3, r3, #4
 800142a:	6013      	str	r3, [r2, #0]

    #endif
	     CLR_BIT(SYSTICK->CTRL,0);
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <MSYSTICK_voidInit+0x30>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <MSYSTICK_voidInit+0x30>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]
	     CLR_BIT(SYSTICK->CTRL,1);
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <MSYSTICK_voidInit+0x30>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <MSYSTICK_voidInit+0x30>)
 800143e:	f023 0302 	bic.w	r3, r3, #2
 8001442:	6013      	str	r3, [r2, #0]

	
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	e000e010 	.word	0xe000e010

08001450 <MSYSTICK_voidDelay>:
/*TO MAKE  DELAY*/
void MSYSTICK_voidDelay(u32 COPY_u32TickNumber)
{   CLR_BIT(SYSTICK->CTRL,0);
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MSYSTICK_voidDelay+0x50>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <MSYSTICK_voidDelay+0x50>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6013      	str	r3, [r2, #0]
    CLR_BIT(SYSTICK->CTRL,1);
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MSYSTICK_voidDelay+0x50>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <MSYSTICK_voidDelay+0x50>)
 800146a:	f023 0302 	bic.w	r3, r3, #2
 800146e:	6013      	str	r3, [r2, #0]
	SYSTICK->VAL=0;
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MSYSTICK_voidDelay+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
    SYSTICK->LOAD=COPY_u32TickNumber; //LOAD THE NUMBER YOU WANT TO START FROM IT
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <MSYSTICK_voidDelay+0x50>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6053      	str	r3, [r2, #4]
	SET_BIT(SYSTICK->CTRL,1);  //TO ENABLE SYSTICK INTERRUPT
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MSYSTICK_voidDelay+0x50>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <MSYSTICK_voidDelay+0x50>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6013      	str	r3, [r2, #0]
	SET_BIT(SYSTICK->CTRL,0);  //TO ENABLE SYSTICK  TO START COUNT
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <MSYSTICK_voidDelay+0x50>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <MSYSTICK_voidDelay+0x50>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <MSYSTICK_voidCallBack>:
	while(SYSTICK->VAL !=0);
}

/*TO MAKE CALLBACK TO FUNCATION WHAT YOU WANT TO IMPELEMENT*/
void MSYSTICK_voidCallBack(void(*ptr)(void))
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	CallBack=ptr;
 80014ac:	4a03      	ldr	r2, [pc, #12]	; (80014bc <MSYSTICK_voidCallBack+0x18>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	200001f4 	.word	0x200001f4

080014c0 <SysTick_Handler>:
{   CLR_BIT(SYSTICK->CTRL,0);
	CLR_BIT(SYSTICK->CTRL,1);
	SYSTICK->VAL=0;
}
void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	//MGPIO_voidSetPinValue(GPIO_PORTB, PIN3,GPIO_HIGH);
	CallBack();
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <SysTick_Handler+0x10>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4798      	blx	r3
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200001f4 	.word	0x200001f4

080014d4 <swap>:
#include"STD_TYPES.h"
#include<string.h>
#include "encryption_lib.h"
static void swap(u8 *a, u8 *b)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    int tmp = *a;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	60fb      	str	r3, [r7, #12]
    *a = *b;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	701a      	strb	r2, [r3, #0]
    *b = tmp;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	701a      	strb	r2, [r3, #0]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <intiate_key_s>:
static void intiate_key_s(u8 *key,u8 *s_arr,u8 *key_arr)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b088      	sub	sp, #32
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
u8 key_count=(u8)strlen(key);
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f7fe fe1e 	bl	800014c <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	75fb      	strb	r3, [r7, #23]
u8 rem=0;
 8001514:	2300      	movs	r3, #0
 8001516:	75bb      	strb	r3, [r7, #22]
for(int i=0;i<256;i++)
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	e008      	b.n	8001530 <intiate_key_s+0x32>
{
    s_arr[i]=i;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	4413      	add	r3, r2
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]
for(int i=0;i<256;i++)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2bff      	cmp	r3, #255	; 0xff
 8001534:	ddf3      	ble.n	800151e <intiate_key_s+0x20>
}
for(int i=0;i<256;i++)
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	e023      	b.n	8001584 <intiate_key_s+0x86>
{
    if(i<key_count)
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	429a      	cmp	r2, r3
 8001542:	da08      	bge.n	8001556 <intiate_key_s+0x58>
    {
     key_arr[i]=key[i];
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	441a      	add	r2, r3
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	440b      	add	r3, r1
 8001550:	7812      	ldrb	r2, [r2, #0]
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e013      	b.n	800157e <intiate_key_s+0x80>
    }
    else if(i>=key_count)
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	429a      	cmp	r2, r3
 800155c:	db0f      	blt.n	800157e <intiate_key_s+0x80>
    {
       rem=(i%key_count);
 800155e:	7dfa      	ldrb	r2, [r7, #23]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fb93 f1f2 	sdiv	r1, r3, r2
 8001566:	fb01 f202 	mul.w	r2, r1, r2
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	75bb      	strb	r3, [r7, #22]
      key_arr[i]= key[rem];
 800156e:	7dbb      	ldrb	r3, [r7, #22]
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	441a      	add	r2, r3
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	440b      	add	r3, r1
 800157a:	7812      	ldrb	r2, [r2, #0]
 800157c:	701a      	strb	r2, [r3, #0]
for(int i=0;i<256;i++)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	3301      	adds	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2bff      	cmp	r3, #255	; 0xff
 8001588:	ddd8      	ble.n	800153c <intiate_key_s+0x3e>

    }
}
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <KSA>:


static void KSA(u8* s_arr,u8 *key_arr)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
    u32 j=0;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
    for(int i=0;i<256;i++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	e019      	b.n	80015dc <KSA+0x48>
    {
       j=(j+s_arr[i]+key_arr[i])%256;
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	6839      	ldr	r1, [r7, #0]
 80015ba:	440a      	add	r2, r1
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	60fb      	str	r3, [r7, #12]
       swap(&s_arr[i],&s_arr[j]);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	18d0      	adds	r0, r2, r3
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff ff7f 	bl	80014d4 <swap>
    for(int i=0;i<256;i++)
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3301      	adds	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2bff      	cmp	r3, #255	; 0xff
 80015e0:	dde2      	ble.n	80015a8 <KSA+0x14>
    }
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <PRGA>:

static void PRGA(u8 *s_arr,u8 *key_generate)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
    u32 i=0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
    u32 j=0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
    u32 t=0;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
    for(i=0;i<256;i++)
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e027      	b.n	8001658 <PRGA+0x6c>
    {
        j=(j+s_arr[i])%256;
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4413      	add	r3, r2
 8001616:	b2db      	uxtb	r3, r3
 8001618:	613b      	str	r3, [r7, #16]
        swap(&s_arr[i],&s_arr[j]);
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	18d0      	adds	r0, r2, r3
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4413      	add	r3, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff ff54 	bl	80014d4 <swap>
        t=(s_arr[j]+s_arr[i])%256;
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4413      	add	r3, r2
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	440b      	add	r3, r1
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4413      	add	r3, r2
 800163e:	b2db      	uxtb	r3, r3
 8001640:	60fb      	str	r3, [r7, #12]
        key_generate[i]=s_arr[t];
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	441a      	add	r2, r3
 8001648:	6839      	ldr	r1, [r7, #0]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	440b      	add	r3, r1
 800164e:	7812      	ldrb	r2, [r2, #0]
 8001650:	701a      	strb	r2, [r3, #0]
    for(i=0;i<256;i++)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2bff      	cmp	r3, #255	; 0xff
 800165c:	d9d4      	bls.n	8001608 <PRGA+0x1c>
    }
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <encryption_rc4_key_generation>:

void encryption_rc4_key_generation(u8 *key,u8 *key_generated)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800166e:	af00      	add	r7, sp, #0
 8001670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001674:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001678:	6018      	str	r0, [r3, #0]
 800167a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001682:	6019      	str	r1, [r3, #0]
    u8 s_arr[256];
    u8 key_arr[256];
    intiate_key_s(key,s_arr,key_arr);
 8001684:	f107 0208 	add.w	r2, r7, #8
 8001688:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800168c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001690:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	f7ff ff32 	bl	80014fe <intiate_key_s>
    KSA(s_arr,key_arr);
 800169a:	f107 0208 	add.w	r2, r7, #8
 800169e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff75 	bl	8001594 <KSA>
    PRGA(s_arr,key_generated);
 80016aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ae:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80016b2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	4610      	mov	r0, r2
 80016ba:	f7ff ff97 	bl	80015ec <PRGA>
}
 80016be:	bf00      	nop
 80016c0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <main>:
volatile u8 Request_Flage=0;



int main(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
    /*initialisation*/
	RCC_voidIintSysClock();              // to enable clock for system
 80016cc:	f7ff fe32 	bl	8001334 <RCC_voidIintSysClock>
	UDSM_voidInit();                              // initiate UDS Manager
 80016d0:	f000 f8a4 	bl	800181c <UDSM_voidInit>

    /* Loop forever */
	while(1)
	{
		/*pull in request flag to check if received Request*/
		 if(Request_Flage!=0)
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <main+0x24>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0fa      	beq.n	80016d4 <main+0xc>
		 {
			 /*response to the request */
			 UDSM_voidResponse();
 80016de:	f000 f961 	bl	80019a4 <UDSM_voidResponse>
			 /*clear the flag after response*/
			 Request_Flage=0;
 80016e2:	4b02      	ldr	r3, [pc, #8]	; (80016ec <main+0x24>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
		 if(Request_Flage!=0)
 80016e8:	e7f4      	b.n	80016d4 <main+0xc>
 80016ea:	bf00      	nop
 80016ec:	200001f8 	.word	0x200001f8

080016f0 <Reset_Handler>:
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <LoopFillZerobss+0xe>)
 80016f2:	490c      	ldr	r1, [pc, #48]	; (8001724 <LoopFillZerobss+0x12>)
 80016f4:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <LoopFillZerobss+0x16>)
 80016f6:	2300      	movs	r3, #0
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:
 80016fa:	58d4      	ldr	r4, [r2, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:
 8001700:	18c4      	adds	r4, r0, r3
 8001702:	428c      	cmp	r4, r1
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <LoopFillZerobss+0x1a>)
 8001708:	4c09      	ldr	r4, [pc, #36]	; (8001730 <LoopFillZerobss+0x1e>)
 800170a:	2300      	movs	r3, #0
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:
 8001712:	42a2      	cmp	r2, r4
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>
 8001716:	f000 ffbd 	bl	8002694 <__libc_init_array>
 800171a:	f7ff ffd5 	bl	80016c8 <main>
 800171e:	4770      	bx	lr
 8001720:	20000000 	.word	0x20000000
 8001724:	2000009c 	.word	0x2000009c
 8001728:	08003740 	.word	0x08003740
 800172c:	2000009c 	.word	0x2000009c
 8001730:	20000400 	.word	0x20000400

08001734 <ADC1_2_IRQHandler>:
 8001734:	e7fe      	b.n	8001734 <ADC1_2_IRQHandler>
	...

08001738 <USART1_IRQHandler>:
ptr2=ptr;
	//
}

void USART1_IRQHandler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
//	while(i<500000)i++;
//	i=0;
	//static u8 count=0;
	//*ptr1=;
	static u8 length=0;
    if(USRT1->DR!=' ')
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <USART1_IRQHandler+0x90>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b20      	cmp	r3, #32
 8001744:	d00e      	beq.n	8001764 <USART1_IRQHandler+0x2c>
    {
	buffer[length]=USRT1->DR;
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <USART1_IRQHandler+0x90>)
 8001748:	6859      	ldr	r1, [r3, #4]
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <USART1_IRQHandler+0x94>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	b2c9      	uxtb	r1, r1
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <USART1_IRQHandler+0x98>)
 8001754:	5499      	strb	r1, [r3, r2]
	length++;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <USART1_IRQHandler+0x94>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <USART1_IRQHandler+0x94>)
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e01f      	b.n	80017a4 <USART1_IRQHandler+0x6c>
	//count++;
    }
    else
    {
    	for(u8 i=0;i<length;i++)
 8001764:	2300      	movs	r3, #0
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	e00b      	b.n	8001782 <USART1_IRQHandler+0x4a>
    	{
    		ptr1_1[i]=buffer[i];
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <USART1_IRQHandler+0x9c>)
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	440b      	add	r3, r1
 8001774:	4916      	ldr	r1, [pc, #88]	; (80017d0 <USART1_IRQHandler+0x98>)
 8001776:	5c8a      	ldrb	r2, [r1, r2]
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	701a      	strb	r2, [r3, #0]
    	for(u8 i=0;i<length;i++)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	3301      	adds	r3, #1
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <USART1_IRQHandler+0x94>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	79fa      	ldrb	r2, [r7, #7]
 8001788:	429a      	cmp	r2, r3
 800178a:	d3ee      	bcc.n	800176a <USART1_IRQHandler+0x32>
    	}
    	*len_1=length;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <USART1_IRQHandler+0xa0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <USART1_IRQHandler+0x94>)
 8001792:	7812      	ldrb	r2, [r2, #0]
 8001794:	701a      	strb	r2, [r3, #0]
    	length=0;
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <USART1_IRQHandler+0x94>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
    	*flag_1=1;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <USART1_IRQHandler+0xa4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
    }

	 CLR_BIT(USRT1->SR,5);
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <USART1_IRQHandler+0x90>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <USART1_IRQHandler+0x90>)
 80017aa:	f023 0320 	bic.w	r3, r3, #32
 80017ae:	6013      	str	r3, [r2, #0]
	 CLR_BIT(USRT1->SR,6);
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <USART1_IRQHandler+0x90>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <USART1_IRQHandler+0x90>)
 80017b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017ba:	6013      	str	r3, [r2, #0]

//	MGPIO_voidTogPinValue(GPIO_PORTA, PIN0);
//	while(i<500000)i++;
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40013800 	.word	0x40013800
 80017cc:	20000240 	.word	0x20000240
 80017d0:	20000200 	.word	0x20000200
 80017d4:	200001fc 	.word	0x200001fc
 80017d8:	20000238 	.word	0x20000238
 80017dc:	20000234 	.word	0x20000234

080017e0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
	//u32 i=0;
	//MGPIO_voidTogPinValue(GPIO_PORTA, PIN0);
//	while(i<500000)i++;
//	i=0;

	*ptr2=USRT2->DR;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <USART2_IRQHandler+0x30>)
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <USART2_IRQHandler+0x34>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b292      	uxth	r2, r2
 80017ee:	801a      	strh	r2, [r3, #0]
	CLR_BIT(USRT1->SR,5);
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <USART2_IRQHandler+0x38>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a08      	ldr	r2, [pc, #32]	; (8001818 <USART2_IRQHandler+0x38>)
 80017f6:	f023 0320 	bic.w	r3, r3, #32
 80017fa:	6013      	str	r3, [r2, #0]
	CLR_BIT(USRT1->SR,6);
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <USART2_IRQHandler+0x38>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <USART2_IRQHandler+0x38>)
 8001802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001806:	6013      	str	r3, [r2, #0]

//	MGPIO_voidTogPinValue(GPIO_PORTA, PIN0);
//	while(i<500000)i++;
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40004400 	.word	0x40004400
 8001814:	2000023c 	.word	0x2000023c
 8001818:	40013800 	.word	0x40013800

0800181c <UDSM_voidInit>:



/*function to inite the UDS*/
void UDSM_voidInit(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	/*initialise CANTP*/
	CANTP_voidInit();
 8001820:	f7ff faba 	bl	8000d98 <CANTP_voidInit>
	/*INIATE SYSTICK*/
	MSYSTICK_voidInit();
 8001824:	f7ff fdfa 	bl	800141c <MSYSTICK_voidInit>
	//FUNCTION TO CALL IN TIMER ISR
    MSYSTICK_voidCallBack(UDSM_voidTiming);
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <UDSM_voidInit+0x24>)
 800182a:	f7ff fe3b 	bl	80014a4 <MSYSTICK_voidCallBack>
    //make timer interrupt every 1MS
    MSYSTICK_voidDelay(1000);
 800182e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001832:	f7ff fe0d 	bl	8001450 <MSYSTICK_voidDelay>
    /*CALL BACK Function to provide buffer pointer to CANTP*/
    CANTP_voidCallBack(UDSM_voidCheckBuffer);
 8001836:	4803      	ldr	r0, [pc, #12]	; (8001844 <UDSM_voidInit+0x28>)
 8001838:	f7ff fa8a 	bl	8000d50 <CANTP_voidCallBack>


}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	080021d5 	.word	0x080021d5
 8001844:	080021a9 	.word	0x080021a9

08001848 <Packet_DecodeSm>:
	CANTP_RxFlag(ptr);
}

/*function that will make decode to the stream data to packet can process it */
STATUES Packet_DecodeSm(u8* const Data)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	STATUES PacketSmResult = FALSE;//return value will set true when decode correctly
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
	while(PacketState_de!=PACKET_STATE_END) //stop when rich to end of frame
 8001854:	e016      	b.n	8001884 <Packet_DecodeSm+0x3c>
	{
	 PacketSmResult = (PacketSm_de[PacketState_de].Implemention)(Data); //call the handler
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <Packet_DecodeSm+0x54>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <Packet_DecodeSm+0x58>)
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	4798      	blx	r3
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
	 if(PacketSmResult==TRUE) //if the previous step completed correctly step to next step
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d106      	bne.n	800187e <Packet_DecodeSm+0x36>
	 {
		 PacketState_de++;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <Packet_DecodeSm+0x54>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <Packet_DecodeSm+0x54>)
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	e002      	b.n	8001884 <Packet_DecodeSm+0x3c>
	 }
	 /*reset if the previous step not completed  */
	 else
	 {
		 Packet_SmReset_de();
 800187e:	f000 fa23 	bl	8001cc8 <Packet_SmReset_de>
		 break;
 8001882:	e003      	b.n	800188c <Packet_DecodeSm+0x44>
	while(PacketState_de!=PACKET_STATE_END) //stop when rich to end of frame
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <Packet_DecodeSm+0x54>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d1e4      	bne.n	8001856 <Packet_DecodeSm+0xe>
	 }
	}
	Packet_SmReset_de();
 800188c:	f000 fa1c 	bl	8001cc8 <Packet_SmReset_de>
	 return PacketSmResult;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200002ac 	.word	0x200002ac
 80018a0:	08003408 	.word	0x08003408

080018a4 <Packet_encodeSm>:

STATUES Packet_encodeSm(u8* const Data)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 	STATUES PacketSmResult = FALSE;//return value will set true when encode correctly
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
	while(PacketState_en!=PACKET_STATE_END)//stop when rich to end of frame
 80018b0:	e016      	b.n	80018e0 <Packet_encodeSm+0x3c>
	{
	 PacketSmResult = (PacketSm_en[PacketState_en].Implemention)(Data);//call the handler
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <Packet_encodeSm+0x54>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4a11      	ldr	r2, [pc, #68]	; (80018fc <Packet_encodeSm+0x58>)
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	73fb      	strb	r3, [r7, #15]
	 if(PacketSmResult==TRUE)//if the previous step completed correctly step to next step
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d106      	bne.n	80018da <Packet_encodeSm+0x36>
	 {
		 PacketState_en++;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <Packet_encodeSm+0x54>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <Packet_encodeSm+0x54>)
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	e002      	b.n	80018e0 <Packet_encodeSm+0x3c>
	 }
	 /*reset if the previous step not completed  */
	 else
	 {
		 Packet_SmReset_en();
 80018da:	f000 fa01 	bl	8001ce0 <Packet_SmReset_en>
		 break;
 80018de:	e003      	b.n	80018e8 <Packet_encodeSm+0x44>
	while(PacketState_en!=PACKET_STATE_END)//stop when rich to end of frame
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <Packet_encodeSm+0x54>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d1e4      	bne.n	80018b2 <Packet_encodeSm+0xe>
	 }
	}
	/*reset if  completed  decode */
	Packet_SmReset_en();
 80018e8:	f000 f9fa 	bl	8001ce0 <Packet_SmReset_en>
	 return PacketSmResult;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002ad 	.word	0x200002ad
 80018fc:	08003420 	.word	0x08003420

08001900 <Packet_Process>:



STATUES Packet_Process(Packet_Handler_t* const Data)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	STATUES PacketResult = FALSE;//return value will set true when process correctly
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
	if(Commands_Table[Data[0].SID].Implemention!=NULL&&Data[0].SID<0x40)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <Packet_Process+0x90>)
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4413      	add	r3, r2
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d022      	beq.n	8001962 <Packet_Process+0x62>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b3f      	cmp	r3, #63	; 0x3f
 8001922:	d81e      	bhi.n	8001962 <Packet_Process+0x62>
	{
		Package_Target=Commands_Table[Data[0].SID].Decode; //choice the correct packet
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4a19      	ldr	r2, [pc, #100]	; (8001990 <Packet_Process+0x90>)
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	785a      	ldrb	r2, [r3, #1]
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <Packet_Process+0x94>)
 8001932:	701a      	strb	r2, [r3, #0]
		/*call the handler and pass the correct packet*/
		PacketResult = (Commands_Table[Data[0].SID].Implemention)(&Data[Commands_Table[Data[0].SID].Decode]);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4a15      	ldr	r2, [pc, #84]	; (8001990 <Packet_Process+0x90>)
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4912      	ldr	r1, [pc, #72]	; (8001990 <Packet_Process+0x90>)
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	785b      	ldrb	r3, [r3, #1]
 800194c:	4619      	mov	r1, r3
 800194e:	460b      	mov	r3, r1
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	440b      	add	r3, r1
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	440b      	add	r3, r1
 8001958:	4618      	mov	r0, r3
 800195a:	4790      	blx	r2
 800195c:	4603      	mov	r3, r0
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e00f      	b.n	8001982 <Packet_Process+0x82>
	}
	/*send negative response the service not supported if the service not founded*/
	else
	{
		CAN_Package[0]=0x7F;
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <Packet_Process+0x98>)
 8001964:	227f      	movs	r2, #127	; 0x7f
 8001966:	701a      	strb	r2, [r3, #0]
		CAN_Package[1]=Data[0].SID;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <Packet_Process+0x98>)
 800196e:	705a      	strb	r2, [r3, #1]
		CAN_Package[2]=SERVICE_NOT_SUPPORTED;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <Packet_Process+0x98>)
 8001972:	2211      	movs	r2, #17
 8001974:	709a      	strb	r2, [r3, #2]
		CAN_Package_len=3;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <Packet_Process+0x9c>)
 8001978:	2203      	movs	r2, #3
 800197a:	701a      	strb	r2, [r3, #0]
		nig_Flag=1;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <Packet_Process+0xa0>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
	}
	//make it trues after complete process
	PacketResult=TRUE;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
	return PacketResult;
 8001986:	7bfb      	ldrb	r3, [r7, #15]

}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	08003438 	.word	0x08003438
 8001994:	200002ae 	.word	0x200002ae
 8001998:	20000290 	.word	0x20000290
 800199c:	200002a4 	.word	0x200002a4
 80019a0:	2000028a 	.word	0x2000028a

080019a4 <UDSM_voidResponse>:
//the main fun in UDS
void UDSM_voidResponse(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
	processing_Flag=1; //Flag indicate to UDS is busy
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <UDSM_voidResponse+0x94>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
	p2_time_start_count_Flag=1; //flag indicate to the p2 time is started
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <UDSM_voidResponse+0x98>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
	STATUES result_Dec=FALSE; //variable to hold to decode result is completed or not
 80019b6:	2300      	movs	r3, #0
 80019b8:	71bb      	strb	r3, [r7, #6]
	STATUES result_Pro=FALSE; //variable to hold to  decode result is completed or not
 80019ba:	2300      	movs	r3, #0
 80019bc:	717b      	strb	r3, [r7, #5]
	STATUES result_En=FALSE;  //variable to hold to encode result is completed or not
 80019be:	2300      	movs	r3, #0
 80019c0:	713b      	strb	r3, [r7, #4]
/*implement the decoding */
	result_Dec=Packet_DecodeSm((u8* const) CAN_Package);
 80019c2:	481f      	ldr	r0, [pc, #124]	; (8001a40 <UDSM_voidResponse+0x9c>)
 80019c4:	f7ff ff40 	bl	8001848 <Packet_DecodeSm>
 80019c8:	4603      	mov	r3, r0
 80019ca:	71bb      	strb	r3, [r7, #6]
	/*if decoding successful completed  implement the processing */
	if(result_Dec==TRUE)
 80019cc:	79bb      	ldrb	r3, [r7, #6]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d11b      	bne.n	8001a0a <UDSM_voidResponse+0x66>
	{
		result_Pro=Packet_Process(My_Packet);
 80019d2:	481c      	ldr	r0, [pc, #112]	; (8001a44 <UDSM_voidResponse+0xa0>)
 80019d4:	f7ff ff94 	bl	8001900 <Packet_Process>
 80019d8:	4603      	mov	r3, r0
 80019da:	717b      	strb	r3, [r7, #5]
		/*if processing successful completed  implement the encoding */
		if(result_Pro==TRUE)
 80019dc:	797b      	ldrb	r3, [r7, #5]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d113      	bne.n	8001a0a <UDSM_voidResponse+0x66>
		{
			result_En=Packet_encodeSm((u8* const) CAN_Package);
 80019e2:	4817      	ldr	r0, [pc, #92]	; (8001a40 <UDSM_voidResponse+0x9c>)
 80019e4:	f7ff ff5e 	bl	80018a4 <Packet_encodeSm>
 80019e8:	4603      	mov	r3, r0
 80019ea:	713b      	strb	r3, [r7, #4]
			/*if encoding completed and it is positive response send the packet*/
			if(result_En==TRUE&&nig_Flag==0)
 80019ec:	793b      	ldrb	r3, [r7, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d10b      	bne.n	8001a0a <UDSM_voidResponse+0x66>
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <UDSM_voidResponse+0xa4>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d107      	bne.n	8001a0a <UDSM_voidResponse+0x66>
			{
				CANTP_SendPacket(CAN_Package,(s8)CAN_Package_len);
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <UDSM_voidResponse+0xa8>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	4619      	mov	r1, r3
 8001a04:	480e      	ldr	r0, [pc, #56]	; (8001a40 <UDSM_voidResponse+0x9c>)
 8001a06:	f7ff f9d9 	bl	8000dbc <CANTP_SendPacket>

			}
		}
	}
	/*clear the buffer*/
	for(u8 i=0;i<20;i++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	e006      	b.n	8001a1e <UDSM_voidResponse+0x7a>
	{
		CAN_Package[i]=0;
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <UDSM_voidResponse+0x9c>)
 8001a14:	2100      	movs	r1, #0
 8001a16:	54d1      	strb	r1, [r2, r3]
	for(u8 i=0;i<20;i++)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b13      	cmp	r3, #19
 8001a22:	d9f5      	bls.n	8001a10 <UDSM_voidResponse+0x6c>
	}
	/*reset negative flag*/
	nig_Flag=0;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <UDSM_voidResponse+0xa4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]

	processing_Flag=0;
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <UDSM_voidResponse+0x94>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2000028b 	.word	0x2000028b
 8001a3c:	20000289 	.word	0x20000289
 8001a40:	20000290 	.word	0x20000290
 8001a44:	20000244 	.word	0x20000244
 8001a48:	2000028a 	.word	0x2000028a
 8001a4c:	200002a4 	.word	0x200002a4

08001a50 <Packet_SID_De>:
/*service id decode handler*/
STATUES Packet_SID_De( u8* const Data)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	STATUES Result = FALSE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
	My_Packet[0].SID=Data[0];
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <Packet_SID_De+0x40>)
 8001a62:	701a      	strb	r2, [r3, #0]
	My_Packet[1].SID=Data[0];
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <Packet_SID_De+0x40>)
 8001a6a:	745a      	strb	r2, [r3, #17]
	My_Packet[2].SID=Data[0];
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <Packet_SID_De+0x40>)
 8001a72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	My_Packet[3].SID=Data[0];
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <Packet_SID_De+0x40>)
 8001a7c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Result = TRUE;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
	return Result;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	20000244 	.word	0x20000244

08001a94 <Packet_SUB_ID_De>:
/*sub service id decode handler*/
STATUES Packet_SUB_ID_De( u8* const Data)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	STATUES Result = FALSE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
	if(CAN_Package_len>=2)
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <Packet_SUB_ID_De+0x48>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d90f      	bls.n	8001aca <Packet_SUB_ID_De+0x36>
	{
		My_Packet[0].SUB_SID=0xFF;
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <Packet_SUB_ID_De+0x4c>)
 8001aac:	22ff      	movs	r2, #255	; 0xff
 8001aae:	705a      	strb	r2, [r3, #1]
		My_Packet[1].SUB_SID=Data[1];
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	785a      	ldrb	r2, [r3, #1]
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <Packet_SUB_ID_De+0x4c>)
 8001ab6:	749a      	strb	r2, [r3, #18]
		My_Packet[2].SUB_SID=0xFF;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <Packet_SUB_ID_De+0x4c>)
 8001aba:	22ff      	movs	r2, #255	; 0xff
 8001abc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		My_Packet[3].SUB_SID=Data[1];
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	785a      	ldrb	r2, [r3, #1]
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <Packet_SUB_ID_De+0x4c>)
 8001ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	}

	Result = TRUE;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
	return Result;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200002a4 	.word	0x200002a4
 8001ae0:	20000244 	.word	0x20000244

08001ae4 <Packet_DATA_De>:
/*data id decode handler*/
STATUES Packet_DATA_De( u8* const Data)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
		STATUES Result = FALSE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	737b      	strb	r3, [r7, #13]
		if(CAN_Package_len>=3)
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <Packet_DATA_De+0x88>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d92f      	bls.n	8001b5a <Packet_DATA_De+0x76>
		{

			for(u8 i=0;i<CAN_Package_len-1;i++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	e00d      	b.n	8001b1c <Packet_DATA_De+0x38>
			{
				My_Packet[2].DATA_SEG[i]=Data[i+1];
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	3301      	adds	r3, #1
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	441a      	add	r2, r3
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	7811      	ldrb	r1, [r2, #0]
 8001b0c:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <Packet_DATA_De+0x8c>)
 8001b0e:	4413      	add	r3, r2
 8001b10:	460a      	mov	r2, r1
 8001b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			for(u8 i=0;i<CAN_Package_len-1;i++)
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	7bfa      	ldrb	r2, [r7, #15]
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <Packet_DATA_De+0x88>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbea      	blt.n	8001b00 <Packet_DATA_De+0x1c>
			}
			for(u8 i=0;i<CAN_Package_len-2;i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73bb      	strb	r3, [r7, #14]
 8001b2e:	e00d      	b.n	8001b4c <Packet_DATA_De+0x68>
			{
				My_Packet[3].DATA_SEG[i]=Data[i+2];
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
 8001b32:	3302      	adds	r3, #2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	441a      	add	r2, r3
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	7811      	ldrb	r1, [r2, #0]
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <Packet_DATA_De+0x8c>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	460a      	mov	r2, r1
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			for(u8 i=0;i<CAN_Package_len-2;i++)
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	73bb      	strb	r3, [r7, #14]
 8001b4c:	7bba      	ldrb	r2, [r7, #14]
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <Packet_DATA_De+0x88>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	3b02      	subs	r3, #2
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dbea      	blt.n	8001b30 <Packet_DATA_De+0x4c>
		else
		{

		}

	Result = TRUE;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	737b      	strb	r3, [r7, #13]
	return Result;
 8001b5e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200002a4 	.word	0x200002a4
 8001b70:	20000244 	.word	0x20000244

08001b74 <Packet_SID_En>:
/*service id encode handler*/
STATUES Packet_SID_En( u8* const Data)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	STATUES Result = FALSE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
	Data[0]=My_Packet[Package_Target].SID;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <Packet_SID_En+0x34>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <Packet_SID_En+0x38>)
 8001b88:	460b      	mov	r3, r1
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	440b      	add	r3, r1
 8001b8e:	4413      	add	r3, r2
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	701a      	strb	r2, [r3, #0]
	Result = TRUE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
	return Result;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200002ae 	.word	0x200002ae
 8001bac:	20000244 	.word	0x20000244

08001bb0 <Packet_SUB_ID_En>:
/*sub service id encode handler*/
STATUES Packet_SUB_ID_En( u8* const Data)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	STATUES Result = FALSE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]

	if(Package_Target==SID_SUB)
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <Packet_SUB_ID_En+0x60>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d10c      	bne.n	8001bde <Packet_SUB_ID_En+0x2e>
	{
		Data[1]=My_Packet[Package_Target].SUB_SID;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <Packet_SUB_ID_En+0x60>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	4911      	ldr	r1, [pc, #68]	; (8001c14 <Packet_SUB_ID_En+0x64>)
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	4403      	add	r3, r0
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3301      	adds	r3, #1
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	7013      	strb	r3, [r2, #0]
	}
	if(Package_Target==SID_SUB_DATA)
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <Packet_SUB_ID_En+0x60>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d10c      	bne.n	8001c00 <Packet_SUB_ID_En+0x50>
	{
		Data[1]=My_Packet[Package_Target].SUB_SID;
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <Packet_SUB_ID_En+0x60>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	4908      	ldr	r1, [pc, #32]	; (8001c14 <Packet_SUB_ID_En+0x64>)
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	4403      	add	r3, r0
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	7013      	strb	r3, [r2, #0]
	}

	Result = TRUE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
	return Result;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	200002ae 	.word	0x200002ae
 8001c14:	20000244 	.word	0x20000244

08001c18 <Packet_DATA_En>:
/*data id encode handler*/
STATUES Packet_DATA_En( u8* const Data)
{
 8001c18:	b490      	push	{r4, r7}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	STATUES Result = FALSE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	737b      	strb	r3, [r7, #13]
	if(Package_Target==SID_DATA)
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <Packet_DATA_En+0xa4>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d11d      	bne.n	8001c68 <Packet_DATA_En+0x50>
	{

            for(u8 i=1;i<CAN_Package_len;i++)
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e013      	b.n	8001c5a <Packet_DATA_En+0x42>
            {
            	Data[i]=My_Packet[Package_Target].DATA_SEG[i-1];
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <Packet_DATA_En+0xa4>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461c      	mov	r4, r3
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	1e59      	subs	r1, r3, #1
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	441a      	add	r2, r3
 8001c42:	481f      	ldr	r0, [pc, #124]	; (8001cc0 <Packet_DATA_En+0xa8>)
 8001c44:	4623      	mov	r3, r4
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4423      	add	r3, r4
 8001c4a:	4403      	add	r3, r0
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3302      	adds	r3, #2
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	7013      	strb	r3, [r2, #0]
            for(u8 i=1;i<CAN_Package_len;i++)
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	3301      	adds	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <Packet_DATA_En+0xac>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3e5      	bcc.n	8001c32 <Packet_DATA_En+0x1a>
 8001c66:	e020      	b.n	8001caa <Packet_DATA_En+0x92>
            }

	}
	else if(Package_Target==SID_SUB_DATA)
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <Packet_DATA_En+0xa4>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d11c      	bne.n	8001caa <Packet_DATA_En+0x92>
	{
            for(u8 i=2;i<CAN_Package_len;i++)
 8001c70:	2302      	movs	r3, #2
 8001c72:	73bb      	strb	r3, [r7, #14]
 8001c74:	e013      	b.n	8001c9e <Packet_DATA_En+0x86>
            {
            	Data[i]=My_Packet[Package_Target].DATA_SEG[i-2];
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <Packet_DATA_En+0xa4>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461c      	mov	r4, r3
 8001c7c:	7bbb      	ldrb	r3, [r7, #14]
 8001c7e:	1e99      	subs	r1, r3, #2
 8001c80:	7bbb      	ldrb	r3, [r7, #14]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	441a      	add	r2, r3
 8001c86:	480e      	ldr	r0, [pc, #56]	; (8001cc0 <Packet_DATA_En+0xa8>)
 8001c88:	4623      	mov	r3, r4
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4423      	add	r3, r4
 8001c8e:	4403      	add	r3, r0
 8001c90:	440b      	add	r3, r1
 8001c92:	3302      	adds	r3, #2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	7013      	strb	r3, [r2, #0]
            for(u8 i=2;i<CAN_Package_len;i++)
 8001c98:	7bbb      	ldrb	r3, [r7, #14]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	73bb      	strb	r3, [r7, #14]
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <Packet_DATA_En+0xac>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	7bba      	ldrb	r2, [r7, #14]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3e5      	bcc.n	8001c76 <Packet_DATA_En+0x5e>
            }
	}

	Result = TRUE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	737b      	strb	r3, [r7, #13]
	return Result;
 8001cae:	7b7b      	ldrb	r3, [r7, #13]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc90      	pop	{r4, r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	200002ae 	.word	0x200002ae
 8001cc0:	20000244 	.word	0x20000244
 8001cc4:	200002a4 	.word	0x200002a4

08001cc8 <Packet_SmReset_de>:
/*reset the decoding statue */
void Packet_SmReset_de(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
	PacketState_de=SID;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <Packet_SmReset_de+0x14>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	200002ac 	.word	0x200002ac

08001ce0 <Packet_SmReset_en>:
/*reset the encoding statue */
void Packet_SmReset_en(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
	PacketState_en=SID;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <Packet_SmReset_en+0x14>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	200002ad 	.word	0x200002ad

08001cf8 <Read_ID>:
/*read data services handler*/
STATUES Read_ID( Packet_Handler_t* const Data)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	STATUES   Pro_res=FALSE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	72fb      	strb	r3, [r7, #11]
	STATUES   read_re=FALSE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
	u8 Error_Flage=0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73bb      	strb	r3, [r7, #14]
	u16 Local_DID= ((((u16)Data->DATA_SEG[0])<<8)|((u16)Data->DATA_SEG[1]));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	789b      	ldrb	r3, [r3, #2]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	78db      	ldrb	r3, [r3, #3]
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	813b      	strh	r3, [r7, #8]
        if(CAN_Package_len==3)
 8001d20:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <Read_ID+0x158>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d167      	bne.n	8001dfa <Read_ID+0x102>
        {
			for(u8 i=0;i<Data_Table_len;i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	737b      	strb	r3, [r7, #13]
 8001d2e:	e05e      	b.n	8001dee <Read_ID+0xf6>
			{
					if(Local_DID==Data_Table[i].DID)
 8001d30:	7b7b      	ldrb	r3, [r7, #13]
 8001d32:	4a48      	ldr	r2, [pc, #288]	; (8001e54 <Read_ID+0x15c>)
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	4413      	add	r3, r2
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	893a      	ldrh	r2, [r7, #8]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d153      	bne.n	8001de8 <Read_ID+0xf0>
					{
						if((Data_Table[i].DATA_Session_R==Current_Session)||(Data_Table[i].DATA_Session_R==Multi_Session))
 8001d40:	7b7b      	ldrb	r3, [r7, #13]
 8001d42:	4a44      	ldr	r2, [pc, #272]	; (8001e54 <Read_ID+0x15c>)
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	4413      	add	r3, r2
 8001d48:	330a      	adds	r3, #10
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <Read_ID+0x160>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d007      	beq.n	8001d64 <Read_ID+0x6c>
 8001d54:	7b7b      	ldrb	r3, [r7, #13]
 8001d56:	4a3f      	ldr	r2, [pc, #252]	; (8001e54 <Read_ID+0x15c>)
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	4413      	add	r3, r2
 8001d5c:	330a      	adds	r3, #10
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d141      	bne.n	8001de8 <Read_ID+0xf0>
						{
							if((Data_Table[i].DATA_Level_R==Current_Level)||(Data_Table[i].DATA_Level_R==Multi_Level))
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	4a3b      	ldr	r2, [pc, #236]	; (8001e54 <Read_ID+0x15c>)
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	330c      	adds	r3, #12
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <Read_ID+0x164>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d007      	beq.n	8001d88 <Read_ID+0x90>
 8001d78:	7b7b      	ldrb	r3, [r7, #13]
 8001d7a:	4a36      	ldr	r2, [pc, #216]	; (8001e54 <Read_ID+0x15c>)
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	330c      	adds	r3, #12
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d12f      	bne.n	8001de8 <Read_ID+0xf0>
							{
								Data->SID=Data->SID+0x40;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	3340      	adds	r3, #64	; 0x40
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	701a      	strb	r2, [r3, #0]
								for(u8 j=0;j<Data_Table[i].length;j++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	733b      	strb	r3, [r7, #12]
 8001d98:	e011      	b.n	8001dbe <Read_ID+0xc6>
								{
									Data->DATA_SEG[j+2]=Data_Table[i].Data_ptr[j];
 8001d9a:	7b7b      	ldrb	r3, [r7, #13]
 8001d9c:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <Read_ID+0x15c>)
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	7b3b      	ldrb	r3, [r7, #12]
 8001da8:	441a      	add	r2, r3
 8001daa:	7b3b      	ldrb	r3, [r7, #12]
 8001dac:	3302      	adds	r3, #2
 8001dae:	7811      	ldrb	r1, [r2, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	460a      	mov	r2, r1
 8001db6:	709a      	strb	r2, [r3, #2]
								for(u8 j=0;j<Data_Table[i].length;j++)
 8001db8:	7b3b      	ldrb	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	733b      	strb	r3, [r7, #12]
 8001dbe:	7b7b      	ldrb	r3, [r7, #13]
 8001dc0:	4a24      	ldr	r2, [pc, #144]	; (8001e54 <Read_ID+0x15c>)
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	7b3a      	ldrb	r2, [r7, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d3e4      	bcc.n	8001d9a <Read_ID+0xa2>
								}
								read_re=TRUE;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
								CAN_Package_len=3+Data_Table[i].length;
 8001dd4:	7b7b      	ldrb	r3, [r7, #13]
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <Read_ID+0x15c>)
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	4413      	add	r3, r2
 8001ddc:	3308      	adds	r3, #8
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	3303      	adds	r3, #3
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <Read_ID+0x158>)
 8001de6:	701a      	strb	r2, [r3, #0]
			for(u8 i=0;i<Data_Table_len;i++)
 8001de8:	7b7b      	ldrb	r3, [r7, #13]
 8001dea:	3301      	adds	r3, #1
 8001dec:	737b      	strb	r3, [r7, #13]
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <Read_ID+0x168>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	7b7a      	ldrb	r2, [r7, #13]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d39b      	bcc.n	8001d30 <Read_ID+0x38>
 8001df8:	e001      	b.n	8001dfe <Read_ID+0x106>
						}
					}
			 }
        }
        else
        	Error_Flage=1;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73bb      	strb	r3, [r7, #14]
        if(read_re==FALSE)
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d11e      	bne.n	8001e42 <Read_ID+0x14a>
		{
				nig_Flag=1;
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <Read_ID+0x16c>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
				CAN_Package[0]=0x7F;
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <Read_ID+0x170>)
 8001e0c:	227f      	movs	r2, #127	; 0x7f
 8001e0e:	701a      	strb	r2, [r3, #0]
				CAN_Package[1]=Data->SID;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <Read_ID+0x170>)
 8001e16:	705a      	strb	r2, [r3, #1]
				CAN_Package[2]=FAILER_EXECUTION_OF_REUESTED_ACTION;
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <Read_ID+0x170>)
 8001e1a:	2226      	movs	r2, #38	; 0x26
 8001e1c:	709a      	strb	r2, [r3, #2]
				CAN_Package_len=3;
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <Read_ID+0x158>)
 8001e20:	2203      	movs	r2, #3
 8001e22:	701a      	strb	r2, [r3, #0]
				switch(Error_Flage)
 8001e24:	7bbb      	ldrb	r3, [r7, #14]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d103      	bne.n	8001e32 <Read_ID+0x13a>
				{
				case 1:
					CAN_Package[2]=INCORRECT_MASSAGE_LEN;
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <Read_ID+0x170>)
 8001e2c:	2213      	movs	r2, #19
 8001e2e:	709a      	strb	r2, [r3, #2]
					break;
 8001e30:	bf00      	nop
				}
				CANTP_SendPacket(CAN_Package,CAN_Package_len);
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <Read_ID+0x158>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480a      	ldr	r0, [pc, #40]	; (8001e68 <Read_ID+0x170>)
 8001e3e:	f7fe ffbd 	bl	8000dbc <CANTP_SendPacket>
		}
	Pro_res=TRUE;
 8001e42:	2301      	movs	r3, #1
 8001e44:	72fb      	strb	r3, [r7, #11]

    return Pro_res;
 8001e46:	7afb      	ldrb	r3, [r7, #11]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200002a4 	.word	0x200002a4
 8001e54:	08003638 	.word	0x08003638
 8001e58:	2000003c 	.word	0x2000003c
 8001e5c:	2000003d 	.word	0x2000003d
 8001e60:	2000003e 	.word	0x2000003e
 8001e64:	2000028a 	.word	0x2000028a
 8001e68:	20000290 	.word	0x20000290

08001e6c <Session_Control_fun>:

/*session data services handler*/
STATUES Session_Control_fun(Packet_Handler_t* const Data)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	if(Data->SUB_SID>0&&Data->SUB_SID<4)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	785b      	ldrb	r3, [r3, #1]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01c      	beq.n	8001eb6 <Session_Control_fun+0x4a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	785b      	ldrb	r3, [r3, #1]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d818      	bhi.n	8001eb6 <Session_Control_fun+0x4a>
	{
		Current_Session=Data->SUB_SID;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	785a      	ldrb	r2, [r3, #1]
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <Session_Control_fun+0x84>)
 8001e8a:	701a      	strb	r2, [r3, #0]
		Data->SID=Data->SID+0x40;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	3340      	adds	r3, #64	; 0x40
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	701a      	strb	r2, [r3, #0]
		if(Current_Session!=Defualt)
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <Session_Control_fun+0x84>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d003      	beq.n	8001ea8 <Session_Control_fun+0x3c>
		{
			Non_defualt_time_start_count_Flag=1;
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <Session_Control_fun+0x88>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	e002      	b.n	8001eae <Session_Control_fun+0x42>
		}
		else
		{
			Non_defualt_time_start_count_Flag=0;
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <Session_Control_fun+0x88>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
		}
		CAN_Package_len=2;
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <Session_Control_fun+0x8c>)
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e017      	b.n	8001ee6 <Session_Control_fun+0x7a>
	}
	else
	{
		nig_Flag=1;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <Session_Control_fun+0x90>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
		CAN_Package[0]=0x7F;
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <Session_Control_fun+0x94>)
 8001ebe:	227f      	movs	r2, #127	; 0x7f
 8001ec0:	701a      	strb	r2, [r3, #0]
		CAN_Package[1]=Data->SID;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <Session_Control_fun+0x94>)
 8001ec8:	705a      	strb	r2, [r3, #1]
		CAN_Package[2]=SUB_SERVICE_NOT_SUPPORTED;
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <Session_Control_fun+0x94>)
 8001ecc:	2212      	movs	r2, #18
 8001ece:	709a      	strb	r2, [r3, #2]
		CAN_Package_len=3;
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <Session_Control_fun+0x8c>)
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	701a      	strb	r2, [r3, #0]
		CANTP_SendPacket(CAN_Package,CAN_Package_len);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <Session_Control_fun+0x8c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	b25b      	sxtb	r3, r3
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4807      	ldr	r0, [pc, #28]	; (8001f00 <Session_Control_fun+0x94>)
 8001ee2:	f7fe ff6b 	bl	8000dbc <CANTP_SendPacket>
	}
	return TRUE;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000003c 	.word	0x2000003c
 8001ef4:	20000288 	.word	0x20000288
 8001ef8:	200002a4 	.word	0x200002a4
 8001efc:	2000028a 	.word	0x2000028a
 8001f00:	20000290 	.word	0x20000290

08001f04 <Tester_Represent>:
/*Tester Represent data services handler*/
STATUES Tester_Represent( Packet_Handler_t* const Data)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	Data->SID=Data->SID+0x40;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	3340      	adds	r3, #64	; 0x40
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	701a      	strb	r2, [r3, #0]
	CAN_Package_len=1;
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <Tester_Represent+0x2c>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
	S3_time_counter=0;
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <Tester_Represent+0x30>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	200002a4 	.word	0x200002a4
 8001f34:	200002a6 	.word	0x200002a6

08001f38 <Write_ID>:

/*write  data services handler*/
STATUES Write_ID( Packet_Handler_t* const Data)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	STATUES   Pro_res=FALSE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	733b      	strb	r3, [r7, #12]
	STATUES   read_re=FALSE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
	u16 Local_DID= ((u16)(Data->DATA_SEG[0]))<<8;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	789b      	ldrb	r3, [r3, #2]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	817b      	strh	r3, [r7, #10]
		Local_DID=((u16)(Data->DATA_SEG[1]));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	78db      	ldrb	r3, [r3, #3]
 8001f56:	817b      	strh	r3, [r7, #10]
	u8 Error_Flage=0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	727b      	strb	r3, [r7, #9]

			for(u8 i=0;i<Data_Table_len;i++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73bb      	strb	r3, [r7, #14]
 8001f60:	e05d      	b.n	800201e <Write_ID+0xe6>
			{
					if(Local_DID==Data_Table[i].DID)
 8001f62:	7bbb      	ldrb	r3, [r7, #14]
 8001f64:	4a45      	ldr	r2, [pc, #276]	; (800207c <Write_ID+0x144>)
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	4413      	add	r3, r2
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	897a      	ldrh	r2, [r7, #10]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d152      	bne.n	8002018 <Write_ID+0xe0>
					{
							if((Data_Table[i].DATA_Session_W==Current_Session)||(Data_Table[i].DATA_Session_W==Multi_Session))
 8001f72:	7bbb      	ldrb	r3, [r7, #14]
 8001f74:	4a41      	ldr	r2, [pc, #260]	; (800207c <Write_ID+0x144>)
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	330b      	adds	r3, #11
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	4b40      	ldr	r3, [pc, #256]	; (8002080 <Write_ID+0x148>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d007      	beq.n	8001f96 <Write_ID+0x5e>
 8001f86:	7bbb      	ldrb	r3, [r7, #14]
 8001f88:	4a3c      	ldr	r2, [pc, #240]	; (800207c <Write_ID+0x144>)
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	4413      	add	r3, r2
 8001f8e:	330b      	adds	r3, #11
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d140      	bne.n	8002018 <Write_ID+0xe0>
							{
								if((Data_Table[i].DATA_Level_W==Current_Level)||(Data_Table[i].DATA_Level_W==Multi_Level))
 8001f96:	7bbb      	ldrb	r3, [r7, #14]
 8001f98:	4a38      	ldr	r2, [pc, #224]	; (800207c <Write_ID+0x144>)
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4413      	add	r3, r2
 8001f9e:	330d      	adds	r3, #13
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <Write_ID+0x14c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d007      	beq.n	8001fba <Write_ID+0x82>
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	4a33      	ldr	r2, [pc, #204]	; (800207c <Write_ID+0x144>)
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	4413      	add	r3, r2
 8001fb2:	330d      	adds	r3, #13
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d12e      	bne.n	8002018 <Write_ID+0xe0>
								{
									Data->SID=Data->SID+0x40;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	3340      	adds	r3, #64	; 0x40
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	701a      	strb	r2, [r3, #0]
									for(u8 j=0;j<Data_Table[i].length;j++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	737b      	strb	r3, [r7, #13]
 8001fca:	e010      	b.n	8001fee <Write_ID+0xb6>
									{

										Data_Table[i].Data_ptr[j]=(Data->DATA_SEG)[j+2];
 8001fcc:	7b7b      	ldrb	r3, [r7, #13]
 8001fce:	1c9a      	adds	r2, r3, #2
 8001fd0:	7bbb      	ldrb	r3, [r7, #14]
 8001fd2:	492a      	ldr	r1, [pc, #168]	; (800207c <Write_ID+0x144>)
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3304      	adds	r3, #4
 8001fda:	6819      	ldr	r1, [r3, #0]
 8001fdc:	7b7b      	ldrb	r3, [r7, #13]
 8001fde:	440b      	add	r3, r1
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	440a      	add	r2, r1
 8001fe4:	7892      	ldrb	r2, [r2, #2]
 8001fe6:	701a      	strb	r2, [r3, #0]
									for(u8 j=0;j<Data_Table[i].length;j++)
 8001fe8:	7b7b      	ldrb	r3, [r7, #13]
 8001fea:	3301      	adds	r3, #1
 8001fec:	737b      	strb	r3, [r7, #13]
 8001fee:	7bbb      	ldrb	r3, [r7, #14]
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <Write_ID+0x144>)
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	7b7a      	ldrb	r2, [r7, #13]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d3e5      	bcc.n	8001fcc <Write_ID+0x94>
									}
									read_re=TRUE;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
									CAN_Package_len=3+Data_Table[i].length;
 8002004:	7bbb      	ldrb	r3, [r7, #14]
 8002006:	4a1d      	ldr	r2, [pc, #116]	; (800207c <Write_ID+0x144>)
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	4413      	add	r3, r2
 800200c:	3308      	adds	r3, #8
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	3303      	adds	r3, #3
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <Write_ID+0x150>)
 8002016:	701a      	strb	r2, [r3, #0]
			for(u8 i=0;i<Data_Table_len;i++)
 8002018:	7bbb      	ldrb	r3, [r7, #14]
 800201a:	3301      	adds	r3, #1
 800201c:	73bb      	strb	r3, [r7, #14]
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <Write_ID+0x154>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	7bba      	ldrb	r2, [r7, #14]
 8002024:	429a      	cmp	r2, r3
 8002026:	d39c      	bcc.n	8001f62 <Write_ID+0x2a>
								}
							}
					}
			 }
		if(read_re==FALSE)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d11e      	bne.n	800206c <Write_ID+0x134>
		{
				nig_Flag=1;
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <Write_ID+0x158>)
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
				CAN_Package[0]=0x7F;
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <Write_ID+0x15c>)
 8002036:	227f      	movs	r2, #127	; 0x7f
 8002038:	701a      	strb	r2, [r3, #0]
				CAN_Package[1]=Data->SID;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <Write_ID+0x15c>)
 8002040:	705a      	strb	r2, [r3, #1]
				CAN_Package[2]=FAILER_EXECUTION_OF_REUESTED_ACTION;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <Write_ID+0x15c>)
 8002044:	2226      	movs	r2, #38	; 0x26
 8002046:	709a      	strb	r2, [r3, #2]
				CAN_Package_len=3;
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <Write_ID+0x150>)
 800204a:	2203      	movs	r2, #3
 800204c:	701a      	strb	r2, [r3, #0]
				switch(Error_Flage)
 800204e:	7a7b      	ldrb	r3, [r7, #9]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d103      	bne.n	800205c <Write_ID+0x124>
				{
				case 1:
					CAN_Package[2]=INCORRECT_MASSAGE_LEN;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <Write_ID+0x15c>)
 8002056:	2213      	movs	r2, #19
 8002058:	709a      	strb	r2, [r3, #2]
					break;
 800205a:	bf00      	nop
				}
				CANTP_SendPacket(CAN_Package,CAN_Package_len);
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <Write_ID+0x150>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	b25b      	sxtb	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	480b      	ldr	r0, [pc, #44]	; (8002094 <Write_ID+0x15c>)
 8002068:	f7fe fea8 	bl	8000dbc <CANTP_SendPacket>
		}
	Pro_res=TRUE;
 800206c:	2301      	movs	r3, #1
 800206e:	733b      	strb	r3, [r7, #12]
	return Pro_res;
 8002070:	7b3b      	ldrb	r3, [r7, #12]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	08003638 	.word	0x08003638
 8002080:	2000003c 	.word	0x2000003c
 8002084:	2000003d 	.word	0x2000003d
 8002088:	200002a4 	.word	0x200002a4
 800208c:	2000003e 	.word	0x2000003e
 8002090:	2000028a 	.word	0x2000028a
 8002094:	20000290 	.word	0x20000290

08002098 <Security_Access_fun>:

/*Security Access services handler*/
STATUES Security_Access_fun(Packet_Handler_t* const Data)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	STATUES Local_Status = FALSE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
	static u8 Seed_Value = 0;

		if(((Data->SUB_SID) %2==1)&&((Data->SUB_SID)<6)){
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	785b      	ldrb	r3, [r3, #1]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d019      	beq.n	80020e6 <Security_Access_fun+0x4e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d815      	bhi.n	80020e6 <Security_Access_fun+0x4e>
			// send a seed 8 bit , Random generator
			Seed_Value = generateRandomByte();
 80020ba:	f000 f85b 	bl	8002174 <generateRandomByte>
 80020be:	4603      	mov	r3, r0
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b28      	ldr	r3, [pc, #160]	; (8002164 <Security_Access_fun+0xcc>)
 80020c4:	701a      	strb	r2, [r3, #0]

			Data->SID = Data->SID+0x40;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	3340      	adds	r3, #64	; 0x40
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	701a      	strb	r2, [r3, #0]
			Data->DATA_SEG[0] = Seed_Value;
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <Security_Access_fun+0xcc>)
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	709a      	strb	r2, [r3, #2]
			Local_Status = TRUE;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
			CAN_Package_len=3;
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <Security_Access_fun+0xd0>)
 80020e0:	2203      	movs	r2, #3
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	e038      	b.n	8002158 <Security_Access_fun+0xc0>
		}
		else if(Data->SUB_SID == Key_1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d118      	bne.n	8002120 <Security_Access_fun+0x88>
		{
			// check for key sent by tester by algorithm add by 5
			// if true access is accepted else,  NRC 0x35    Invalid Key
			if((Seed_Value+5) == Data->DATA_SEG[0])
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <Security_Access_fun+0xcc>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	3305      	adds	r3, #5
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	7892      	ldrb	r2, [r2, #2]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d12d      	bne.n	8002158 <Security_Access_fun+0xc0>
			{
				Data->SID = Data->SID+0x40;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	3340      	adds	r3, #64	; 0x40
 8002102:	b2da      	uxtb	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	701a      	strb	r2, [r3, #0]
				Current_Level = Level1;
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <Security_Access_fun+0xd4>)
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
				Security_time_start_count_Flag=1;
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <Security_Access_fun+0xd8>)
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
				Local_Status = TRUE;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
				CAN_Package_len=4;
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <Security_Access_fun+0xd0>)
 800211a:	2204      	movs	r2, #4
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e01b      	b.n	8002158 <Security_Access_fun+0xc0>
			}
		}
		else if(Data->SUB_SID == Key_2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	785b      	ldrb	r3, [r3, #1]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d117      	bne.n	8002158 <Security_Access_fun+0xc0>
		{
				if((Seed_Value+10) == Data->DATA_SEG[0])
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <Security_Access_fun+0xcc>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	330a      	adds	r3, #10
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	7892      	ldrb	r2, [r2, #2]
 8002132:	4293      	cmp	r3, r2
 8002134:	d110      	bne.n	8002158 <Security_Access_fun+0xc0>
				{
					Data->SID = Data->SID+0x40;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	3340      	adds	r3, #64	; 0x40
 800213c:	b2da      	uxtb	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	701a      	strb	r2, [r3, #0]
					Current_Level = Level2;
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <Security_Access_fun+0xd4>)
 8002144:	2202      	movs	r2, #2
 8002146:	701a      	strb	r2, [r3, #0]
					Security_time_start_count_Flag=1;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <Security_Access_fun+0xd8>)
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
					Local_Status = TRUE;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
					CAN_Package_len=4;
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <Security_Access_fun+0xd0>)
 8002154:	2204      	movs	r2, #4
 8002156:	701a      	strb	r2, [r3, #0]
				}
		}
	return Local_Status;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200002af 	.word	0x200002af
 8002168:	200002a4 	.word	0x200002a4
 800216c:	2000003d 	.word	0x2000003d
 8002170:	2000028c 	.word	0x2000028c

08002174 <generateRandomByte>:

static u8 generateRandomByte(void){
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
    // Seed the random number generator
    srand((u16)time(NULL));
 800217a:	2000      	movs	r0, #0
 800217c:	f000 fa18 	bl	80025b0 <time>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	b293      	uxth	r3, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f898 	bl	80022bc <srand>

    // Generate a random byte
    u8 randomByte = rand() % 256;
 800218c:	f000 f8c4 	bl	8002318 <rand>
 8002190:	4603      	mov	r3, r0
 8002192:	425a      	negs	r2, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	bf58      	it	pl
 800219a:	4253      	negpl	r3, r2
 800219c:	71fb      	strb	r3, [r7, #7]

    return randomByte;
 800219e:	79fb      	ldrb	r3, [r7, #7]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <UDSM_voidCheckBuffer>:
/*function to check if UDS can receive new request */
Statue_2_t UDSM_voidCheckBuffer(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	if(processing_Flag==0)
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <UDSM_voidCheckBuffer+0x20>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <UDSM_voidCheckBuffer+0x18>
	{
		CANTP_RxAsy(&ptr_packet,&CAN_Package_len);
 80021b4:	4905      	ldr	r1, [pc, #20]	; (80021cc <UDSM_voidCheckBuffer+0x24>)
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <UDSM_voidCheckBuffer+0x28>)
 80021b8:	f7fe fdd8 	bl	8000d6c <CANTP_RxAsy>
		return OK ;
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <UDSM_voidCheckBuffer+0x1a>
	}
	else
		return NO;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000028b 	.word	0x2000028b
 80021cc:	200002a4 	.word	0x200002a4
 80021d0:	20000038 	.word	0x20000038

080021d4 <UDSM_voidTiming>:
/*call back function to handle all times in UDS when timer interrupt fired*/
void UDSM_voidTiming(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0

	 if(Non_defualt_time_start_count_Flag==1)
 80021da:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <UDSM_voidTiming+0xc4>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d112      	bne.n	8002208 <UDSM_voidTiming+0x34>
	 {
		 S3_time_counter++;
 80021e2:	4b2e      	ldr	r3, [pc, #184]	; (800229c <UDSM_voidTiming+0xc8>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <UDSM_voidTiming+0xc8>)
 80021ee:	801a      	strh	r2, [r3, #0]
		 if(S3_time_counter<=1000000)
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <UDSM_voidTiming+0xc8>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
		 {
			 Current_Session=Defualt;
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <UDSM_voidTiming+0xcc>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
			 S3_time_counter=0;
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <UDSM_voidTiming+0xc8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	801a      	strh	r2, [r3, #0]
			 Non_defualt_time_start_count_Flag=0;
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <UDSM_voidTiming+0xc4>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	e002      	b.n	800220e <UDSM_voidTiming+0x3a>
		 }
	 }
	 else
	 {
		 S3_time_counter=0;
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <UDSM_voidTiming+0xc8>)
 800220a:	2200      	movs	r2, #0
 800220c:	801a      	strh	r2, [r3, #0]
	 }
	 if(Security_time_start_count_Flag==1)
 800220e:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <UDSM_voidTiming+0xd0>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d112      	bne.n	800223c <UDSM_voidTiming+0x68>
	 {
		 Security_Level_Timeout_counter++;
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <UDSM_voidTiming+0xd4>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	3301      	adds	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <UDSM_voidTiming+0xd4>)
 8002222:	801a      	strh	r2, [r3, #0]
		 if(Security_Level_Timeout_counter<=1000000)
 8002224:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <UDSM_voidTiming+0xd4>)
 8002226:	881b      	ldrh	r3, [r3, #0]
		 {
			 Current_Level=Multi_Level;
 8002228:	4b20      	ldr	r3, [pc, #128]	; (80022ac <UDSM_voidTiming+0xd8>)
 800222a:	2205      	movs	r2, #5
 800222c:	701a      	strb	r2, [r3, #0]
			 Security_Level_Timeout_counter=0;
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <UDSM_voidTiming+0xd4>)
 8002230:	2200      	movs	r2, #0
 8002232:	801a      	strh	r2, [r3, #0]
			 Security_time_start_count_Flag=0;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <UDSM_voidTiming+0xd0>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e002      	b.n	8002242 <UDSM_voidTiming+0x6e>
			// MSYSTICK_voidDisable();
		 }
	 }
	 else
	 {
		 Security_Level_Timeout_counter=0;
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <UDSM_voidTiming+0xd4>)
 800223e:	2200      	movs	r2, #0
 8002240:	801a      	strh	r2, [r3, #0]
	 }

	 if(p2_time_start_count_Flag==1)
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <UDSM_voidTiming+0xdc>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d11f      	bne.n	800228a <UDSM_voidTiming+0xb6>
	 {
		 p2_Timeout_counter++;
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <UDSM_voidTiming+0xe0>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	3301      	adds	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <UDSM_voidTiming+0xe0>)
 8002256:	801a      	strh	r2, [r3, #0]
		 if(p2_Timeout_counter<=1000)
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <UDSM_voidTiming+0xe0>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002262:	d815      	bhi.n	8002290 <UDSM_voidTiming+0xbc>
		 {
			 u8 Pending_Frame[3];
			 Pending_Frame[0]=0X7F;
 8002264:	237f      	movs	r3, #127	; 0x7f
 8002266:	713b      	strb	r3, [r7, #4]
			 Pending_Frame[1]=My_Packet[0].SID;
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <UDSM_voidTiming+0xe4>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	717b      	strb	r3, [r7, #5]
			 Pending_Frame[2]=0X78;
 800226e:	2378      	movs	r3, #120	; 0x78
 8002270:	71bb      	strb	r3, [r7, #6]
			 CANTP_SendPacket(Pending_Frame,3);
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	2103      	movs	r1, #3
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fda0 	bl	8000dbc <CANTP_SendPacket>
			 p2_Timeout_counter=0;
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <UDSM_voidTiming+0xe0>)
 800227e:	2200      	movs	r2, #0
 8002280:	801a      	strh	r2, [r3, #0]
			 p2_time_start_count_Flag=0;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <UDSM_voidTiming+0xdc>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
	 }
	 else
	 {
		 p2_Timeout_counter=0;
	 }
}
 8002288:	e002      	b.n	8002290 <UDSM_voidTiming+0xbc>
		 p2_Timeout_counter=0;
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <UDSM_voidTiming+0xe0>)
 800228c:	2200      	movs	r2, #0
 800228e:	801a      	strh	r2, [r3, #0]
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000288 	.word	0x20000288
 800229c:	200002a6 	.word	0x200002a6
 80022a0:	2000003c 	.word	0x2000003c
 80022a4:	2000028c 	.word	0x2000028c
 80022a8:	200002aa 	.word	0x200002aa
 80022ac:	2000003d 	.word	0x2000003d
 80022b0:	20000289 	.word	0x20000289
 80022b4:	200002a8 	.word	0x200002a8
 80022b8:	20000244 	.word	0x20000244

080022bc <srand>:
 80022bc:	b538      	push	{r3, r4, r5, lr}
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <srand+0x44>)
 80022c0:	4604      	mov	r4, r0
 80022c2:	681d      	ldr	r5, [r3, #0]
 80022c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80022c6:	b9b3      	cbnz	r3, 80022f6 <srand+0x3a>
 80022c8:	2018      	movs	r0, #24
 80022ca:	f000 fa71 	bl	80027b0 <malloc>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6328      	str	r0, [r5, #48]	; 0x30
 80022d2:	b920      	cbnz	r0, 80022de <srand+0x22>
 80022d4:	2146      	movs	r1, #70	; 0x46
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <srand+0x48>)
 80022d8:	480b      	ldr	r0, [pc, #44]	; (8002308 <srand+0x4c>)
 80022da:	f000 fa03 	bl	80026e4 <__assert_func>
 80022de:	490b      	ldr	r1, [pc, #44]	; (800230c <srand+0x50>)
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <srand+0x54>)
 80022e2:	e9c0 1300 	strd	r1, r3, [r0]
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <srand+0x58>)
 80022e8:	2100      	movs	r1, #0
 80022ea:	6083      	str	r3, [r0, #8]
 80022ec:	230b      	movs	r3, #11
 80022ee:	8183      	strh	r3, [r0, #12]
 80022f0:	2001      	movs	r0, #1
 80022f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80022f6:	2200      	movs	r2, #0
 80022f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80022fa:	611c      	str	r4, [r3, #16]
 80022fc:	615a      	str	r2, [r3, #20]
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
 8002300:	20000098 	.word	0x20000098
 8002304:	08003658 	.word	0x08003658
 8002308:	0800366f 	.word	0x0800366f
 800230c:	abcd330e 	.word	0xabcd330e
 8002310:	e66d1234 	.word	0xe66d1234
 8002314:	0005deec 	.word	0x0005deec

08002318 <rand>:
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <rand+0x5c>)
 800231a:	b510      	push	{r4, lr}
 800231c:	681c      	ldr	r4, [r3, #0]
 800231e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002320:	b9b3      	cbnz	r3, 8002350 <rand+0x38>
 8002322:	2018      	movs	r0, #24
 8002324:	f000 fa44 	bl	80027b0 <malloc>
 8002328:	4602      	mov	r2, r0
 800232a:	6320      	str	r0, [r4, #48]	; 0x30
 800232c:	b920      	cbnz	r0, 8002338 <rand+0x20>
 800232e:	2152      	movs	r1, #82	; 0x52
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <rand+0x60>)
 8002332:	4812      	ldr	r0, [pc, #72]	; (800237c <rand+0x64>)
 8002334:	f000 f9d6 	bl	80026e4 <__assert_func>
 8002338:	4911      	ldr	r1, [pc, #68]	; (8002380 <rand+0x68>)
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <rand+0x6c>)
 800233c:	e9c0 1300 	strd	r1, r3, [r0]
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <rand+0x70>)
 8002342:	2100      	movs	r1, #0
 8002344:	6083      	str	r3, [r0, #8]
 8002346:	230b      	movs	r3, #11
 8002348:	8183      	strh	r3, [r0, #12]
 800234a:	2001      	movs	r0, #1
 800234c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002350:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002352:	480e      	ldr	r0, [pc, #56]	; (800238c <rand+0x74>)
 8002354:	690b      	ldr	r3, [r1, #16]
 8002356:	694c      	ldr	r4, [r1, #20]
 8002358:	4358      	muls	r0, r3
 800235a:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <rand+0x78>)
 800235c:	fb02 0004 	mla	r0, r2, r4, r0
 8002360:	fba3 3202 	umull	r3, r2, r3, r2
 8002364:	3301      	adds	r3, #1
 8002366:	eb40 0002 	adc.w	r0, r0, r2
 800236a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800236e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002372:	bd10      	pop	{r4, pc}
 8002374:	20000098 	.word	0x20000098
 8002378:	08003658 	.word	0x08003658
 800237c:	0800366f 	.word	0x0800366f
 8002380:	abcd330e 	.word	0xabcd330e
 8002384:	e66d1234 	.word	0xe66d1234
 8002388:	0005deec 	.word	0x0005deec
 800238c:	5851f42d 	.word	0x5851f42d
 8002390:	4c957f2d 	.word	0x4c957f2d

08002394 <std>:
 8002394:	2300      	movs	r3, #0
 8002396:	b510      	push	{r4, lr}
 8002398:	4604      	mov	r4, r0
 800239a:	e9c0 3300 	strd	r3, r3, [r0]
 800239e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023a2:	6083      	str	r3, [r0, #8]
 80023a4:	8181      	strh	r1, [r0, #12]
 80023a6:	6643      	str	r3, [r0, #100]	; 0x64
 80023a8:	81c2      	strh	r2, [r0, #14]
 80023aa:	6183      	str	r3, [r0, #24]
 80023ac:	4619      	mov	r1, r3
 80023ae:	2208      	movs	r2, #8
 80023b0:	305c      	adds	r0, #92	; 0x5c
 80023b2:	f000 f8f4 	bl	800259e <memset>
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <std+0x58>)
 80023b8:	6224      	str	r4, [r4, #32]
 80023ba:	6263      	str	r3, [r4, #36]	; 0x24
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <std+0x5c>)
 80023be:	62a3      	str	r3, [r4, #40]	; 0x28
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <std+0x60>)
 80023c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <std+0x64>)
 80023c6:	6323      	str	r3, [r4, #48]	; 0x30
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <std+0x68>)
 80023ca:	429c      	cmp	r4, r3
 80023cc:	d006      	beq.n	80023dc <std+0x48>
 80023ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80023d2:	4294      	cmp	r4, r2
 80023d4:	d002      	beq.n	80023dc <std+0x48>
 80023d6:	33d0      	adds	r3, #208	; 0xd0
 80023d8:	429c      	cmp	r4, r3
 80023da:	d105      	bne.n	80023e8 <std+0x54>
 80023dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80023e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023e4:	f000 b97a 	b.w	80026dc <__retarget_lock_init_recursive>
 80023e8:	bd10      	pop	{r4, pc}
 80023ea:	bf00      	nop
 80023ec:	08002519 	.word	0x08002519
 80023f0:	0800253b 	.word	0x0800253b
 80023f4:	08002573 	.word	0x08002573
 80023f8:	08002597 	.word	0x08002597
 80023fc:	200002b0 	.word	0x200002b0

08002400 <stdio_exit_handler>:
 8002400:	4a02      	ldr	r2, [pc, #8]	; (800240c <stdio_exit_handler+0xc>)
 8002402:	4903      	ldr	r1, [pc, #12]	; (8002410 <stdio_exit_handler+0x10>)
 8002404:	4803      	ldr	r0, [pc, #12]	; (8002414 <stdio_exit_handler+0x14>)
 8002406:	f000 b869 	b.w	80024dc <_fwalk_sglue>
 800240a:	bf00      	nop
 800240c:	20000040 	.word	0x20000040
 8002410:	08002a1d 	.word	0x08002a1d
 8002414:	2000004c 	.word	0x2000004c

08002418 <cleanup_stdio>:
 8002418:	6841      	ldr	r1, [r0, #4]
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <cleanup_stdio+0x34>)
 800241c:	b510      	push	{r4, lr}
 800241e:	4299      	cmp	r1, r3
 8002420:	4604      	mov	r4, r0
 8002422:	d001      	beq.n	8002428 <cleanup_stdio+0x10>
 8002424:	f000 fafa 	bl	8002a1c <_fflush_r>
 8002428:	68a1      	ldr	r1, [r4, #8]
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <cleanup_stdio+0x38>)
 800242c:	4299      	cmp	r1, r3
 800242e:	d002      	beq.n	8002436 <cleanup_stdio+0x1e>
 8002430:	4620      	mov	r0, r4
 8002432:	f000 faf3 	bl	8002a1c <_fflush_r>
 8002436:	68e1      	ldr	r1, [r4, #12]
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <cleanup_stdio+0x3c>)
 800243a:	4299      	cmp	r1, r3
 800243c:	d004      	beq.n	8002448 <cleanup_stdio+0x30>
 800243e:	4620      	mov	r0, r4
 8002440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002444:	f000 baea 	b.w	8002a1c <_fflush_r>
 8002448:	bd10      	pop	{r4, pc}
 800244a:	bf00      	nop
 800244c:	200002b0 	.word	0x200002b0
 8002450:	20000318 	.word	0x20000318
 8002454:	20000380 	.word	0x20000380

08002458 <global_stdio_init.part.0>:
 8002458:	b510      	push	{r4, lr}
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <global_stdio_init.part.0+0x30>)
 800245c:	4c0b      	ldr	r4, [pc, #44]	; (800248c <global_stdio_init.part.0+0x34>)
 800245e:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <global_stdio_init.part.0+0x38>)
 8002460:	4620      	mov	r0, r4
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	2104      	movs	r1, #4
 8002466:	2200      	movs	r2, #0
 8002468:	f7ff ff94 	bl	8002394 <std>
 800246c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002470:	2201      	movs	r2, #1
 8002472:	2109      	movs	r1, #9
 8002474:	f7ff ff8e 	bl	8002394 <std>
 8002478:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800247c:	2202      	movs	r2, #2
 800247e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002482:	2112      	movs	r1, #18
 8002484:	f7ff bf86 	b.w	8002394 <std>
 8002488:	200003e8 	.word	0x200003e8
 800248c:	200002b0 	.word	0x200002b0
 8002490:	08002401 	.word	0x08002401

08002494 <__sfp_lock_acquire>:
 8002494:	4801      	ldr	r0, [pc, #4]	; (800249c <__sfp_lock_acquire+0x8>)
 8002496:	f000 b922 	b.w	80026de <__retarget_lock_acquire_recursive>
 800249a:	bf00      	nop
 800249c:	200003f1 	.word	0x200003f1

080024a0 <__sfp_lock_release>:
 80024a0:	4801      	ldr	r0, [pc, #4]	; (80024a8 <__sfp_lock_release+0x8>)
 80024a2:	f000 b91d 	b.w	80026e0 <__retarget_lock_release_recursive>
 80024a6:	bf00      	nop
 80024a8:	200003f1 	.word	0x200003f1

080024ac <__sinit>:
 80024ac:	b510      	push	{r4, lr}
 80024ae:	4604      	mov	r4, r0
 80024b0:	f7ff fff0 	bl	8002494 <__sfp_lock_acquire>
 80024b4:	6a23      	ldr	r3, [r4, #32]
 80024b6:	b11b      	cbz	r3, 80024c0 <__sinit+0x14>
 80024b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024bc:	f7ff bff0 	b.w	80024a0 <__sfp_lock_release>
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <__sinit+0x28>)
 80024c2:	6223      	str	r3, [r4, #32]
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__sinit+0x2c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f5      	bne.n	80024b8 <__sinit+0xc>
 80024cc:	f7ff ffc4 	bl	8002458 <global_stdio_init.part.0>
 80024d0:	e7f2      	b.n	80024b8 <__sinit+0xc>
 80024d2:	bf00      	nop
 80024d4:	08002419 	.word	0x08002419
 80024d8:	200003e8 	.word	0x200003e8

080024dc <_fwalk_sglue>:
 80024dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024e0:	4607      	mov	r7, r0
 80024e2:	4688      	mov	r8, r1
 80024e4:	4614      	mov	r4, r2
 80024e6:	2600      	movs	r6, #0
 80024e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024ec:	f1b9 0901 	subs.w	r9, r9, #1
 80024f0:	d505      	bpl.n	80024fe <_fwalk_sglue+0x22>
 80024f2:	6824      	ldr	r4, [r4, #0]
 80024f4:	2c00      	cmp	r4, #0
 80024f6:	d1f7      	bne.n	80024e8 <_fwalk_sglue+0xc>
 80024f8:	4630      	mov	r0, r6
 80024fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024fe:	89ab      	ldrh	r3, [r5, #12]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d907      	bls.n	8002514 <_fwalk_sglue+0x38>
 8002504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002508:	3301      	adds	r3, #1
 800250a:	d003      	beq.n	8002514 <_fwalk_sglue+0x38>
 800250c:	4629      	mov	r1, r5
 800250e:	4638      	mov	r0, r7
 8002510:	47c0      	blx	r8
 8002512:	4306      	orrs	r6, r0
 8002514:	3568      	adds	r5, #104	; 0x68
 8002516:	e7e9      	b.n	80024ec <_fwalk_sglue+0x10>

08002518 <__sread>:
 8002518:	b510      	push	{r4, lr}
 800251a:	460c      	mov	r4, r1
 800251c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002520:	f000 f894 	bl	800264c <_read_r>
 8002524:	2800      	cmp	r0, #0
 8002526:	bfab      	itete	ge
 8002528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800252a:	89a3      	ldrhlt	r3, [r4, #12]
 800252c:	181b      	addge	r3, r3, r0
 800252e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002532:	bfac      	ite	ge
 8002534:	6563      	strge	r3, [r4, #84]	; 0x54
 8002536:	81a3      	strhlt	r3, [r4, #12]
 8002538:	bd10      	pop	{r4, pc}

0800253a <__swrite>:
 800253a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800253e:	461f      	mov	r7, r3
 8002540:	898b      	ldrh	r3, [r1, #12]
 8002542:	4605      	mov	r5, r0
 8002544:	05db      	lsls	r3, r3, #23
 8002546:	460c      	mov	r4, r1
 8002548:	4616      	mov	r6, r2
 800254a:	d505      	bpl.n	8002558 <__swrite+0x1e>
 800254c:	2302      	movs	r3, #2
 800254e:	2200      	movs	r2, #0
 8002550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002554:	f000 f868 	bl	8002628 <_lseek_r>
 8002558:	89a3      	ldrh	r3, [r4, #12]
 800255a:	4632      	mov	r2, r6
 800255c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002560:	81a3      	strh	r3, [r4, #12]
 8002562:	4628      	mov	r0, r5
 8002564:	463b      	mov	r3, r7
 8002566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800256a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800256e:	f000 b87f 	b.w	8002670 <_write_r>

08002572 <__sseek>:
 8002572:	b510      	push	{r4, lr}
 8002574:	460c      	mov	r4, r1
 8002576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800257a:	f000 f855 	bl	8002628 <_lseek_r>
 800257e:	1c43      	adds	r3, r0, #1
 8002580:	89a3      	ldrh	r3, [r4, #12]
 8002582:	bf15      	itete	ne
 8002584:	6560      	strne	r0, [r4, #84]	; 0x54
 8002586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800258a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800258e:	81a3      	strheq	r3, [r4, #12]
 8002590:	bf18      	it	ne
 8002592:	81a3      	strhne	r3, [r4, #12]
 8002594:	bd10      	pop	{r4, pc}

08002596 <__sclose>:
 8002596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800259a:	f000 b823 	b.w	80025e4 <_close_r>

0800259e <memset>:
 800259e:	4603      	mov	r3, r0
 80025a0:	4402      	add	r2, r0
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d100      	bne.n	80025a8 <memset+0xa>
 80025a6:	4770      	bx	lr
 80025a8:	f803 1b01 	strb.w	r1, [r3], #1
 80025ac:	e7f9      	b.n	80025a2 <memset+0x4>
	...

080025b0 <time>:
 80025b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <time+0x30>)
 80025b4:	4604      	mov	r4, r0
 80025b6:	2200      	movs	r2, #0
 80025b8:	4669      	mov	r1, sp
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	f000 f822 	bl	8002604 <_gettimeofday_r>
 80025c0:	2800      	cmp	r0, #0
 80025c2:	da05      	bge.n	80025d0 <time+0x20>
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	e9cd 2300 	strd	r2, r3, [sp]
 80025d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80025d4:	b10c      	cbz	r4, 80025da <time+0x2a>
 80025d6:	e9c4 0100 	strd	r0, r1, [r4]
 80025da:	b004      	add	sp, #16
 80025dc:	bd10      	pop	{r4, pc}
 80025de:	bf00      	nop
 80025e0:	20000098 	.word	0x20000098

080025e4 <_close_r>:
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	2300      	movs	r3, #0
 80025e8:	4d05      	ldr	r5, [pc, #20]	; (8002600 <_close_r+0x1c>)
 80025ea:	4604      	mov	r4, r0
 80025ec:	4608      	mov	r0, r1
 80025ee:	602b      	str	r3, [r5, #0]
 80025f0:	f000 fea6 	bl	8003340 <_close>
 80025f4:	1c43      	adds	r3, r0, #1
 80025f6:	d102      	bne.n	80025fe <_close_r+0x1a>
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	b103      	cbz	r3, 80025fe <_close_r+0x1a>
 80025fc:	6023      	str	r3, [r4, #0]
 80025fe:	bd38      	pop	{r3, r4, r5, pc}
 8002600:	200003ec 	.word	0x200003ec

08002604 <_gettimeofday_r>:
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	2300      	movs	r3, #0
 8002608:	4d06      	ldr	r5, [pc, #24]	; (8002624 <_gettimeofday_r+0x20>)
 800260a:	4604      	mov	r4, r0
 800260c:	4608      	mov	r0, r1
 800260e:	4611      	mov	r1, r2
 8002610:	602b      	str	r3, [r5, #0]
 8002612:	f000 fead 	bl	8003370 <_gettimeofday>
 8002616:	1c43      	adds	r3, r0, #1
 8002618:	d102      	bne.n	8002620 <_gettimeofday_r+0x1c>
 800261a:	682b      	ldr	r3, [r5, #0]
 800261c:	b103      	cbz	r3, 8002620 <_gettimeofday_r+0x1c>
 800261e:	6023      	str	r3, [r4, #0]
 8002620:	bd38      	pop	{r3, r4, r5, pc}
 8002622:	bf00      	nop
 8002624:	200003ec 	.word	0x200003ec

08002628 <_lseek_r>:
 8002628:	b538      	push	{r3, r4, r5, lr}
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	2200      	movs	r2, #0
 8002632:	4d05      	ldr	r5, [pc, #20]	; (8002648 <_lseek_r+0x20>)
 8002634:	602a      	str	r2, [r5, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	f000 feb2 	bl	80033a0 <_lseek>
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	d102      	bne.n	8002646 <_lseek_r+0x1e>
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	b103      	cbz	r3, 8002646 <_lseek_r+0x1e>
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	bd38      	pop	{r3, r4, r5, pc}
 8002648:	200003ec 	.word	0x200003ec

0800264c <_read_r>:
 800264c:	b538      	push	{r3, r4, r5, lr}
 800264e:	4604      	mov	r4, r0
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	2200      	movs	r2, #0
 8002656:	4d05      	ldr	r5, [pc, #20]	; (800266c <_read_r+0x20>)
 8002658:	602a      	str	r2, [r5, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	f000 fea8 	bl	80033b0 <_read>
 8002660:	1c43      	adds	r3, r0, #1
 8002662:	d102      	bne.n	800266a <_read_r+0x1e>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	b103      	cbz	r3, 800266a <_read_r+0x1e>
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	bd38      	pop	{r3, r4, r5, pc}
 800266c:	200003ec 	.word	0x200003ec

08002670 <_write_r>:
 8002670:	b538      	push	{r3, r4, r5, lr}
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	2200      	movs	r2, #0
 800267a:	4d05      	ldr	r5, [pc, #20]	; (8002690 <_write_r+0x20>)
 800267c:	602a      	str	r2, [r5, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	f000 feac 	bl	80033dc <_write>
 8002684:	1c43      	adds	r3, r0, #1
 8002686:	d102      	bne.n	800268e <_write_r+0x1e>
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	b103      	cbz	r3, 800268e <_write_r+0x1e>
 800268c:	6023      	str	r3, [r4, #0]
 800268e:	bd38      	pop	{r3, r4, r5, pc}
 8002690:	200003ec 	.word	0x200003ec

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	2600      	movs	r6, #0
 8002698:	4d0c      	ldr	r5, [pc, #48]	; (80026cc <__libc_init_array+0x38>)
 800269a:	4c0d      	ldr	r4, [pc, #52]	; (80026d0 <__libc_init_array+0x3c>)
 800269c:	1b64      	subs	r4, r4, r5
 800269e:	10a4      	asrs	r4, r4, #2
 80026a0:	42a6      	cmp	r6, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	f000 fea4 	bl	80033f0 <_init>
 80026a8:	2600      	movs	r6, #0
 80026aa:	4d0a      	ldr	r5, [pc, #40]	; (80026d4 <__libc_init_array+0x40>)
 80026ac:	4c0a      	ldr	r4, [pc, #40]	; (80026d8 <__libc_init_array+0x44>)
 80026ae:	1b64      	subs	r4, r4, r5
 80026b0:	10a4      	asrs	r4, r4, #2
 80026b2:	42a6      	cmp	r6, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026bc:	4798      	blx	r3
 80026be:	3601      	adds	r6, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c6:	4798      	blx	r3
 80026c8:	3601      	adds	r6, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	08003738 	.word	0x08003738
 80026d0:	08003738 	.word	0x08003738
 80026d4:	08003738 	.word	0x08003738
 80026d8:	0800373c 	.word	0x0800373c

080026dc <__retarget_lock_init_recursive>:
 80026dc:	4770      	bx	lr

080026de <__retarget_lock_acquire_recursive>:
 80026de:	4770      	bx	lr

080026e0 <__retarget_lock_release_recursive>:
 80026e0:	4770      	bx	lr
	...

080026e4 <__assert_func>:
 80026e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80026e6:	4614      	mov	r4, r2
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <__assert_func+0x2c>)
 80026ec:	4605      	mov	r5, r0
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68d8      	ldr	r0, [r3, #12]
 80026f2:	b14c      	cbz	r4, 8002708 <__assert_func+0x24>
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <__assert_func+0x30>)
 80026f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80026fa:	9100      	str	r1, [sp, #0]
 80026fc:	462b      	mov	r3, r5
 80026fe:	4906      	ldr	r1, [pc, #24]	; (8002718 <__assert_func+0x34>)
 8002700:	f000 f9b4 	bl	8002a6c <fiprintf>
 8002704:	f000 f9d4 	bl	8002ab0 <abort>
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__assert_func+0x38>)
 800270a:	461c      	mov	r4, r3
 800270c:	e7f3      	b.n	80026f6 <__assert_func+0x12>
 800270e:	bf00      	nop
 8002710:	20000098 	.word	0x20000098
 8002714:	080036c7 	.word	0x080036c7
 8002718:	080036d4 	.word	0x080036d4
 800271c:	08003702 	.word	0x08003702

08002720 <_free_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4605      	mov	r5, r0
 8002724:	2900      	cmp	r1, #0
 8002726:	d040      	beq.n	80027aa <_free_r+0x8a>
 8002728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800272c:	1f0c      	subs	r4, r1, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	bfb8      	it	lt
 8002732:	18e4      	addlt	r4, r4, r3
 8002734:	f000 f8e4 	bl	8002900 <__malloc_lock>
 8002738:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <_free_r+0x8c>)
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	b933      	cbnz	r3, 800274c <_free_r+0x2c>
 800273e:	6063      	str	r3, [r4, #4]
 8002740:	6014      	str	r4, [r2, #0]
 8002742:	4628      	mov	r0, r5
 8002744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002748:	f000 b8e0 	b.w	800290c <__malloc_unlock>
 800274c:	42a3      	cmp	r3, r4
 800274e:	d908      	bls.n	8002762 <_free_r+0x42>
 8002750:	6820      	ldr	r0, [r4, #0]
 8002752:	1821      	adds	r1, r4, r0
 8002754:	428b      	cmp	r3, r1
 8002756:	bf01      	itttt	eq
 8002758:	6819      	ldreq	r1, [r3, #0]
 800275a:	685b      	ldreq	r3, [r3, #4]
 800275c:	1809      	addeq	r1, r1, r0
 800275e:	6021      	streq	r1, [r4, #0]
 8002760:	e7ed      	b.n	800273e <_free_r+0x1e>
 8002762:	461a      	mov	r2, r3
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	b10b      	cbz	r3, 800276c <_free_r+0x4c>
 8002768:	42a3      	cmp	r3, r4
 800276a:	d9fa      	bls.n	8002762 <_free_r+0x42>
 800276c:	6811      	ldr	r1, [r2, #0]
 800276e:	1850      	adds	r0, r2, r1
 8002770:	42a0      	cmp	r0, r4
 8002772:	d10b      	bne.n	800278c <_free_r+0x6c>
 8002774:	6820      	ldr	r0, [r4, #0]
 8002776:	4401      	add	r1, r0
 8002778:	1850      	adds	r0, r2, r1
 800277a:	4283      	cmp	r3, r0
 800277c:	6011      	str	r1, [r2, #0]
 800277e:	d1e0      	bne.n	8002742 <_free_r+0x22>
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4408      	add	r0, r1
 8002786:	6010      	str	r0, [r2, #0]
 8002788:	6053      	str	r3, [r2, #4]
 800278a:	e7da      	b.n	8002742 <_free_r+0x22>
 800278c:	d902      	bls.n	8002794 <_free_r+0x74>
 800278e:	230c      	movs	r3, #12
 8002790:	602b      	str	r3, [r5, #0]
 8002792:	e7d6      	b.n	8002742 <_free_r+0x22>
 8002794:	6820      	ldr	r0, [r4, #0]
 8002796:	1821      	adds	r1, r4, r0
 8002798:	428b      	cmp	r3, r1
 800279a:	bf01      	itttt	eq
 800279c:	6819      	ldreq	r1, [r3, #0]
 800279e:	685b      	ldreq	r3, [r3, #4]
 80027a0:	1809      	addeq	r1, r1, r0
 80027a2:	6021      	streq	r1, [r4, #0]
 80027a4:	6063      	str	r3, [r4, #4]
 80027a6:	6054      	str	r4, [r2, #4]
 80027a8:	e7cb      	b.n	8002742 <_free_r+0x22>
 80027aa:	bd38      	pop	{r3, r4, r5, pc}
 80027ac:	200003f4 	.word	0x200003f4

080027b0 <malloc>:
 80027b0:	4b02      	ldr	r3, [pc, #8]	; (80027bc <malloc+0xc>)
 80027b2:	4601      	mov	r1, r0
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	f000 b823 	b.w	8002800 <_malloc_r>
 80027ba:	bf00      	nop
 80027bc:	20000098 	.word	0x20000098

080027c0 <sbrk_aligned>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	4e0e      	ldr	r6, [pc, #56]	; (80027fc <sbrk_aligned+0x3c>)
 80027c4:	460c      	mov	r4, r1
 80027c6:	6831      	ldr	r1, [r6, #0]
 80027c8:	4605      	mov	r5, r0
 80027ca:	b911      	cbnz	r1, 80027d2 <sbrk_aligned+0x12>
 80027cc:	f000 f960 	bl	8002a90 <_sbrk_r>
 80027d0:	6030      	str	r0, [r6, #0]
 80027d2:	4621      	mov	r1, r4
 80027d4:	4628      	mov	r0, r5
 80027d6:	f000 f95b 	bl	8002a90 <_sbrk_r>
 80027da:	1c43      	adds	r3, r0, #1
 80027dc:	d00a      	beq.n	80027f4 <sbrk_aligned+0x34>
 80027de:	1cc4      	adds	r4, r0, #3
 80027e0:	f024 0403 	bic.w	r4, r4, #3
 80027e4:	42a0      	cmp	r0, r4
 80027e6:	d007      	beq.n	80027f8 <sbrk_aligned+0x38>
 80027e8:	1a21      	subs	r1, r4, r0
 80027ea:	4628      	mov	r0, r5
 80027ec:	f000 f950 	bl	8002a90 <_sbrk_r>
 80027f0:	3001      	adds	r0, #1
 80027f2:	d101      	bne.n	80027f8 <sbrk_aligned+0x38>
 80027f4:	f04f 34ff 	mov.w	r4, #4294967295
 80027f8:	4620      	mov	r0, r4
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
 80027fc:	200003f8 	.word	0x200003f8

08002800 <_malloc_r>:
 8002800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002804:	1ccd      	adds	r5, r1, #3
 8002806:	f025 0503 	bic.w	r5, r5, #3
 800280a:	3508      	adds	r5, #8
 800280c:	2d0c      	cmp	r5, #12
 800280e:	bf38      	it	cc
 8002810:	250c      	movcc	r5, #12
 8002812:	2d00      	cmp	r5, #0
 8002814:	4607      	mov	r7, r0
 8002816:	db01      	blt.n	800281c <_malloc_r+0x1c>
 8002818:	42a9      	cmp	r1, r5
 800281a:	d905      	bls.n	8002828 <_malloc_r+0x28>
 800281c:	230c      	movs	r3, #12
 800281e:	2600      	movs	r6, #0
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	4630      	mov	r0, r6
 8002824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002828:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80028fc <_malloc_r+0xfc>
 800282c:	f000 f868 	bl	8002900 <__malloc_lock>
 8002830:	f8d8 3000 	ldr.w	r3, [r8]
 8002834:	461c      	mov	r4, r3
 8002836:	bb5c      	cbnz	r4, 8002890 <_malloc_r+0x90>
 8002838:	4629      	mov	r1, r5
 800283a:	4638      	mov	r0, r7
 800283c:	f7ff ffc0 	bl	80027c0 <sbrk_aligned>
 8002840:	1c43      	adds	r3, r0, #1
 8002842:	4604      	mov	r4, r0
 8002844:	d155      	bne.n	80028f2 <_malloc_r+0xf2>
 8002846:	f8d8 4000 	ldr.w	r4, [r8]
 800284a:	4626      	mov	r6, r4
 800284c:	2e00      	cmp	r6, #0
 800284e:	d145      	bne.n	80028dc <_malloc_r+0xdc>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d048      	beq.n	80028e6 <_malloc_r+0xe6>
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	4631      	mov	r1, r6
 8002858:	4638      	mov	r0, r7
 800285a:	eb04 0903 	add.w	r9, r4, r3
 800285e:	f000 f917 	bl	8002a90 <_sbrk_r>
 8002862:	4581      	cmp	r9, r0
 8002864:	d13f      	bne.n	80028e6 <_malloc_r+0xe6>
 8002866:	6821      	ldr	r1, [r4, #0]
 8002868:	4638      	mov	r0, r7
 800286a:	1a6d      	subs	r5, r5, r1
 800286c:	4629      	mov	r1, r5
 800286e:	f7ff ffa7 	bl	80027c0 <sbrk_aligned>
 8002872:	3001      	adds	r0, #1
 8002874:	d037      	beq.n	80028e6 <_malloc_r+0xe6>
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	442b      	add	r3, r5
 800287a:	6023      	str	r3, [r4, #0]
 800287c:	f8d8 3000 	ldr.w	r3, [r8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d038      	beq.n	80028f6 <_malloc_r+0xf6>
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	42a2      	cmp	r2, r4
 8002888:	d12b      	bne.n	80028e2 <_malloc_r+0xe2>
 800288a:	2200      	movs	r2, #0
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	e00f      	b.n	80028b0 <_malloc_r+0xb0>
 8002890:	6822      	ldr	r2, [r4, #0]
 8002892:	1b52      	subs	r2, r2, r5
 8002894:	d41f      	bmi.n	80028d6 <_malloc_r+0xd6>
 8002896:	2a0b      	cmp	r2, #11
 8002898:	d917      	bls.n	80028ca <_malloc_r+0xca>
 800289a:	1961      	adds	r1, r4, r5
 800289c:	42a3      	cmp	r3, r4
 800289e:	6025      	str	r5, [r4, #0]
 80028a0:	bf18      	it	ne
 80028a2:	6059      	strne	r1, [r3, #4]
 80028a4:	6863      	ldr	r3, [r4, #4]
 80028a6:	bf08      	it	eq
 80028a8:	f8c8 1000 	streq.w	r1, [r8]
 80028ac:	5162      	str	r2, [r4, r5]
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	4638      	mov	r0, r7
 80028b2:	f104 060b 	add.w	r6, r4, #11
 80028b6:	f000 f829 	bl	800290c <__malloc_unlock>
 80028ba:	f026 0607 	bic.w	r6, r6, #7
 80028be:	1d23      	adds	r3, r4, #4
 80028c0:	1af2      	subs	r2, r6, r3
 80028c2:	d0ae      	beq.n	8002822 <_malloc_r+0x22>
 80028c4:	1b9b      	subs	r3, r3, r6
 80028c6:	50a3      	str	r3, [r4, r2]
 80028c8:	e7ab      	b.n	8002822 <_malloc_r+0x22>
 80028ca:	42a3      	cmp	r3, r4
 80028cc:	6862      	ldr	r2, [r4, #4]
 80028ce:	d1dd      	bne.n	800288c <_malloc_r+0x8c>
 80028d0:	f8c8 2000 	str.w	r2, [r8]
 80028d4:	e7ec      	b.n	80028b0 <_malloc_r+0xb0>
 80028d6:	4623      	mov	r3, r4
 80028d8:	6864      	ldr	r4, [r4, #4]
 80028da:	e7ac      	b.n	8002836 <_malloc_r+0x36>
 80028dc:	4634      	mov	r4, r6
 80028de:	6876      	ldr	r6, [r6, #4]
 80028e0:	e7b4      	b.n	800284c <_malloc_r+0x4c>
 80028e2:	4613      	mov	r3, r2
 80028e4:	e7cc      	b.n	8002880 <_malloc_r+0x80>
 80028e6:	230c      	movs	r3, #12
 80028e8:	4638      	mov	r0, r7
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	f000 f80e 	bl	800290c <__malloc_unlock>
 80028f0:	e797      	b.n	8002822 <_malloc_r+0x22>
 80028f2:	6025      	str	r5, [r4, #0]
 80028f4:	e7dc      	b.n	80028b0 <_malloc_r+0xb0>
 80028f6:	605b      	str	r3, [r3, #4]
 80028f8:	deff      	udf	#255	; 0xff
 80028fa:	bf00      	nop
 80028fc:	200003f4 	.word	0x200003f4

08002900 <__malloc_lock>:
 8002900:	4801      	ldr	r0, [pc, #4]	; (8002908 <__malloc_lock+0x8>)
 8002902:	f7ff beec 	b.w	80026de <__retarget_lock_acquire_recursive>
 8002906:	bf00      	nop
 8002908:	200003f0 	.word	0x200003f0

0800290c <__malloc_unlock>:
 800290c:	4801      	ldr	r0, [pc, #4]	; (8002914 <__malloc_unlock+0x8>)
 800290e:	f7ff bee7 	b.w	80026e0 <__retarget_lock_release_recursive>
 8002912:	bf00      	nop
 8002914:	200003f0 	.word	0x200003f0

08002918 <__sflush_r>:
 8002918:	898a      	ldrh	r2, [r1, #12]
 800291a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291c:	4605      	mov	r5, r0
 800291e:	0710      	lsls	r0, r2, #28
 8002920:	460c      	mov	r4, r1
 8002922:	d457      	bmi.n	80029d4 <__sflush_r+0xbc>
 8002924:	684b      	ldr	r3, [r1, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	dc04      	bgt.n	8002934 <__sflush_r+0x1c>
 800292a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	dc01      	bgt.n	8002934 <__sflush_r+0x1c>
 8002930:	2000      	movs	r0, #0
 8002932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002936:	2e00      	cmp	r6, #0
 8002938:	d0fa      	beq.n	8002930 <__sflush_r+0x18>
 800293a:	2300      	movs	r3, #0
 800293c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002940:	682f      	ldr	r7, [r5, #0]
 8002942:	6a21      	ldr	r1, [r4, #32]
 8002944:	602b      	str	r3, [r5, #0]
 8002946:	d032      	beq.n	80029ae <__sflush_r+0x96>
 8002948:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800294a:	89a3      	ldrh	r3, [r4, #12]
 800294c:	075a      	lsls	r2, r3, #29
 800294e:	d505      	bpl.n	800295c <__sflush_r+0x44>
 8002950:	6863      	ldr	r3, [r4, #4]
 8002952:	1ac0      	subs	r0, r0, r3
 8002954:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002956:	b10b      	cbz	r3, 800295c <__sflush_r+0x44>
 8002958:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800295a:	1ac0      	subs	r0, r0, r3
 800295c:	2300      	movs	r3, #0
 800295e:	4602      	mov	r2, r0
 8002960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002962:	4628      	mov	r0, r5
 8002964:	6a21      	ldr	r1, [r4, #32]
 8002966:	47b0      	blx	r6
 8002968:	1c43      	adds	r3, r0, #1
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	d106      	bne.n	800297c <__sflush_r+0x64>
 800296e:	6829      	ldr	r1, [r5, #0]
 8002970:	291d      	cmp	r1, #29
 8002972:	d82b      	bhi.n	80029cc <__sflush_r+0xb4>
 8002974:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <__sflush_r+0x100>)
 8002976:	410a      	asrs	r2, r1
 8002978:	07d6      	lsls	r6, r2, #31
 800297a:	d427      	bmi.n	80029cc <__sflush_r+0xb4>
 800297c:	2200      	movs	r2, #0
 800297e:	6062      	str	r2, [r4, #4]
 8002980:	6922      	ldr	r2, [r4, #16]
 8002982:	04d9      	lsls	r1, r3, #19
 8002984:	6022      	str	r2, [r4, #0]
 8002986:	d504      	bpl.n	8002992 <__sflush_r+0x7a>
 8002988:	1c42      	adds	r2, r0, #1
 800298a:	d101      	bne.n	8002990 <__sflush_r+0x78>
 800298c:	682b      	ldr	r3, [r5, #0]
 800298e:	b903      	cbnz	r3, 8002992 <__sflush_r+0x7a>
 8002990:	6560      	str	r0, [r4, #84]	; 0x54
 8002992:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002994:	602f      	str	r7, [r5, #0]
 8002996:	2900      	cmp	r1, #0
 8002998:	d0ca      	beq.n	8002930 <__sflush_r+0x18>
 800299a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800299e:	4299      	cmp	r1, r3
 80029a0:	d002      	beq.n	80029a8 <__sflush_r+0x90>
 80029a2:	4628      	mov	r0, r5
 80029a4:	f7ff febc 	bl	8002720 <_free_r>
 80029a8:	2000      	movs	r0, #0
 80029aa:	6360      	str	r0, [r4, #52]	; 0x34
 80029ac:	e7c1      	b.n	8002932 <__sflush_r+0x1a>
 80029ae:	2301      	movs	r3, #1
 80029b0:	4628      	mov	r0, r5
 80029b2:	47b0      	blx	r6
 80029b4:	1c41      	adds	r1, r0, #1
 80029b6:	d1c8      	bne.n	800294a <__sflush_r+0x32>
 80029b8:	682b      	ldr	r3, [r5, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0c5      	beq.n	800294a <__sflush_r+0x32>
 80029be:	2b1d      	cmp	r3, #29
 80029c0:	d001      	beq.n	80029c6 <__sflush_r+0xae>
 80029c2:	2b16      	cmp	r3, #22
 80029c4:	d101      	bne.n	80029ca <__sflush_r+0xb2>
 80029c6:	602f      	str	r7, [r5, #0]
 80029c8:	e7b2      	b.n	8002930 <__sflush_r+0x18>
 80029ca:	89a3      	ldrh	r3, [r4, #12]
 80029cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d0:	81a3      	strh	r3, [r4, #12]
 80029d2:	e7ae      	b.n	8002932 <__sflush_r+0x1a>
 80029d4:	690f      	ldr	r7, [r1, #16]
 80029d6:	2f00      	cmp	r7, #0
 80029d8:	d0aa      	beq.n	8002930 <__sflush_r+0x18>
 80029da:	0793      	lsls	r3, r2, #30
 80029dc:	bf18      	it	ne
 80029de:	2300      	movne	r3, #0
 80029e0:	680e      	ldr	r6, [r1, #0]
 80029e2:	bf08      	it	eq
 80029e4:	694b      	ldreq	r3, [r1, #20]
 80029e6:	1bf6      	subs	r6, r6, r7
 80029e8:	600f      	str	r7, [r1, #0]
 80029ea:	608b      	str	r3, [r1, #8]
 80029ec:	2e00      	cmp	r6, #0
 80029ee:	dd9f      	ble.n	8002930 <__sflush_r+0x18>
 80029f0:	4633      	mov	r3, r6
 80029f2:	463a      	mov	r2, r7
 80029f4:	4628      	mov	r0, r5
 80029f6:	6a21      	ldr	r1, [r4, #32]
 80029f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80029fc:	47e0      	blx	ip
 80029fe:	2800      	cmp	r0, #0
 8002a00:	dc06      	bgt.n	8002a10 <__sflush_r+0xf8>
 8002a02:	89a3      	ldrh	r3, [r4, #12]
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a0c:	81a3      	strh	r3, [r4, #12]
 8002a0e:	e790      	b.n	8002932 <__sflush_r+0x1a>
 8002a10:	4407      	add	r7, r0
 8002a12:	1a36      	subs	r6, r6, r0
 8002a14:	e7ea      	b.n	80029ec <__sflush_r+0xd4>
 8002a16:	bf00      	nop
 8002a18:	dfbffffe 	.word	0xdfbffffe

08002a1c <_fflush_r>:
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	690b      	ldr	r3, [r1, #16]
 8002a20:	4605      	mov	r5, r0
 8002a22:	460c      	mov	r4, r1
 8002a24:	b913      	cbnz	r3, 8002a2c <_fflush_r+0x10>
 8002a26:	2500      	movs	r5, #0
 8002a28:	4628      	mov	r0, r5
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	b118      	cbz	r0, 8002a36 <_fflush_r+0x1a>
 8002a2e:	6a03      	ldr	r3, [r0, #32]
 8002a30:	b90b      	cbnz	r3, 8002a36 <_fflush_r+0x1a>
 8002a32:	f7ff fd3b 	bl	80024ac <__sinit>
 8002a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f3      	beq.n	8002a26 <_fflush_r+0xa>
 8002a3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a40:	07d0      	lsls	r0, r2, #31
 8002a42:	d404      	bmi.n	8002a4e <_fflush_r+0x32>
 8002a44:	0599      	lsls	r1, r3, #22
 8002a46:	d402      	bmi.n	8002a4e <_fflush_r+0x32>
 8002a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a4a:	f7ff fe48 	bl	80026de <__retarget_lock_acquire_recursive>
 8002a4e:	4628      	mov	r0, r5
 8002a50:	4621      	mov	r1, r4
 8002a52:	f7ff ff61 	bl	8002918 <__sflush_r>
 8002a56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a58:	4605      	mov	r5, r0
 8002a5a:	07da      	lsls	r2, r3, #31
 8002a5c:	d4e4      	bmi.n	8002a28 <_fflush_r+0xc>
 8002a5e:	89a3      	ldrh	r3, [r4, #12]
 8002a60:	059b      	lsls	r3, r3, #22
 8002a62:	d4e1      	bmi.n	8002a28 <_fflush_r+0xc>
 8002a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a66:	f7ff fe3b 	bl	80026e0 <__retarget_lock_release_recursive>
 8002a6a:	e7dd      	b.n	8002a28 <_fflush_r+0xc>

08002a6c <fiprintf>:
 8002a6c:	b40e      	push	{r1, r2, r3}
 8002a6e:	b503      	push	{r0, r1, lr}
 8002a70:	4601      	mov	r1, r0
 8002a72:	ab03      	add	r3, sp, #12
 8002a74:	4805      	ldr	r0, [pc, #20]	; (8002a8c <fiprintf+0x20>)
 8002a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a7a:	6800      	ldr	r0, [r0, #0]
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	f000 f845 	bl	8002b0c <_vfiprintf_r>
 8002a82:	b002      	add	sp, #8
 8002a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a88:	b003      	add	sp, #12
 8002a8a:	4770      	bx	lr
 8002a8c:	20000098 	.word	0x20000098

08002a90 <_sbrk_r>:
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	2300      	movs	r3, #0
 8002a94:	4d05      	ldr	r5, [pc, #20]	; (8002aac <_sbrk_r+0x1c>)
 8002a96:	4604      	mov	r4, r0
 8002a98:	4608      	mov	r0, r1
 8002a9a:	602b      	str	r3, [r5, #0]
 8002a9c:	f000 fc90 	bl	80033c0 <_sbrk>
 8002aa0:	1c43      	adds	r3, r0, #1
 8002aa2:	d102      	bne.n	8002aaa <_sbrk_r+0x1a>
 8002aa4:	682b      	ldr	r3, [r5, #0]
 8002aa6:	b103      	cbz	r3, 8002aaa <_sbrk_r+0x1a>
 8002aa8:	6023      	str	r3, [r4, #0]
 8002aaa:	bd38      	pop	{r3, r4, r5, pc}
 8002aac:	200003ec 	.word	0x200003ec

08002ab0 <abort>:
 8002ab0:	2006      	movs	r0, #6
 8002ab2:	b508      	push	{r3, lr}
 8002ab4:	f000 fb96 	bl	80031e4 <raise>
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f000 fc97 	bl	80033ec <_exit>

08002abe <__sfputc_r>:
 8002abe:	6893      	ldr	r3, [r2, #8]
 8002ac0:	b410      	push	{r4}
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	6093      	str	r3, [r2, #8]
 8002ac8:	da07      	bge.n	8002ada <__sfputc_r+0x1c>
 8002aca:	6994      	ldr	r4, [r2, #24]
 8002acc:	42a3      	cmp	r3, r4
 8002ace:	db01      	blt.n	8002ad4 <__sfputc_r+0x16>
 8002ad0:	290a      	cmp	r1, #10
 8002ad2:	d102      	bne.n	8002ada <__sfputc_r+0x1c>
 8002ad4:	bc10      	pop	{r4}
 8002ad6:	f000 bac7 	b.w	8003068 <__swbuf_r>
 8002ada:	6813      	ldr	r3, [r2, #0]
 8002adc:	1c58      	adds	r0, r3, #1
 8002ade:	6010      	str	r0, [r2, #0]
 8002ae0:	7019      	strb	r1, [r3, #0]
 8002ae2:	4608      	mov	r0, r1
 8002ae4:	bc10      	pop	{r4}
 8002ae6:	4770      	bx	lr

08002ae8 <__sfputs_r>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	4606      	mov	r6, r0
 8002aec:	460f      	mov	r7, r1
 8002aee:	4614      	mov	r4, r2
 8002af0:	18d5      	adds	r5, r2, r3
 8002af2:	42ac      	cmp	r4, r5
 8002af4:	d101      	bne.n	8002afa <__sfputs_r+0x12>
 8002af6:	2000      	movs	r0, #0
 8002af8:	e007      	b.n	8002b0a <__sfputs_r+0x22>
 8002afa:	463a      	mov	r2, r7
 8002afc:	4630      	mov	r0, r6
 8002afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b02:	f7ff ffdc 	bl	8002abe <__sfputc_r>
 8002b06:	1c43      	adds	r3, r0, #1
 8002b08:	d1f3      	bne.n	8002af2 <__sfputs_r+0xa>
 8002b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b0c <_vfiprintf_r>:
 8002b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b10:	460d      	mov	r5, r1
 8002b12:	4614      	mov	r4, r2
 8002b14:	4698      	mov	r8, r3
 8002b16:	4606      	mov	r6, r0
 8002b18:	b09d      	sub	sp, #116	; 0x74
 8002b1a:	b118      	cbz	r0, 8002b24 <_vfiprintf_r+0x18>
 8002b1c:	6a03      	ldr	r3, [r0, #32]
 8002b1e:	b90b      	cbnz	r3, 8002b24 <_vfiprintf_r+0x18>
 8002b20:	f7ff fcc4 	bl	80024ac <__sinit>
 8002b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b26:	07d9      	lsls	r1, r3, #31
 8002b28:	d405      	bmi.n	8002b36 <_vfiprintf_r+0x2a>
 8002b2a:	89ab      	ldrh	r3, [r5, #12]
 8002b2c:	059a      	lsls	r2, r3, #22
 8002b2e:	d402      	bmi.n	8002b36 <_vfiprintf_r+0x2a>
 8002b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b32:	f7ff fdd4 	bl	80026de <__retarget_lock_acquire_recursive>
 8002b36:	89ab      	ldrh	r3, [r5, #12]
 8002b38:	071b      	lsls	r3, r3, #28
 8002b3a:	d501      	bpl.n	8002b40 <_vfiprintf_r+0x34>
 8002b3c:	692b      	ldr	r3, [r5, #16]
 8002b3e:	b99b      	cbnz	r3, 8002b68 <_vfiprintf_r+0x5c>
 8002b40:	4629      	mov	r1, r5
 8002b42:	4630      	mov	r0, r6
 8002b44:	f000 face 	bl	80030e4 <__swsetup_r>
 8002b48:	b170      	cbz	r0, 8002b68 <_vfiprintf_r+0x5c>
 8002b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b4c:	07dc      	lsls	r4, r3, #31
 8002b4e:	d504      	bpl.n	8002b5a <_vfiprintf_r+0x4e>
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295
 8002b54:	b01d      	add	sp, #116	; 0x74
 8002b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b5a:	89ab      	ldrh	r3, [r5, #12]
 8002b5c:	0598      	lsls	r0, r3, #22
 8002b5e:	d4f7      	bmi.n	8002b50 <_vfiprintf_r+0x44>
 8002b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b62:	f7ff fdbd 	bl	80026e0 <__retarget_lock_release_recursive>
 8002b66:	e7f3      	b.n	8002b50 <_vfiprintf_r+0x44>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b72:	2330      	movs	r3, #48	; 0x30
 8002b74:	f04f 0901 	mov.w	r9, #1
 8002b78:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002d2c <_vfiprintf_r+0x220>
 8002b80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b84:	4623      	mov	r3, r4
 8002b86:	469a      	mov	sl, r3
 8002b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b8c:	b10a      	cbz	r2, 8002b92 <_vfiprintf_r+0x86>
 8002b8e:	2a25      	cmp	r2, #37	; 0x25
 8002b90:	d1f9      	bne.n	8002b86 <_vfiprintf_r+0x7a>
 8002b92:	ebba 0b04 	subs.w	fp, sl, r4
 8002b96:	d00b      	beq.n	8002bb0 <_vfiprintf_r+0xa4>
 8002b98:	465b      	mov	r3, fp
 8002b9a:	4622      	mov	r2, r4
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	4630      	mov	r0, r6
 8002ba0:	f7ff ffa2 	bl	8002ae8 <__sfputs_r>
 8002ba4:	3001      	adds	r0, #1
 8002ba6:	f000 80a9 	beq.w	8002cfc <_vfiprintf_r+0x1f0>
 8002baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bac:	445a      	add	r2, fp
 8002bae:	9209      	str	r2, [sp, #36]	; 0x24
 8002bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a1 	beq.w	8002cfc <_vfiprintf_r+0x1f0>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bc4:	f10a 0a01 	add.w	sl, sl, #1
 8002bc8:	9304      	str	r3, [sp, #16]
 8002bca:	9307      	str	r3, [sp, #28]
 8002bcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bd0:	931a      	str	r3, [sp, #104]	; 0x68
 8002bd2:	4654      	mov	r4, sl
 8002bd4:	2205      	movs	r2, #5
 8002bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bda:	4854      	ldr	r0, [pc, #336]	; (8002d2c <_vfiprintf_r+0x220>)
 8002bdc:	f000 fb1e 	bl	800321c <memchr>
 8002be0:	9a04      	ldr	r2, [sp, #16]
 8002be2:	b9d8      	cbnz	r0, 8002c1c <_vfiprintf_r+0x110>
 8002be4:	06d1      	lsls	r1, r2, #27
 8002be6:	bf44      	itt	mi
 8002be8:	2320      	movmi	r3, #32
 8002bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bee:	0713      	lsls	r3, r2, #28
 8002bf0:	bf44      	itt	mi
 8002bf2:	232b      	movmi	r3, #43	; 0x2b
 8002bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8002bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8002bfe:	d015      	beq.n	8002c2c <_vfiprintf_r+0x120>
 8002c00:	4654      	mov	r4, sl
 8002c02:	2000      	movs	r0, #0
 8002c04:	f04f 0c0a 	mov.w	ip, #10
 8002c08:	9a07      	ldr	r2, [sp, #28]
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c10:	3b30      	subs	r3, #48	; 0x30
 8002c12:	2b09      	cmp	r3, #9
 8002c14:	d94d      	bls.n	8002cb2 <_vfiprintf_r+0x1a6>
 8002c16:	b1b0      	cbz	r0, 8002c46 <_vfiprintf_r+0x13a>
 8002c18:	9207      	str	r2, [sp, #28]
 8002c1a:	e014      	b.n	8002c46 <_vfiprintf_r+0x13a>
 8002c1c:	eba0 0308 	sub.w	r3, r0, r8
 8002c20:	fa09 f303 	lsl.w	r3, r9, r3
 8002c24:	4313      	orrs	r3, r2
 8002c26:	46a2      	mov	sl, r4
 8002c28:	9304      	str	r3, [sp, #16]
 8002c2a:	e7d2      	b.n	8002bd2 <_vfiprintf_r+0xc6>
 8002c2c:	9b03      	ldr	r3, [sp, #12]
 8002c2e:	1d19      	adds	r1, r3, #4
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	9103      	str	r1, [sp, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bfbb      	ittet	lt
 8002c38:	425b      	neglt	r3, r3
 8002c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8002c3e:	9307      	strge	r3, [sp, #28]
 8002c40:	9307      	strlt	r3, [sp, #28]
 8002c42:	bfb8      	it	lt
 8002c44:	9204      	strlt	r2, [sp, #16]
 8002c46:	7823      	ldrb	r3, [r4, #0]
 8002c48:	2b2e      	cmp	r3, #46	; 0x2e
 8002c4a:	d10c      	bne.n	8002c66 <_vfiprintf_r+0x15a>
 8002c4c:	7863      	ldrb	r3, [r4, #1]
 8002c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c50:	d134      	bne.n	8002cbc <_vfiprintf_r+0x1b0>
 8002c52:	9b03      	ldr	r3, [sp, #12]
 8002c54:	3402      	adds	r4, #2
 8002c56:	1d1a      	adds	r2, r3, #4
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	9203      	str	r2, [sp, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bfb8      	it	lt
 8002c60:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c64:	9305      	str	r3, [sp, #20]
 8002c66:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002d30 <_vfiprintf_r+0x224>
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	4650      	mov	r0, sl
 8002c6e:	7821      	ldrb	r1, [r4, #0]
 8002c70:	f000 fad4 	bl	800321c <memchr>
 8002c74:	b138      	cbz	r0, 8002c86 <_vfiprintf_r+0x17a>
 8002c76:	2240      	movs	r2, #64	; 0x40
 8002c78:	9b04      	ldr	r3, [sp, #16]
 8002c7a:	eba0 000a 	sub.w	r0, r0, sl
 8002c7e:	4082      	lsls	r2, r0
 8002c80:	4313      	orrs	r3, r2
 8002c82:	3401      	adds	r4, #1
 8002c84:	9304      	str	r3, [sp, #16]
 8002c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c8a:	2206      	movs	r2, #6
 8002c8c:	4829      	ldr	r0, [pc, #164]	; (8002d34 <_vfiprintf_r+0x228>)
 8002c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c92:	f000 fac3 	bl	800321c <memchr>
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d03f      	beq.n	8002d1a <_vfiprintf_r+0x20e>
 8002c9a:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <_vfiprintf_r+0x22c>)
 8002c9c:	bb1b      	cbnz	r3, 8002ce6 <_vfiprintf_r+0x1da>
 8002c9e:	9b03      	ldr	r3, [sp, #12]
 8002ca0:	3307      	adds	r3, #7
 8002ca2:	f023 0307 	bic.w	r3, r3, #7
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	9303      	str	r3, [sp, #12]
 8002caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cac:	443b      	add	r3, r7
 8002cae:	9309      	str	r3, [sp, #36]	; 0x24
 8002cb0:	e768      	b.n	8002b84 <_vfiprintf_r+0x78>
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cba:	e7a6      	b.n	8002c0a <_vfiprintf_r+0xfe>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f04f 0c0a 	mov.w	ip, #10
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	3401      	adds	r4, #1
 8002cc6:	9305      	str	r3, [sp, #20]
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cce:	3a30      	subs	r2, #48	; 0x30
 8002cd0:	2a09      	cmp	r2, #9
 8002cd2:	d903      	bls.n	8002cdc <_vfiprintf_r+0x1d0>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0c6      	beq.n	8002c66 <_vfiprintf_r+0x15a>
 8002cd8:	9105      	str	r1, [sp, #20]
 8002cda:	e7c4      	b.n	8002c66 <_vfiprintf_r+0x15a>
 8002cdc:	4604      	mov	r4, r0
 8002cde:	2301      	movs	r3, #1
 8002ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ce4:	e7f0      	b.n	8002cc8 <_vfiprintf_r+0x1bc>
 8002ce6:	ab03      	add	r3, sp, #12
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	462a      	mov	r2, r5
 8002cec:	4630      	mov	r0, r6
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <_vfiprintf_r+0x230>)
 8002cf0:	a904      	add	r1, sp, #16
 8002cf2:	f3af 8000 	nop.w
 8002cf6:	4607      	mov	r7, r0
 8002cf8:	1c78      	adds	r0, r7, #1
 8002cfa:	d1d6      	bne.n	8002caa <_vfiprintf_r+0x19e>
 8002cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cfe:	07d9      	lsls	r1, r3, #31
 8002d00:	d405      	bmi.n	8002d0e <_vfiprintf_r+0x202>
 8002d02:	89ab      	ldrh	r3, [r5, #12]
 8002d04:	059a      	lsls	r2, r3, #22
 8002d06:	d402      	bmi.n	8002d0e <_vfiprintf_r+0x202>
 8002d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d0a:	f7ff fce9 	bl	80026e0 <__retarget_lock_release_recursive>
 8002d0e:	89ab      	ldrh	r3, [r5, #12]
 8002d10:	065b      	lsls	r3, r3, #25
 8002d12:	f53f af1d 	bmi.w	8002b50 <_vfiprintf_r+0x44>
 8002d16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d18:	e71c      	b.n	8002b54 <_vfiprintf_r+0x48>
 8002d1a:	ab03      	add	r3, sp, #12
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	462a      	mov	r2, r5
 8002d20:	4630      	mov	r0, r6
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <_vfiprintf_r+0x230>)
 8002d24:	a904      	add	r1, sp, #16
 8002d26:	f000 f87d 	bl	8002e24 <_printf_i>
 8002d2a:	e7e4      	b.n	8002cf6 <_vfiprintf_r+0x1ea>
 8002d2c:	08003703 	.word	0x08003703
 8002d30:	08003709 	.word	0x08003709
 8002d34:	0800370d 	.word	0x0800370d
 8002d38:	00000000 	.word	0x00000000
 8002d3c:	08002ae9 	.word	0x08002ae9

08002d40 <_printf_common>:
 8002d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d44:	4616      	mov	r6, r2
 8002d46:	4699      	mov	r9, r3
 8002d48:	688a      	ldr	r2, [r1, #8]
 8002d4a:	690b      	ldr	r3, [r1, #16]
 8002d4c:	4607      	mov	r7, r0
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	bfb8      	it	lt
 8002d52:	4613      	movlt	r3, r2
 8002d54:	6033      	str	r3, [r6, #0]
 8002d56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d60:	b10a      	cbz	r2, 8002d66 <_printf_common+0x26>
 8002d62:	3301      	adds	r3, #1
 8002d64:	6033      	str	r3, [r6, #0]
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	0699      	lsls	r1, r3, #26
 8002d6a:	bf42      	ittt	mi
 8002d6c:	6833      	ldrmi	r3, [r6, #0]
 8002d6e:	3302      	addmi	r3, #2
 8002d70:	6033      	strmi	r3, [r6, #0]
 8002d72:	6825      	ldr	r5, [r4, #0]
 8002d74:	f015 0506 	ands.w	r5, r5, #6
 8002d78:	d106      	bne.n	8002d88 <_printf_common+0x48>
 8002d7a:	f104 0a19 	add.w	sl, r4, #25
 8002d7e:	68e3      	ldr	r3, [r4, #12]
 8002d80:	6832      	ldr	r2, [r6, #0]
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	42ab      	cmp	r3, r5
 8002d86:	dc2b      	bgt.n	8002de0 <_printf_common+0xa0>
 8002d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d8c:	1e13      	subs	r3, r2, #0
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	bf18      	it	ne
 8002d92:	2301      	movne	r3, #1
 8002d94:	0692      	lsls	r2, r2, #26
 8002d96:	d430      	bmi.n	8002dfa <_printf_common+0xba>
 8002d98:	4649      	mov	r1, r9
 8002d9a:	4638      	mov	r0, r7
 8002d9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002da0:	47c0      	blx	r8
 8002da2:	3001      	adds	r0, #1
 8002da4:	d023      	beq.n	8002dee <_printf_common+0xae>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	6922      	ldr	r2, [r4, #16]
 8002daa:	f003 0306 	and.w	r3, r3, #6
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf14      	ite	ne
 8002db2:	2500      	movne	r5, #0
 8002db4:	6833      	ldreq	r3, [r6, #0]
 8002db6:	f04f 0600 	mov.w	r6, #0
 8002dba:	bf08      	it	eq
 8002dbc:	68e5      	ldreq	r5, [r4, #12]
 8002dbe:	f104 041a 	add.w	r4, r4, #26
 8002dc2:	bf08      	it	eq
 8002dc4:	1aed      	subeq	r5, r5, r3
 8002dc6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002dca:	bf08      	it	eq
 8002dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	bfc4      	itt	gt
 8002dd4:	1a9b      	subgt	r3, r3, r2
 8002dd6:	18ed      	addgt	r5, r5, r3
 8002dd8:	42b5      	cmp	r5, r6
 8002dda:	d11a      	bne.n	8002e12 <_printf_common+0xd2>
 8002ddc:	2000      	movs	r0, #0
 8002dde:	e008      	b.n	8002df2 <_printf_common+0xb2>
 8002de0:	2301      	movs	r3, #1
 8002de2:	4652      	mov	r2, sl
 8002de4:	4649      	mov	r1, r9
 8002de6:	4638      	mov	r0, r7
 8002de8:	47c0      	blx	r8
 8002dea:	3001      	adds	r0, #1
 8002dec:	d103      	bne.n	8002df6 <_printf_common+0xb6>
 8002dee:	f04f 30ff 	mov.w	r0, #4294967295
 8002df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002df6:	3501      	adds	r5, #1
 8002df8:	e7c1      	b.n	8002d7e <_printf_common+0x3e>
 8002dfa:	2030      	movs	r0, #48	; 0x30
 8002dfc:	18e1      	adds	r1, r4, r3
 8002dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e08:	4422      	add	r2, r4
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e10:	e7c2      	b.n	8002d98 <_printf_common+0x58>
 8002e12:	2301      	movs	r3, #1
 8002e14:	4622      	mov	r2, r4
 8002e16:	4649      	mov	r1, r9
 8002e18:	4638      	mov	r0, r7
 8002e1a:	47c0      	blx	r8
 8002e1c:	3001      	adds	r0, #1
 8002e1e:	d0e6      	beq.n	8002dee <_printf_common+0xae>
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7d9      	b.n	8002dd8 <_printf_common+0x98>

08002e24 <_printf_i>:
 8002e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e28:	7e0f      	ldrb	r7, [r1, #24]
 8002e2a:	4691      	mov	r9, r2
 8002e2c:	2f78      	cmp	r7, #120	; 0x78
 8002e2e:	4680      	mov	r8, r0
 8002e30:	460c      	mov	r4, r1
 8002e32:	469a      	mov	sl, r3
 8002e34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e3a:	d807      	bhi.n	8002e4c <_printf_i+0x28>
 8002e3c:	2f62      	cmp	r7, #98	; 0x62
 8002e3e:	d80a      	bhi.n	8002e56 <_printf_i+0x32>
 8002e40:	2f00      	cmp	r7, #0
 8002e42:	f000 80d5 	beq.w	8002ff0 <_printf_i+0x1cc>
 8002e46:	2f58      	cmp	r7, #88	; 0x58
 8002e48:	f000 80c1 	beq.w	8002fce <_printf_i+0x1aa>
 8002e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e54:	e03a      	b.n	8002ecc <_printf_i+0xa8>
 8002e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e5a:	2b15      	cmp	r3, #21
 8002e5c:	d8f6      	bhi.n	8002e4c <_printf_i+0x28>
 8002e5e:	a101      	add	r1, pc, #4	; (adr r1, 8002e64 <_printf_i+0x40>)
 8002e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e64:	08002ebd 	.word	0x08002ebd
 8002e68:	08002ed1 	.word	0x08002ed1
 8002e6c:	08002e4d 	.word	0x08002e4d
 8002e70:	08002e4d 	.word	0x08002e4d
 8002e74:	08002e4d 	.word	0x08002e4d
 8002e78:	08002e4d 	.word	0x08002e4d
 8002e7c:	08002ed1 	.word	0x08002ed1
 8002e80:	08002e4d 	.word	0x08002e4d
 8002e84:	08002e4d 	.word	0x08002e4d
 8002e88:	08002e4d 	.word	0x08002e4d
 8002e8c:	08002e4d 	.word	0x08002e4d
 8002e90:	08002fd7 	.word	0x08002fd7
 8002e94:	08002efd 	.word	0x08002efd
 8002e98:	08002f91 	.word	0x08002f91
 8002e9c:	08002e4d 	.word	0x08002e4d
 8002ea0:	08002e4d 	.word	0x08002e4d
 8002ea4:	08002ff9 	.word	0x08002ff9
 8002ea8:	08002e4d 	.word	0x08002e4d
 8002eac:	08002efd 	.word	0x08002efd
 8002eb0:	08002e4d 	.word	0x08002e4d
 8002eb4:	08002e4d 	.word	0x08002e4d
 8002eb8:	08002f99 	.word	0x08002f99
 8002ebc:	682b      	ldr	r3, [r5, #0]
 8002ebe:	1d1a      	adds	r2, r3, #4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	602a      	str	r2, [r5, #0]
 8002ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0a0      	b.n	8003012 <_printf_i+0x1ee>
 8002ed0:	6820      	ldr	r0, [r4, #0]
 8002ed2:	682b      	ldr	r3, [r5, #0]
 8002ed4:	0607      	lsls	r7, r0, #24
 8002ed6:	f103 0104 	add.w	r1, r3, #4
 8002eda:	6029      	str	r1, [r5, #0]
 8002edc:	d501      	bpl.n	8002ee2 <_printf_i+0xbe>
 8002ede:	681e      	ldr	r6, [r3, #0]
 8002ee0:	e003      	b.n	8002eea <_printf_i+0xc6>
 8002ee2:	0646      	lsls	r6, r0, #25
 8002ee4:	d5fb      	bpl.n	8002ede <_printf_i+0xba>
 8002ee6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002eea:	2e00      	cmp	r6, #0
 8002eec:	da03      	bge.n	8002ef6 <_printf_i+0xd2>
 8002eee:	232d      	movs	r3, #45	; 0x2d
 8002ef0:	4276      	negs	r6, r6
 8002ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ef6:	230a      	movs	r3, #10
 8002ef8:	4859      	ldr	r0, [pc, #356]	; (8003060 <_printf_i+0x23c>)
 8002efa:	e012      	b.n	8002f22 <_printf_i+0xfe>
 8002efc:	682b      	ldr	r3, [r5, #0]
 8002efe:	6820      	ldr	r0, [r4, #0]
 8002f00:	1d19      	adds	r1, r3, #4
 8002f02:	6029      	str	r1, [r5, #0]
 8002f04:	0605      	lsls	r5, r0, #24
 8002f06:	d501      	bpl.n	8002f0c <_printf_i+0xe8>
 8002f08:	681e      	ldr	r6, [r3, #0]
 8002f0a:	e002      	b.n	8002f12 <_printf_i+0xee>
 8002f0c:	0641      	lsls	r1, r0, #25
 8002f0e:	d5fb      	bpl.n	8002f08 <_printf_i+0xe4>
 8002f10:	881e      	ldrh	r6, [r3, #0]
 8002f12:	2f6f      	cmp	r7, #111	; 0x6f
 8002f14:	bf0c      	ite	eq
 8002f16:	2308      	moveq	r3, #8
 8002f18:	230a      	movne	r3, #10
 8002f1a:	4851      	ldr	r0, [pc, #324]	; (8003060 <_printf_i+0x23c>)
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f22:	6865      	ldr	r5, [r4, #4]
 8002f24:	2d00      	cmp	r5, #0
 8002f26:	bfa8      	it	ge
 8002f28:	6821      	ldrge	r1, [r4, #0]
 8002f2a:	60a5      	str	r5, [r4, #8]
 8002f2c:	bfa4      	itt	ge
 8002f2e:	f021 0104 	bicge.w	r1, r1, #4
 8002f32:	6021      	strge	r1, [r4, #0]
 8002f34:	b90e      	cbnz	r6, 8002f3a <_printf_i+0x116>
 8002f36:	2d00      	cmp	r5, #0
 8002f38:	d04b      	beq.n	8002fd2 <_printf_i+0x1ae>
 8002f3a:	4615      	mov	r5, r2
 8002f3c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f40:	fb03 6711 	mls	r7, r3, r1, r6
 8002f44:	5dc7      	ldrb	r7, [r0, r7]
 8002f46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f4a:	4637      	mov	r7, r6
 8002f4c:	42bb      	cmp	r3, r7
 8002f4e:	460e      	mov	r6, r1
 8002f50:	d9f4      	bls.n	8002f3c <_printf_i+0x118>
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d10b      	bne.n	8002f6e <_printf_i+0x14a>
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	07de      	lsls	r6, r3, #31
 8002f5a:	d508      	bpl.n	8002f6e <_printf_i+0x14a>
 8002f5c:	6923      	ldr	r3, [r4, #16]
 8002f5e:	6861      	ldr	r1, [r4, #4]
 8002f60:	4299      	cmp	r1, r3
 8002f62:	bfde      	ittt	le
 8002f64:	2330      	movle	r3, #48	; 0x30
 8002f66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f6e:	1b52      	subs	r2, r2, r5
 8002f70:	6122      	str	r2, [r4, #16]
 8002f72:	464b      	mov	r3, r9
 8002f74:	4621      	mov	r1, r4
 8002f76:	4640      	mov	r0, r8
 8002f78:	f8cd a000 	str.w	sl, [sp]
 8002f7c:	aa03      	add	r2, sp, #12
 8002f7e:	f7ff fedf 	bl	8002d40 <_printf_common>
 8002f82:	3001      	adds	r0, #1
 8002f84:	d14a      	bne.n	800301c <_printf_i+0x1f8>
 8002f86:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8a:	b004      	add	sp, #16
 8002f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	6023      	str	r3, [r4, #0]
 8002f98:	2778      	movs	r7, #120	; 0x78
 8002f9a:	4832      	ldr	r0, [pc, #200]	; (8003064 <_printf_i+0x240>)
 8002f9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	6829      	ldr	r1, [r5, #0]
 8002fa4:	061f      	lsls	r7, r3, #24
 8002fa6:	f851 6b04 	ldr.w	r6, [r1], #4
 8002faa:	d402      	bmi.n	8002fb2 <_printf_i+0x18e>
 8002fac:	065f      	lsls	r7, r3, #25
 8002fae:	bf48      	it	mi
 8002fb0:	b2b6      	uxthmi	r6, r6
 8002fb2:	07df      	lsls	r7, r3, #31
 8002fb4:	bf48      	it	mi
 8002fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8002fba:	6029      	str	r1, [r5, #0]
 8002fbc:	bf48      	it	mi
 8002fbe:	6023      	strmi	r3, [r4, #0]
 8002fc0:	b91e      	cbnz	r6, 8002fca <_printf_i+0x1a6>
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	f023 0320 	bic.w	r3, r3, #32
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	2310      	movs	r3, #16
 8002fcc:	e7a6      	b.n	8002f1c <_printf_i+0xf8>
 8002fce:	4824      	ldr	r0, [pc, #144]	; (8003060 <_printf_i+0x23c>)
 8002fd0:	e7e4      	b.n	8002f9c <_printf_i+0x178>
 8002fd2:	4615      	mov	r5, r2
 8002fd4:	e7bd      	b.n	8002f52 <_printf_i+0x12e>
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	6826      	ldr	r6, [r4, #0]
 8002fda:	1d18      	adds	r0, r3, #4
 8002fdc:	6961      	ldr	r1, [r4, #20]
 8002fde:	6028      	str	r0, [r5, #0]
 8002fe0:	0635      	lsls	r5, r6, #24
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	d501      	bpl.n	8002fea <_printf_i+0x1c6>
 8002fe6:	6019      	str	r1, [r3, #0]
 8002fe8:	e002      	b.n	8002ff0 <_printf_i+0x1cc>
 8002fea:	0670      	lsls	r0, r6, #25
 8002fec:	d5fb      	bpl.n	8002fe6 <_printf_i+0x1c2>
 8002fee:	8019      	strh	r1, [r3, #0]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4615      	mov	r5, r2
 8002ff4:	6123      	str	r3, [r4, #16]
 8002ff6:	e7bc      	b.n	8002f72 <_printf_i+0x14e>
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	1d1a      	adds	r2, r3, #4
 8002ffe:	602a      	str	r2, [r5, #0]
 8003000:	681d      	ldr	r5, [r3, #0]
 8003002:	6862      	ldr	r2, [r4, #4]
 8003004:	4628      	mov	r0, r5
 8003006:	f000 f909 	bl	800321c <memchr>
 800300a:	b108      	cbz	r0, 8003010 <_printf_i+0x1ec>
 800300c:	1b40      	subs	r0, r0, r5
 800300e:	6060      	str	r0, [r4, #4]
 8003010:	6863      	ldr	r3, [r4, #4]
 8003012:	6123      	str	r3, [r4, #16]
 8003014:	2300      	movs	r3, #0
 8003016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800301a:	e7aa      	b.n	8002f72 <_printf_i+0x14e>
 800301c:	462a      	mov	r2, r5
 800301e:	4649      	mov	r1, r9
 8003020:	4640      	mov	r0, r8
 8003022:	6923      	ldr	r3, [r4, #16]
 8003024:	47d0      	blx	sl
 8003026:	3001      	adds	r0, #1
 8003028:	d0ad      	beq.n	8002f86 <_printf_i+0x162>
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	079b      	lsls	r3, r3, #30
 800302e:	d413      	bmi.n	8003058 <_printf_i+0x234>
 8003030:	68e0      	ldr	r0, [r4, #12]
 8003032:	9b03      	ldr	r3, [sp, #12]
 8003034:	4298      	cmp	r0, r3
 8003036:	bfb8      	it	lt
 8003038:	4618      	movlt	r0, r3
 800303a:	e7a6      	b.n	8002f8a <_printf_i+0x166>
 800303c:	2301      	movs	r3, #1
 800303e:	4632      	mov	r2, r6
 8003040:	4649      	mov	r1, r9
 8003042:	4640      	mov	r0, r8
 8003044:	47d0      	blx	sl
 8003046:	3001      	adds	r0, #1
 8003048:	d09d      	beq.n	8002f86 <_printf_i+0x162>
 800304a:	3501      	adds	r5, #1
 800304c:	68e3      	ldr	r3, [r4, #12]
 800304e:	9903      	ldr	r1, [sp, #12]
 8003050:	1a5b      	subs	r3, r3, r1
 8003052:	42ab      	cmp	r3, r5
 8003054:	dcf2      	bgt.n	800303c <_printf_i+0x218>
 8003056:	e7eb      	b.n	8003030 <_printf_i+0x20c>
 8003058:	2500      	movs	r5, #0
 800305a:	f104 0619 	add.w	r6, r4, #25
 800305e:	e7f5      	b.n	800304c <_printf_i+0x228>
 8003060:	08003714 	.word	0x08003714
 8003064:	08003725 	.word	0x08003725

08003068 <__swbuf_r>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	460e      	mov	r6, r1
 800306c:	4614      	mov	r4, r2
 800306e:	4605      	mov	r5, r0
 8003070:	b118      	cbz	r0, 800307a <__swbuf_r+0x12>
 8003072:	6a03      	ldr	r3, [r0, #32]
 8003074:	b90b      	cbnz	r3, 800307a <__swbuf_r+0x12>
 8003076:	f7ff fa19 	bl	80024ac <__sinit>
 800307a:	69a3      	ldr	r3, [r4, #24]
 800307c:	60a3      	str	r3, [r4, #8]
 800307e:	89a3      	ldrh	r3, [r4, #12]
 8003080:	071a      	lsls	r2, r3, #28
 8003082:	d525      	bpl.n	80030d0 <__swbuf_r+0x68>
 8003084:	6923      	ldr	r3, [r4, #16]
 8003086:	b31b      	cbz	r3, 80030d0 <__swbuf_r+0x68>
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	6922      	ldr	r2, [r4, #16]
 800308c:	b2f6      	uxtb	r6, r6
 800308e:	1a98      	subs	r0, r3, r2
 8003090:	6963      	ldr	r3, [r4, #20]
 8003092:	4637      	mov	r7, r6
 8003094:	4283      	cmp	r3, r0
 8003096:	dc04      	bgt.n	80030a2 <__swbuf_r+0x3a>
 8003098:	4621      	mov	r1, r4
 800309a:	4628      	mov	r0, r5
 800309c:	f7ff fcbe 	bl	8002a1c <_fflush_r>
 80030a0:	b9e0      	cbnz	r0, 80030dc <__swbuf_r+0x74>
 80030a2:	68a3      	ldr	r3, [r4, #8]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	60a3      	str	r3, [r4, #8]
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	6022      	str	r2, [r4, #0]
 80030ae:	701e      	strb	r6, [r3, #0]
 80030b0:	6962      	ldr	r2, [r4, #20]
 80030b2:	1c43      	adds	r3, r0, #1
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d004      	beq.n	80030c2 <__swbuf_r+0x5a>
 80030b8:	89a3      	ldrh	r3, [r4, #12]
 80030ba:	07db      	lsls	r3, r3, #31
 80030bc:	d506      	bpl.n	80030cc <__swbuf_r+0x64>
 80030be:	2e0a      	cmp	r6, #10
 80030c0:	d104      	bne.n	80030cc <__swbuf_r+0x64>
 80030c2:	4621      	mov	r1, r4
 80030c4:	4628      	mov	r0, r5
 80030c6:	f7ff fca9 	bl	8002a1c <_fflush_r>
 80030ca:	b938      	cbnz	r0, 80030dc <__swbuf_r+0x74>
 80030cc:	4638      	mov	r0, r7
 80030ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030d0:	4621      	mov	r1, r4
 80030d2:	4628      	mov	r0, r5
 80030d4:	f000 f806 	bl	80030e4 <__swsetup_r>
 80030d8:	2800      	cmp	r0, #0
 80030da:	d0d5      	beq.n	8003088 <__swbuf_r+0x20>
 80030dc:	f04f 37ff 	mov.w	r7, #4294967295
 80030e0:	e7f4      	b.n	80030cc <__swbuf_r+0x64>
	...

080030e4 <__swsetup_r>:
 80030e4:	b538      	push	{r3, r4, r5, lr}
 80030e6:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <__swsetup_r+0xac>)
 80030e8:	4605      	mov	r5, r0
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	460c      	mov	r4, r1
 80030ee:	b118      	cbz	r0, 80030f8 <__swsetup_r+0x14>
 80030f0:	6a03      	ldr	r3, [r0, #32]
 80030f2:	b90b      	cbnz	r3, 80030f8 <__swsetup_r+0x14>
 80030f4:	f7ff f9da 	bl	80024ac <__sinit>
 80030f8:	89a3      	ldrh	r3, [r4, #12]
 80030fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030fe:	0718      	lsls	r0, r3, #28
 8003100:	d422      	bmi.n	8003148 <__swsetup_r+0x64>
 8003102:	06d9      	lsls	r1, r3, #27
 8003104:	d407      	bmi.n	8003116 <__swsetup_r+0x32>
 8003106:	2309      	movs	r3, #9
 8003108:	602b      	str	r3, [r5, #0]
 800310a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800310e:	f04f 30ff 	mov.w	r0, #4294967295
 8003112:	81a3      	strh	r3, [r4, #12]
 8003114:	e034      	b.n	8003180 <__swsetup_r+0x9c>
 8003116:	0758      	lsls	r0, r3, #29
 8003118:	d512      	bpl.n	8003140 <__swsetup_r+0x5c>
 800311a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800311c:	b141      	cbz	r1, 8003130 <__swsetup_r+0x4c>
 800311e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003122:	4299      	cmp	r1, r3
 8003124:	d002      	beq.n	800312c <__swsetup_r+0x48>
 8003126:	4628      	mov	r0, r5
 8003128:	f7ff fafa 	bl	8002720 <_free_r>
 800312c:	2300      	movs	r3, #0
 800312e:	6363      	str	r3, [r4, #52]	; 0x34
 8003130:	89a3      	ldrh	r3, [r4, #12]
 8003132:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003136:	81a3      	strh	r3, [r4, #12]
 8003138:	2300      	movs	r3, #0
 800313a:	6063      	str	r3, [r4, #4]
 800313c:	6923      	ldr	r3, [r4, #16]
 800313e:	6023      	str	r3, [r4, #0]
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	f043 0308 	orr.w	r3, r3, #8
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	6923      	ldr	r3, [r4, #16]
 800314a:	b94b      	cbnz	r3, 8003160 <__swsetup_r+0x7c>
 800314c:	89a3      	ldrh	r3, [r4, #12]
 800314e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003156:	d003      	beq.n	8003160 <__swsetup_r+0x7c>
 8003158:	4621      	mov	r1, r4
 800315a:	4628      	mov	r0, r5
 800315c:	f000 f891 	bl	8003282 <__smakebuf_r>
 8003160:	89a0      	ldrh	r0, [r4, #12]
 8003162:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003166:	f010 0301 	ands.w	r3, r0, #1
 800316a:	d00a      	beq.n	8003182 <__swsetup_r+0x9e>
 800316c:	2300      	movs	r3, #0
 800316e:	60a3      	str	r3, [r4, #8]
 8003170:	6963      	ldr	r3, [r4, #20]
 8003172:	425b      	negs	r3, r3
 8003174:	61a3      	str	r3, [r4, #24]
 8003176:	6923      	ldr	r3, [r4, #16]
 8003178:	b943      	cbnz	r3, 800318c <__swsetup_r+0xa8>
 800317a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800317e:	d1c4      	bne.n	800310a <__swsetup_r+0x26>
 8003180:	bd38      	pop	{r3, r4, r5, pc}
 8003182:	0781      	lsls	r1, r0, #30
 8003184:	bf58      	it	pl
 8003186:	6963      	ldrpl	r3, [r4, #20]
 8003188:	60a3      	str	r3, [r4, #8]
 800318a:	e7f4      	b.n	8003176 <__swsetup_r+0x92>
 800318c:	2000      	movs	r0, #0
 800318e:	e7f7      	b.n	8003180 <__swsetup_r+0x9c>
 8003190:	20000098 	.word	0x20000098

08003194 <_raise_r>:
 8003194:	291f      	cmp	r1, #31
 8003196:	b538      	push	{r3, r4, r5, lr}
 8003198:	4604      	mov	r4, r0
 800319a:	460d      	mov	r5, r1
 800319c:	d904      	bls.n	80031a8 <_raise_r+0x14>
 800319e:	2316      	movs	r3, #22
 80031a0:	6003      	str	r3, [r0, #0]
 80031a2:	f04f 30ff 	mov.w	r0, #4294967295
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
 80031a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80031aa:	b112      	cbz	r2, 80031b2 <_raise_r+0x1e>
 80031ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80031b0:	b94b      	cbnz	r3, 80031c6 <_raise_r+0x32>
 80031b2:	4620      	mov	r0, r4
 80031b4:	f000 f830 	bl	8003218 <_getpid_r>
 80031b8:	462a      	mov	r2, r5
 80031ba:	4601      	mov	r1, r0
 80031bc:	4620      	mov	r0, r4
 80031be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031c2:	f000 b817 	b.w	80031f4 <_kill_r>
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d00a      	beq.n	80031e0 <_raise_r+0x4c>
 80031ca:	1c59      	adds	r1, r3, #1
 80031cc:	d103      	bne.n	80031d6 <_raise_r+0x42>
 80031ce:	2316      	movs	r3, #22
 80031d0:	6003      	str	r3, [r0, #0]
 80031d2:	2001      	movs	r0, #1
 80031d4:	e7e7      	b.n	80031a6 <_raise_r+0x12>
 80031d6:	2400      	movs	r4, #0
 80031d8:	4628      	mov	r0, r5
 80031da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80031de:	4798      	blx	r3
 80031e0:	2000      	movs	r0, #0
 80031e2:	e7e0      	b.n	80031a6 <_raise_r+0x12>

080031e4 <raise>:
 80031e4:	4b02      	ldr	r3, [pc, #8]	; (80031f0 <raise+0xc>)
 80031e6:	4601      	mov	r1, r0
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	f7ff bfd3 	b.w	8003194 <_raise_r>
 80031ee:	bf00      	nop
 80031f0:	20000098 	.word	0x20000098

080031f4 <_kill_r>:
 80031f4:	b538      	push	{r3, r4, r5, lr}
 80031f6:	2300      	movs	r3, #0
 80031f8:	4d06      	ldr	r5, [pc, #24]	; (8003214 <_kill_r+0x20>)
 80031fa:	4604      	mov	r4, r0
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	602b      	str	r3, [r5, #0]
 8003202:	f000 f8c5 	bl	8003390 <_kill>
 8003206:	1c43      	adds	r3, r0, #1
 8003208:	d102      	bne.n	8003210 <_kill_r+0x1c>
 800320a:	682b      	ldr	r3, [r5, #0]
 800320c:	b103      	cbz	r3, 8003210 <_kill_r+0x1c>
 800320e:	6023      	str	r3, [r4, #0]
 8003210:	bd38      	pop	{r3, r4, r5, pc}
 8003212:	bf00      	nop
 8003214:	200003ec 	.word	0x200003ec

08003218 <_getpid_r>:
 8003218:	f000 b8a2 	b.w	8003360 <_getpid>

0800321c <memchr>:
 800321c:	4603      	mov	r3, r0
 800321e:	b510      	push	{r4, lr}
 8003220:	b2c9      	uxtb	r1, r1
 8003222:	4402      	add	r2, r0
 8003224:	4293      	cmp	r3, r2
 8003226:	4618      	mov	r0, r3
 8003228:	d101      	bne.n	800322e <memchr+0x12>
 800322a:	2000      	movs	r0, #0
 800322c:	e003      	b.n	8003236 <memchr+0x1a>
 800322e:	7804      	ldrb	r4, [r0, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	428c      	cmp	r4, r1
 8003234:	d1f6      	bne.n	8003224 <memchr+0x8>
 8003236:	bd10      	pop	{r4, pc}

08003238 <__swhatbuf_r>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	460c      	mov	r4, r1
 800323c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003240:	4615      	mov	r5, r2
 8003242:	2900      	cmp	r1, #0
 8003244:	461e      	mov	r6, r3
 8003246:	b096      	sub	sp, #88	; 0x58
 8003248:	da0c      	bge.n	8003264 <__swhatbuf_r+0x2c>
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	2100      	movs	r1, #0
 800324e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003252:	bf0c      	ite	eq
 8003254:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003258:	2340      	movne	r3, #64	; 0x40
 800325a:	2000      	movs	r0, #0
 800325c:	6031      	str	r1, [r6, #0]
 800325e:	602b      	str	r3, [r5, #0]
 8003260:	b016      	add	sp, #88	; 0x58
 8003262:	bd70      	pop	{r4, r5, r6, pc}
 8003264:	466a      	mov	r2, sp
 8003266:	f000 f849 	bl	80032fc <_fstat_r>
 800326a:	2800      	cmp	r0, #0
 800326c:	dbed      	blt.n	800324a <__swhatbuf_r+0x12>
 800326e:	9901      	ldr	r1, [sp, #4]
 8003270:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003274:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003278:	4259      	negs	r1, r3
 800327a:	4159      	adcs	r1, r3
 800327c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003280:	e7eb      	b.n	800325a <__swhatbuf_r+0x22>

08003282 <__smakebuf_r>:
 8003282:	898b      	ldrh	r3, [r1, #12]
 8003284:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003286:	079d      	lsls	r5, r3, #30
 8003288:	4606      	mov	r6, r0
 800328a:	460c      	mov	r4, r1
 800328c:	d507      	bpl.n	800329e <__smakebuf_r+0x1c>
 800328e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003292:	6023      	str	r3, [r4, #0]
 8003294:	6123      	str	r3, [r4, #16]
 8003296:	2301      	movs	r3, #1
 8003298:	6163      	str	r3, [r4, #20]
 800329a:	b002      	add	sp, #8
 800329c:	bd70      	pop	{r4, r5, r6, pc}
 800329e:	466a      	mov	r2, sp
 80032a0:	ab01      	add	r3, sp, #4
 80032a2:	f7ff ffc9 	bl	8003238 <__swhatbuf_r>
 80032a6:	9900      	ldr	r1, [sp, #0]
 80032a8:	4605      	mov	r5, r0
 80032aa:	4630      	mov	r0, r6
 80032ac:	f7ff faa8 	bl	8002800 <_malloc_r>
 80032b0:	b948      	cbnz	r0, 80032c6 <__smakebuf_r+0x44>
 80032b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032b6:	059a      	lsls	r2, r3, #22
 80032b8:	d4ef      	bmi.n	800329a <__smakebuf_r+0x18>
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	f043 0302 	orr.w	r3, r3, #2
 80032c2:	81a3      	strh	r3, [r4, #12]
 80032c4:	e7e3      	b.n	800328e <__smakebuf_r+0xc>
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	6020      	str	r0, [r4, #0]
 80032ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ce:	81a3      	strh	r3, [r4, #12]
 80032d0:	9b00      	ldr	r3, [sp, #0]
 80032d2:	6120      	str	r0, [r4, #16]
 80032d4:	6163      	str	r3, [r4, #20]
 80032d6:	9b01      	ldr	r3, [sp, #4]
 80032d8:	b15b      	cbz	r3, 80032f2 <__smakebuf_r+0x70>
 80032da:	4630      	mov	r0, r6
 80032dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032e0:	f000 f81e 	bl	8003320 <_isatty_r>
 80032e4:	b128      	cbz	r0, 80032f2 <__smakebuf_r+0x70>
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	f023 0303 	bic.w	r3, r3, #3
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	89a3      	ldrh	r3, [r4, #12]
 80032f4:	431d      	orrs	r5, r3
 80032f6:	81a5      	strh	r5, [r4, #12]
 80032f8:	e7cf      	b.n	800329a <__smakebuf_r+0x18>
	...

080032fc <_fstat_r>:
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	2300      	movs	r3, #0
 8003300:	4d06      	ldr	r5, [pc, #24]	; (800331c <_fstat_r+0x20>)
 8003302:	4604      	mov	r4, r0
 8003304:	4608      	mov	r0, r1
 8003306:	4611      	mov	r1, r2
 8003308:	602b      	str	r3, [r5, #0]
 800330a:	f000 f821 	bl	8003350 <_fstat>
 800330e:	1c43      	adds	r3, r0, #1
 8003310:	d102      	bne.n	8003318 <_fstat_r+0x1c>
 8003312:	682b      	ldr	r3, [r5, #0]
 8003314:	b103      	cbz	r3, 8003318 <_fstat_r+0x1c>
 8003316:	6023      	str	r3, [r4, #0]
 8003318:	bd38      	pop	{r3, r4, r5, pc}
 800331a:	bf00      	nop
 800331c:	200003ec 	.word	0x200003ec

08003320 <_isatty_r>:
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	2300      	movs	r3, #0
 8003324:	4d05      	ldr	r5, [pc, #20]	; (800333c <_isatty_r+0x1c>)
 8003326:	4604      	mov	r4, r0
 8003328:	4608      	mov	r0, r1
 800332a:	602b      	str	r3, [r5, #0]
 800332c:	f000 f828 	bl	8003380 <_isatty>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d102      	bne.n	800333a <_isatty_r+0x1a>
 8003334:	682b      	ldr	r3, [r5, #0]
 8003336:	b103      	cbz	r3, 800333a <_isatty_r+0x1a>
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	bd38      	pop	{r3, r4, r5, pc}
 800333c:	200003ec 	.word	0x200003ec

08003340 <_close>:
 8003340:	2258      	movs	r2, #88	; 0x58
 8003342:	4b02      	ldr	r3, [pc, #8]	; (800334c <_close+0xc>)
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	4770      	bx	lr
 800334c:	200003ec 	.word	0x200003ec

08003350 <_fstat>:
 8003350:	2258      	movs	r2, #88	; 0x58
 8003352:	4b02      	ldr	r3, [pc, #8]	; (800335c <_fstat+0xc>)
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	4770      	bx	lr
 800335c:	200003ec 	.word	0x200003ec

08003360 <_getpid>:
 8003360:	2258      	movs	r2, #88	; 0x58
 8003362:	4b02      	ldr	r3, [pc, #8]	; (800336c <_getpid+0xc>)
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	4770      	bx	lr
 800336c:	200003ec 	.word	0x200003ec

08003370 <_gettimeofday>:
 8003370:	2258      	movs	r2, #88	; 0x58
 8003372:	4b02      	ldr	r3, [pc, #8]	; (800337c <_gettimeofday+0xc>)
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	4770      	bx	lr
 800337c:	200003ec 	.word	0x200003ec

08003380 <_isatty>:
 8003380:	2258      	movs	r2, #88	; 0x58
 8003382:	4b02      	ldr	r3, [pc, #8]	; (800338c <_isatty+0xc>)
 8003384:	2000      	movs	r0, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	200003ec 	.word	0x200003ec

08003390 <_kill>:
 8003390:	2258      	movs	r2, #88	; 0x58
 8003392:	4b02      	ldr	r3, [pc, #8]	; (800339c <_kill+0xc>)
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	4770      	bx	lr
 800339c:	200003ec 	.word	0x200003ec

080033a0 <_lseek>:
 80033a0:	2258      	movs	r2, #88	; 0x58
 80033a2:	4b02      	ldr	r3, [pc, #8]	; (80033ac <_lseek+0xc>)
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	4770      	bx	lr
 80033ac:	200003ec 	.word	0x200003ec

080033b0 <_read>:
 80033b0:	2258      	movs	r2, #88	; 0x58
 80033b2:	4b02      	ldr	r3, [pc, #8]	; (80033bc <_read+0xc>)
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	4770      	bx	lr
 80033bc:	200003ec 	.word	0x200003ec

080033c0 <_sbrk>:
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <_sbrk+0x14>)
 80033c2:	4603      	mov	r3, r0
 80033c4:	6811      	ldr	r1, [r2, #0]
 80033c6:	b909      	cbnz	r1, 80033cc <_sbrk+0xc>
 80033c8:	4903      	ldr	r1, [pc, #12]	; (80033d8 <_sbrk+0x18>)
 80033ca:	6011      	str	r1, [r2, #0]
 80033cc:	6810      	ldr	r0, [r2, #0]
 80033ce:	4403      	add	r3, r0
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4770      	bx	lr
 80033d4:	200003fc 	.word	0x200003fc
 80033d8:	20000400 	.word	0x20000400

080033dc <_write>:
 80033dc:	2258      	movs	r2, #88	; 0x58
 80033de:	4b02      	ldr	r3, [pc, #8]	; (80033e8 <_write+0xc>)
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	4770      	bx	lr
 80033e8:	200003ec 	.word	0x200003ec

080033ec <_exit>:
 80033ec:	e7fe      	b.n	80033ec <_exit>
	...

080033f0 <_init>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	bf00      	nop
 80033f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f6:	bc08      	pop	{r3}
 80033f8:	469e      	mov	lr, r3
 80033fa:	4770      	bx	lr

080033fc <_fini>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr
